<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://deku.posstree.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://deku.posstree.com/" rel="alternate" type="text/html"/><updated>2024-12-03T13:18:27+09:00</updated><id>https://deku.posstree.com/feed.xml</id><title type="html">Deku</title><subtitle>『Programming Artist, DeKu』</subtitle><author><name>dev.yakuza@gmail.com</name></author><entry xml:lang="ja"><title type="html">[GitHub Actions] Jestの実行Actionsのパフォーマンスを改善する</title><link href="https://deku.posstree.com/github_actions/improve-test-performance/" rel="alternate" type="text/html" title="[GitHub Actions] Jestの実行Actionsのパフォーマンスを改善する"/><published>2024-10-23T00:00:00+09:00</published><updated>2024-11-11T20:56:07+09:00</updated><id>https://deku.posstree.com/github_actions/improve-test-performance-ja</id><content type="html" xml:base="https://deku.posstree.com/github_actions/improve-test-performance/"><![CDATA[<div id="contents_list"><h2 id="section">目次</h2><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次</a></li><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#%E5%95%8F%E9%A1%8C%E7%82%B9">問題点</a></li><li><a href="#%E6%80%A7%E8%83%BD%E6%94%B9%E5%96%84">性能改善</a><ul><li><a href="#dependencies-cache">Dependencies Cache</a></li><li><a href="#actions%E5%88%86%E9%9B%A2">Actions分離</a></li><li><a href="#jest%E3%81%AEbail">Jestのbail</a></li><li><a href="#jest%E3%81%AEshard%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">Jestのshardオプション</a></li></ul></li><li><a href="#%E5%AE%8C%E4%BA%86">完了</a></li></ul></div><h2 id="概要">概要</h2><p>最近、会社でテストコードが増えてきたため、<code class="language-plaintext highlighter-rouge">GitHub Actions</code>でコードをチェックするActionに時間がかかるようになりました。この問題を解決するために、<code class="language-plaintext highlighter-rouge">Jest</code>を実行するActionのパフォーマンスを改善した内容を共有したいと思います。</p><h2 id="問題点">問題点</h2><p>現在、次のようなActionを使用してPRをチェックしています。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">jobs</span><span class="pi">:</span>
  <span class="na">check-code</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Check Code</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Prettier</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn format</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn cspell</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn lint</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn stylelint</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">yarn test:ci</span>
          <span class="s">yarn test:storybook</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">yarn build</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build SCSS</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">yarn typegen:scss</span>

          <span class="s"># Get the changed files</span>
          <span class="s">CHANGED_FILES=$(git diff --name-only HEAD)</span>
          <span class="s"># Check if there are changes in the generated files</span>
          <span class="s">if [ -n "$CHANGED_FILES" ]; then</span>
            <span class="s">echo "Error: There are changes in the following files: $CHANGED_FILES"</span>
            <span class="s">exit 1</span>
          <span class="s">fi</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">PR</code>が作成されるたびに<code class="language-plaintext highlighter-rouge">Prettier</code>、<code class="language-plaintext highlighter-rouge">CSpell</code>、<code class="language-plaintext highlighter-rouge">ESLint</code>、<code class="language-plaintext highlighter-rouge">Stylelint</code>、<code class="language-plaintext highlighter-rouge">Test</code>、<code class="language-plaintext highlighter-rouge">Build</code>、<code class="language-plaintext highlighter-rouge">Build SCSS</code>が実行されています。このActionは約25分かかります。</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/check-code-actions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/check-code-actions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/check-code-actions.png" alt="GitHub Actions - Improve Jest test performance"/></picture><h2 id="性能改善">性能改善</h2><p>PRを生成するたびに25分かかるのは非常に非効率的です。このブログポストでは、<code class="language-plaintext highlighter-rouge">Jest</code>を実行するActionのパフォーマンスを改善する方法について説明します。</p><h3 id="dependencies-cache">Dependencies Cache</h3><p>一番最初に行ったのは、<code class="language-plaintext highlighter-rouge">yarn install</code>でインストールされる<code class="language-plaintext highlighter-rouge">Dependencies</code>をキャッシュすることです。これにより、<code class="language-plaintext highlighter-rouge">Dependencies</code>を再インストールする時間を短縮できます。</p><p>この部分は他の<code class="language-plaintext highlighter-rouge">Actions</code>でも使用できるため、<code class="language-plaintext highlighter-rouge">Composite Action</code>として作成しました。<code class="language-plaintext highlighter-rouge">Composite Action</code>については、次のリンクを参照してください。</p><ul><li><a href="https://deku.posstree.com/github_actions/composite-action/" target="_blank">[GitHub Actions] Composite Actionを使ってGitHub Actionsの重複を減らす</a></li></ul><p>キャッシュは<code class="language-plaintext highlighter-rouge">actions/cache</code>を使って行いました。</p><ul><li><code class="language-plaintext highlighter-rouge">actions/cache</code>の公式ドキュメント: <a href="https://github.com/actions/cache" rel="nofollow noreferrer" target="_blank">https://github.com/actions/cache</a></li></ul><p><code class="language-plaintext highlighter-rouge">actions/cache</code>を使って<code class="language-plaintext highlighter-rouge">Dependencies</code>をキャッシュする<code class="language-plaintext highlighter-rouge">Composite Action</code>は次のようになります。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Dependencies'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Dependencies'</span>
<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Get yarn cache directory path</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">yarn-cache-dir-path</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo "dir=$(yarn config get cacheFolder)" &gt;&gt; $GITHUB_OUTPUT</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/cache@v4</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">yarn-cache</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">path</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">node_modules</span>
          <span class="s">**/node_modules</span>
          <span class="s">${{ steps.yarn-cache-dir-path.outputs.dir }}</span>
        <span class="na">key</span><span class="pi">:</span> <span class="s">${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}</span>
        <span class="na">restore-keys</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">${{ runner.os }}-yarn-</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
      <span class="na">if</span><span class="pi">:</span> <span class="s">steps.yarn-cache.outputs.cache-hit != 'true'</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>

</code></pre></div></div><p>私たちのチームは<code class="language-plaintext highlighter-rouge">Yarn</code>の<code class="language-plaintext highlighter-rouge">3.7.0</code>バージョンを使っています。そのため、<code class="language-plaintext highlighter-rouge">corepack enable</code>を追加し、<code class="language-plaintext highlighter-rouge">Yarn 3.7.0</code>のキャッシュフォルダを取得して<code class="language-plaintext highlighter-rouge">node_modules</code>と一緒にキャッシュしました。</p><p>また、プロジェクトがモノレポであるため、<code class="language-plaintext highlighter-rouge">**/node_modules</code>を使ってサブプロジェクトの<code class="language-plaintext highlighter-rouge">node_modules</code>もキャッシュしました。</p><p>もし、皆さんのプロジェクトがモノレポではなく、<code class="language-plaintext highlighter-rouge">Yarn 3.7.0</code>も使っていない場合は、公式ドキュメントを参照して適切な設定を行ってください。</p><ul><li>公式ドキュメント: <a href="https://github.com/actions/cache?tab=readme-ov-file#implementation-examples" rel="nofollow noreferrer" target="_blank">https://github.com/actions/cache?tab=readme-ov-file#implementation-examples</a></li></ul><p>この変更により、パフォーマンスが少し向上しました。</p><ul><li>Before: 1m 25s</li></ul><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/before-cache-actions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/before-cache-actions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/before-cache-actions.png" alt="GitHub Actions - Before using actions/cache for dependencies"/></picture><ul><li>After: 9s</li></ul><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/after-cache-actions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/after-cache-actions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/after-cache-actions.png" alt="GitHub Actions - After using actions/cache for dependencies"/></picture><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h3 id="actions分離">Actions分離</h3><p><code class="language-plaintext highlighter-rouge">Prettier</code>、<code class="language-plaintext highlighter-rouge">CSpell</code>、<code class="language-plaintext highlighter-rouge">ESLint</code>、<code class="language-plaintext highlighter-rouge">Stylelint</code>、<code class="language-plaintext highlighter-rouge">Test</code>、<code class="language-plaintext highlighter-rouge">Build</code>、<code class="language-plaintext highlighter-rouge">Build SCSS</code>をすべて1つの<code class="language-plaintext highlighter-rouge">Action</code>で実行していました。その中で最も時間がかかったのが<code class="language-plaintext highlighter-rouge">Test</code>の実行でした。</p><p>なので、<code class="language-plaintext highlighter-rouge">Test</code>が実行される間に他の<code class="language-plaintext highlighter-rouge">Actions</code>を実行できるように<code class="language-plaintext highlighter-rouge">Actions</code>を分離しました。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">jobs</span><span class="pi">:</span>
  <span class="na">cspell</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn cspell</span>
  <span class="na">remark</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn remark:service_1</span>
  <span class="na">eslint</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn lint:service_1</span>
  <span class="na">stylelint</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn stylelint:service_1</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn build:service_1</span>
  <span class="na">test-service_1</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Test service_1</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn test:ci:service_1</span>
</code></pre></div></div><p>モノレポを使っているため、このような<code class="language-plaintext highlighter-rouge">GitHub Actions</code>はサービスごとに存在し、<code class="language-plaintext highlighter-rouge">if</code>文を使ってそのサービスだけが実行されるようにしています。</p><p>分離する前には、この<code class="language-plaintext highlighter-rouge">Action</code>は約25分かかりました。</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/check-code-actions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/check-code-actions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/check-code-actions.png" alt="GitHub Actions - Before sperating actions"/></picture><p>分離した後、この<code class="language-plaintext highlighter-rouge">Action</code>は約13分程度で性能が改善されました。</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" alt="GitHub Actions - After sperating actions"/></picture><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h3 id="jestのbail">Jestのbail</h3><p><code class="language-plaintext highlighter-rouge">Jest</code>の<code class="language-plaintext highlighter-rouge">bail</code>オプションを使うと、テスト中に1つでもテストが失敗した場合にテストを中止するように設定できます。</p><p>このオプションを追加することで、テストが失敗した場合にすぐにすべてのテストを実行せずに中止することができ、時間を短縮できます。</p><p><code class="language-plaintext highlighter-rouge">Jest</code>の<code class="language-plaintext highlighter-rouge">bail</code>オプションを設定するために、<code class="language-plaintext highlighter-rouge">jest</code>を実行するコマンドが含まれる<code class="language-plaintext highlighter-rouge">package.json</code>ファイルを開いて、次のように変更します。</p><div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">...</span><span class="w">
    </span><span class="nl">"test:ci"</span><span class="p">:</span><span class="w"> </span><span class="s2">"jest --ci --bail"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="err">...</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div><h3 id="jestのshardオプション">Jestのshardオプション</h3><p><code class="language-plaintext highlighter-rouge">Jest</code>の<code class="language-plaintext highlighter-rouge">shard</code>オプションを使うと、テストを並列で実行できます。<code class="language-plaintext highlighter-rouge">shard</code>を使ってテストを並列で実行するために、<code class="language-plaintext highlighter-rouge">Jest</code>を実行する<code class="language-plaintext highlighter-rouge">Action</code>を開いて次のように変更します。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="s">...</span>
  <span class="s">test-service_1</span><span class="err">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Test service_1</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">strategy</span><span class="pi">:</span>
      <span class="na">matrix</span><span class="pi">:</span>
        <span class="na">shard</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">1</span><span class="pi">,</span> <span class="nv">2</span><span class="pi">,</span> <span class="nv">3</span><span class="pi">,</span> <span class="nv">4</span><span class="pi">,</span> <span class="nv">5</span><span class="pi">,</span> <span class="nv">6</span><span class="pi">,</span> <span class="nv">7</span><span class="pi">,</span> <span class="nv">8</span><span class="pi">,</span> <span class="nv">9</span><span class="pi">,</span> <span class="nv">10</span><span class="pi">]</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn test:ci:service_1 -- --shard=$/10</span>
</code></pre></div></div><p>このプロジェクトでは、モノレポを管理するために<code class="language-plaintext highlighter-rouge">Turborepo</code>を使っています。</p><ul><li><code class="language-plaintext highlighter-rouge">Turborepo</code>公式ドキュメント: <a href="https://turborepo.com/" rel="nofollow noreferrer">https://turborepo.com/</a></li></ul><p>この<code class="language-plaintext highlighter-rouge">Action</code>で実行する<code class="language-plaintext highlighter-rouge">yarn test:ci:service_1</code>は<code class="language-plaintext highlighter-rouge">turbo test:ci --parallel --filter=service_1</code>コマンドを実行します。そのため、<code class="language-plaintext highlighter-rouge">Jest</code>の<code class="language-plaintext highlighter-rouge">--shard</code>オプションを渡すために<code class="language-plaintext highlighter-rouge">--</code>を使ってオプションを渡しました。</p><p><code class="language-plaintext highlighter-rouge">shard</code>オプションを追加する前のテストは約13分かかりました。</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" alt="GitHub Actions - After sperating action"/></picture><p><code class="language-plaintext highlighter-rouge">shard</code>オプションを追加した後、テストは約2~3分かかりました。</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/jest-shard-option.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/jest-shard-option.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/jest-shard-option.png" alt="GitHub Actions - Use Jest shard option"/></picture><h2 id="完了">完了</h2><p>このブログポストでは、<code class="language-plaintext highlighter-rouge">Jest</code>を実行する<code class="language-plaintext highlighter-rouge">Action</code>のパフォーマンスを改善する方法について説明しました。パフォーマンス改善前には約25分かかりましたが、パフォーマンス改善後には約2~3分かかるようになりました。</p><p>皆さんも<code class="language-plaintext highlighter-rouge">Cache</code>、<code class="language-plaintext highlighter-rouge">Actions分離</code>、<code class="language-plaintext highlighter-rouge">shard</code>オプションを使って<code class="language-plaintext highlighter-rouge">Jest</code>を実行する<code class="language-plaintext highlighter-rouge">Action</code>のパフォーマンスを改善してみてください。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[GitHub ActionsでJestを実行するActionのパフォーマンスを改善する方法について紹介します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">[GitHub Actions] Composite Actionを使ってGitHub Actionsの重複を減らす</title><link href="https://deku.posstree.com/github_actions/composite-action/" rel="alternate" type="text/html" title="[GitHub Actions] Composite Actionを使ってGitHub Actionsの重複を減らす"/><published>2024-10-22T00:00:00+09:00</published><updated>2024-11-13T18:54:21+09:00</updated><id>https://deku.posstree.com/github_actions/composite-actions-ja</id><content type="html" xml:base="https://deku.posstree.com/github_actions/composite-action/"><![CDATA[<div id="contents_list"><h2 id="section">目次</h2><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#composite-action%E3%81%A8%E3%81%AF">Composite Actionとは</a></li><li><a href="#%E9%87%8D%E8%A4%87%E3%82%B3%E3%83%BC%E3%83%89%E3%81%8C%E3%81%82%E3%82%8Bgithub-action%E3%81%AE%E4%BE%8B">重複コードがあるGitHub Actionの例</a></li><li><a href="#composite-action%E3%82%92%E4%BD%9C%E3%82%8B">Composite Actionを作る</a></li><li><a href="#composite-action%E3%82%92%E4%BD%BF%E3%81%86">Composite Actionを使う</a></li><li><a href="#composite-action%E3%81%AEinputs">Composite Actionのinputs</a></li><li><a href="#composite-action%E3%81%AEoutputs">Composite Actionのoutputs</a></li><li><a href="#%E5%AE%8C%E4%BA%86">完了</a></li></ul></div><h2 id="概要">概要</h2><p>GitHub Actionsを使って開発をする際にActionで共通で使う部分が出てくることがあります。この時、Composite Actionを使うと共通で使う部分を一つのActionにまとめて再利用性を高めることができます。</p><p>このブログポストではComposite Actionを使ってGitHub Actionsの再利用性を高める方法について紹介します。</p><h2 id="composite-actionとは">Composite Actionとは</h2><p>Composite Actionは複数のActionを一つのActionにまとめて使うことができる機能です。Composite Actionを使うと複数のActionで共通で使う部分を一つのActionにまとめて再利用性を高めることができます。</p><ul><li>公式ドキュメント: <a href="https://docs.github.com/en/actions/sharing-automations/creating-actions/creating-a-composite-action" rel="nofollow noreferrer" target="_blank">Composite Action</a></li></ul><h2 id="重複コードがあるgithub-actionの例">重複コードがあるGitHub Actionの例</h2><p>Reactを使うプロジェクトで次のようなGitHub Actionsを使うことができます。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Check</span><span class="nv"> </span><span class="s">code'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">cspell</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn cspell</span>
  <span class="na">remark</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn remark</span>
  <span class="na">eslint</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn lint</span>
  <span class="na">stylelint</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn stylelint</span>
  <span class="na">test</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn test</span>
</code></pre></div></div><p>Reactプロジェクトで<code class="language-plaintext highlighter-rouge">CSpell</code>と複数の<code class="language-plaintext highlighter-rouge">Linter</code>と<code class="language-plaintext highlighter-rouge">Test</code>を実行するGitHub Actionsです。ここでDependenciesをインストールする部分が重複していることが分かります。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="s">...</span>
      <span class="s">- name</span><span class="err">:</span> <span class="s">Setup node</span>
        <span class="s">uses</span><span class="err">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="s">with</span><span class="err">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="s">...</span>
</code></pre></div></div><p>この部分をComposite Actionを使って一つのActionにまとめて再利用する方法について見ていきます。</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="composite-actionを作る">Composite Actionを作る</h2><p>Dependenciesをインストールする部分をComposite Actionにするために<code class="language-plaintext highlighter-rouge">.github/actions/install-dependencies.yml</code>ファイルを作成して次のように修正します。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Dependencies'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Dependencies'</span>

<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">Composite Action</code>を使うためには<code class="language-plaintext highlighter-rouge">using</code>キーワードに<code class="language-plaintext highlighter-rouge">composite</code>を使ってComposite Actionであることを明示します。そして<code class="language-plaintext highlighter-rouge">steps</code>にComposite Actionを実行するステップを記述します。</p><p>コマンドを実行する際には<code class="language-plaintext highlighter-rouge">shell</code>キーワードに<code class="language-plaintext highlighter-rouge">bash</code>を使ってbashシェルを使うように設定する必要があります。</p><h2 id="composite-actionを使う">Composite Actionを使う</h2><p>Composite Actionを使うためにはGitHub Actionsを次のように修正します。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Check</span><span class="nv"> </span><span class="s">code'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">cspell</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn cspell</span>
  <span class="na">remark</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn remark</span>
  <span class="na">eslint</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn lint</span>
  <span class="na">stylelint</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn stylelint</span>
  <span class="na">test</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn test</span>
</code></pre></div></div><p>공통으로 분리한 Composite Action을 다음과 같이 사용하도록 수정하였습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="s">...</span>
       <span class="s">- name</span><span class="err">:</span> <span class="s">Checkout code</span>
        <span class="s">uses</span><span class="err">:</span> <span class="s">actions/checkout@v4</span>
        <span class="s">with</span><span class="err">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
<span class="err">      </span><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="s">...</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">Composite Action</code>는 <code class="language-plaintext highlighter-rouge">.github</code>フォルダで管理しているため、<code class="language-plaintext highlighter-rouge">actions/checkout</code>を使ってコードを先にチェックアウトする必要があります。その後、<code class="language-plaintext highlighter-rouge">uses</code>キーワードにComposite Actionのパスを記述してComposite Actionを使えます。</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="composite-actionのinputs">Composite Actionのinputs</h2><p><code class="language-plaintext highlighter-rouge">Composite Action</code>を使う際、特定の値を渡してActionを実行したい場合があります。この場合、<code class="language-plaintext highlighter-rouge">Composite Action</code>の<code class="language-plaintext highlighter-rouge">inputs</code>を使って値を渡すことができます。</p><p><code class="language-plaintext highlighter-rouge">Composite Action</code>の<code class="language-plaintext highlighter-rouge">inputs</code>を使うため、<code class="language-plaintext highlighter-rouge">Composite Action</code>を次のように修正します。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Composite</span><span class="nv"> </span><span class="s">Action</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">inputs'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Composite</span><span class="nv"> </span><span class="s">Action</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">inputs'</span>
<span class="na">inputs</span><span class="pi">:</span>
  <span class="na">variable_name</span><span class="pi">:</span>
    <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Description</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">variable'</span>
    <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">default</span><span class="pi">:</span> <span class="s1">'</span><span class="s">variabel_default_value'</span>
<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print Composite Action inputs variable</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo ${{ inputs.variable_name }}</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>

</code></pre></div></div><p>この<code class="language-plaintext highlighter-rouge">inputs</code>を使うと条件によって異なる動作をする<code class="language-plaintext highlighter-rouge">Composite Action</code>を作成することができます。</p><p>このように作った<code class="language-plaintext highlighter-rouge">Composite Action</code>は次のように使って<code class="language-plaintext highlighter-rouge">Composite Action</code>の<code class="language-plaintext highlighter-rouge">inputs</code>を使うことができます。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
      <span class="s">...</span>
      <span class="s">- name</span><span class="err">:</span> <span class="s">Checkout code</span>
        <span class="s">uses</span><span class="err">:</span> <span class="s">actions/checkout@v4</span>
        <span class="s">with</span><span class="err">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
<span class="err">      </span><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Composite Action with inputs</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/composite_action</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">variable_name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">test_input_value'</span>
      <span class="s">...</span>

</code></pre></div></div><h2 id="composite-actionのoutputs">Composite Actionのoutputs</h2><p><code class="language-plaintext highlighter-rouge">Composite Action</code>を使う際、<code class="language-plaintext highlighter-rouge">Composite Action</code>から特定の値を受け取ってActionを実行したい場合があります。この場合、<code class="language-plaintext highlighter-rouge">Composite Action</code>の<code class="language-plaintext highlighter-rouge">outputs</code>を使って値を渡すことができます。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Composite</span><span class="nv"> </span><span class="s">Action</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">outputs'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Composite</span><span class="nv"> </span><span class="s">Action</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">outputs'</span>
<span class="na">outputs</span><span class="pi">:</span>
  <span class="na">variable_name</span><span class="pi">:</span>
    <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">variable</span><span class="nv"> </span><span class="s">description"</span>
    <span class="na">value</span><span class="pi">:</span> <span class="s">${{ steps.output_step.outputs.output_variable_name }}</span>
<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set outputs</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">output_step</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo "output_variable_name=test_output_value" &gt;&gt; $GITHUB_OUTPUT</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>

</code></pre></div></div><p>このように作った<code class="language-plaintext highlighter-rouge">Composite Action</code>は次のように使って<code class="language-plaintext highlighter-rouge">Composite Action</code>の<code class="language-plaintext highlighter-rouge">outputs</code>を使うことができます。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
      <span class="s">...</span>
      <span class="s">- name</span><span class="err">:</span> <span class="s">Checkout code</span>
        <span class="s">uses</span><span class="err">:</span> <span class="s">actions/checkout@v4</span>
        <span class="s">with</span><span class="err">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
<span class="err">      </span><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Composite Action with outputs</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">composite_action</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/composite_action</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print Composite Action outputs variable</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo ${{ steps.composite_action.outputs.variable_name }}</span>
      <span class="s">...</span>

</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">outputs</code>を使うと<code class="language-plaintext highlighter-rouge">Composite Action</code>の実行結果を使う<code class="language-plaintext highlighter-rouge">Action</code>を作成することができます。</p><h2 id="完了">完了</h2><p>これで<code class="language-plaintext highlighter-rouge">Composite Action</code>を使ってGitHub Actionsの重複を減らし、Actionの再利用性を高める方法について紹介しました。</p><p>皆さんももし重複するActionがあれば<code class="language-plaintext highlighter-rouge">Composite Action</code>を使ってActionの再利用性を高めてみてください。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[GitHub Actionsで重複で使われるActionをComposite Actionで作ってActionの再利用性を高める方法について紹介します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">[Flutter] PageViewウィジェットの使い方</title><link href="https://deku.posstree.com/flutter/widgets/page_view/" rel="alternate" type="text/html" title="[Flutter] PageViewウィジェットの使い方"/><published>2024-10-11T00:00:00+09:00</published><updated>2024-10-21T20:59:58+09:00</updated><id>https://deku.posstree.com/flutter/widgets/widget-page-view-ja</id><content type="html" xml:base="https://deku.posstree.com/flutter/widgets/page_view/"><![CDATA[<div id="contents_list"><h2 id="section">目次</h2><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次</a></li><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#pageview%E3%82%A6%E3%82%A3%E3%82%B8%E3%82%A7%E3%83%83%E3%83%88">PageViewウィジェット</a></li><li><a href="#pageview%E3%82%A6%E3%82%A3%E3%82%B8%E3%82%A7%E3%83%83%E3%83%88%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9">PageViewウィジェットの使い方</a></li><li><a href="#pagecontorller">PageContorller</a></li><li><a href="#scrolldirection%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">scrollDirectionオプション</a></li><li><a href="#onpagechanged%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">onPageChangedオプション</a></li><li><a href="#pageview-builder">PageView Builder</a></li><li><a href="#%E5%AE%8C%E4%BA%86">完了</a></li></ul></div><h2 id="概要">概要</h2><p>Flutterでアプリを開発する時、<code class="language-plaintext highlighter-rouge">TikTok</code>のように画面全体をスクロールする機能を実装したい時があります。この時Flutterが基本的に提供する<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットを使えば簡単に実装できます。</p><p>このブログポストでは、<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットを使う方法について説明します。</p><p>このブログポストで紹介するソースコードは以下のリンクで確認できます。</p><ul><li>GitHub: <a href="https://github.com/dev-yakuza/study-flutter/tree/main/widget/page_view" rel="nofollow noreferrer" target="_blank">https://github.com/dev-yakuza/study-flutter/tree/main/widget/page_view</a></li></ul><h2 id="pageviewウィジェット">PageViewウィジェット</h2><p>Flutterが提供する<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットはスクロールを通じて画面全体を移動するウィジェットです。<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットは<code class="language-plaintext highlighter-rouge">children</code>プロパティを通じて複数のウィジェットを渡してページを構成できます。</p><picture><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" type="image/avif"/><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" type="image/webp"/><img src="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" alt="Flutter - PageView widget scroll vertical"/></picture><p>公式ドキュメントを通じて<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットについて詳しい情報を確認できます。</p><ul><li>公式ドキュメント: <a href="https://api.flutter.dev/flutter/widgets/PageView-class.html" rel="nofollow noreferrer" target="_blank">PageView class</a></li></ul><h2 id="pageviewウィジェットの使い方">PageViewウィジェットの使い方</h2><p><code class="language-plaintext highlighter-rouge">PageView</code>はFlutterが基本的に提供するウィジェットなので、次のように<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットを簡単に使うことができます。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyHomePage</span> <span class="kd">extends</span> <span class="n">StatelessWidget</span> <span class="p">{</span>
  <span class="n">MyHomePage</span><span class="p">({</span><span class="k">super</span><span class="o">.</span><span class="na">key</span><span class="p">});</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">body:</span> <span class="n">PageView</span><span class="p">(</span>
        <span class="nl">children:</span> <span class="p">[</span>
          <span class="n">Container</span><span class="p">(</span>
            <span class="nl">width:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">height:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">red</span><span class="p">,</span>
          <span class="p">),</span>
          <span class="n">Container</span><span class="p">(</span>
            <span class="nl">width:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">height:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">blue</span><span class="p">,</span>
          <span class="p">),</span>
          <span class="n">Container</span><span class="p">(</span>
            <span class="nl">width:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">height:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">green</span><span class="p">,</span>
          <span class="p">),</span>
        <span class="p">],</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットの<code class="language-plaintext highlighter-rouge">children</code>に表示するウィジェットを一緒に渡すと、次のように画面全体をスクロールしてページを移動できるようになります。</p><picture><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_horizontal.gif" type="image/avif"/><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_horizontal.gif" type="image/webp"/><img src="/assets/images/category/flutter/2024/page_view/page_view_scroll_horizontal.gif" alt="Flutter - PageView widget scroll horizontal"/></picture><p>ここでは分かりやすくするために<code class="language-plaintext highlighter-rouge">Container</code>ウィジェットを使用しました。</p><h2 id="pagecontorller">PageContorller</h2><p><code class="language-plaintext highlighter-rouge">PageContorller</code>を使用すると初期に表示するページを決定できます。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyHomePage</span> <span class="kd">extends</span> <span class="n">StatelessWidget</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">pageController</span> <span class="o">=</span> <span class="n">PageController</span><span class="p">(</span>
    <span class="nl">initialPage:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="p">);</span>

  <span class="n">MyHomePage</span><span class="p">({</span><span class="k">super</span><span class="o">.</span><span class="na">key</span><span class="p">});</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">body:</span> <span class="n">PageView</span><span class="p">(</span>
        <span class="nl">controller:</span> <span class="n">pageController</span><span class="p">,</span>
        <span class="nl">children:</span> <span class="p">[</span>
          <span class="p">...</span>
        <span class="p">],</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">PageController</code>の<code class="language-plaintext highlighter-rouge">initialPage</code>プロパティに初めに表示するページのインデックスを設定できます。このように変更してアプリを再実行すると、初めに表示されるページが変更されたことを確認できます。</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="scrolldirectionオプション">scrollDirectionオプション</h2><p><code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットは<code class="language-plaintext highlighter-rouge">scrollDirection</code>オプションを通じてスクロール方向を設定できます。基本的に<code class="language-plaintext highlighter-rouge">scrollDirection</code>オプションは<code class="language-plaintext highlighter-rouge">Axis.horizontal</code>に設定されていますが、これを<code class="language-plaintext highlighter-rouge">Axis.vertical</code>に設定して垂直方向にスクロールできます。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PageView</span><span class="p">(</span>
  <span class="nl">controller:</span> <span class="n">pageController</span><span class="p">,</span>
  <span class="nl">scrollDirection:</span> <span class="n">Axis</span><span class="o">.</span><span class="na">vertical</span><span class="p">,</span>
  <span class="nl">children:</span> <span class="p">[</span>
    <span class="p">...</span>
  <span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div><p>このように修正して実行すると、次のように垂直方向にスクロールできるページを確認できます。</p><picture><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" type="image/avif"/><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" type="image/webp"/><img src="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" alt="Flutter - PageView widget scroll vertical"/></picture><h2 id="onpagechangedオプション">onPageChangedオプション</h2><p><code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットは<code class="language-plaintext highlighter-rouge">onPageChanged</code>オプションを通じてページが変更された時に呼び出されるコールバック関数を設定できます。これを通じてページが変更された時に追加的な作業を行うことができます。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PageView</span><span class="p">(</span>
  <span class="nl">controller:</span> <span class="n">pageController</span><span class="p">,</span>
  <span class="nl">onPageChanged:</span> <span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">print</span><span class="p">(</span><span class="s">'Page changed to </span><span class="si">$index</span><span class="s">'</span><span class="p">);</span>
  <span class="p">},</span>
  <span class="nl">children:</span> <span class="p">[</span>
    <span class="p">...</span>
  <span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div><h2 id="pageview-builder">PageView Builder</h2><p><code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットは<code class="language-plaintext highlighter-rouge">PageView.builder</code>コンストラクタを通じて動的にページを作成することができます。<code class="language-plaintext highlighter-rouge">PageView.builder</code>コンストラクタは<code class="language-plaintext highlighter-rouge">itemBuilder</code>プロパティを通じてページを作成する関数を渡すことができます。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PageView</span><span class="o">.</span><span class="na">builder</span><span class="p">(</span>
  <span class="nl">controller:</span> <span class="n">pageController</span><span class="p">,</span>
  <span class="nl">itemCount:</span> <span class="mi">10</span><span class="p">,</span>
  <span class="nl">itemBuilder:</span> <span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Container</span><span class="p">(</span>
      <span class="nl">width:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
      <span class="nl">height:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
      <span class="nl">color:</span> <span class="n">index</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">Colors</span><span class="o">.</span><span class="na">red</span> <span class="o">:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">blue</span><span class="p">,</span>
    <span class="p">);</span>
  <span class="p">},</span>
<span class="p">)</span>
</code></pre></div></div><h2 id="完了">完了</h2><p>今回のブログポストではFlutterが基本的に提供する<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットを使ってページ全体をスクロールする方法について説明しました。<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットを使うと簡単にページ全体をスクロールでき、<code class="language-plaintext highlighter-rouge">scrollDirection</code>オプションを通じてスクロール方向を設定できます。</p><p><code class="language-plaintext highlighter-rouge">PageView</code>を使うと、<code class="language-plaintext highlighter-rouge">TikTok</code>のように画面全体をスクロールする機能を簡単に実装できます。もし、実装中のアプリが画面全体をスクロールする機能が必要なら、<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットを使って実装してみてください。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="flutter"/><summary type="html"><![CDATA[Flutterが基本的提供するPageViewウィジェットを使ってページ全体をスクロールする方法について説明します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/flutter/background.png"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/flutter/background.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">[Flutter] Test Matcherを使う</title><link href="https://deku.posstree.com/flutter/test/matcher/" rel="alternate" type="text/html" title="[Flutter] Test Matcherを使う"/><published>2024-10-06T00:00:00+09:00</published><updated>2024-10-09T09:48:41+09:00</updated><id>https://deku.posstree.com/flutter/test/test-matcher-ja</id><content type="html" xml:base="https://deku.posstree.com/flutter/test/matcher/"><![CDATA[<div id="contents_list"><h2 id="section">目次</h2><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次</a></li><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#matcher">Matcher</a></li><li><a href="#%E3%82%88%E3%81%8F%E4%BD%BF%E3%82%8F%E3%82%8C%E3%82%8Bmatcher">よく使われるMatcher</a></li><li><a href="#%E5%AE%8C%E4%BA%86">完了</a></li></ul></div><h2 id="概要">概要</h2><p>Flutterでテストコードを書く際、様々な<code class="language-plaintext highlighter-rouge">Matcher</code>を使うことができます。今回のブログポストでは、Flutterのテストコードで使える<code class="language-plaintext highlighter-rouge">Matcher</code>について紹介し、使い方について説明します。</p><h2 id="matcher">Matcher</h2><p>テストコードでMatcherは、特定の値や条件を検証するための検証ツールです。テストが実際の値と期待する値や状態が一致するかどうかを比較する際、Matcherを使ってより表現力豊かで読みやすいテストコードを書くことができます。</p><p>FlutterのテストコードでMatcherは、<code class="language-plaintext highlighter-rouge">expect</code>文を通じて値が期待する条件に一致するかを確認する際に主に使用されます。Matcherは単純な値の比較だけでなく、より複雑な条件やさまざまなタイプの検証をサポートします。</p><p>例えば:</p><ul><li>equals: 値が特定の値と同じかどうか比較できます。</li><li>isNull: 値がnullかどうかを確認できます。</li><li>contains: コレクションや文字列に特定の項目が含まれているかを検査できます。</li><li>throwsException: 関数が例外をスローするかを確認できます。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">test</span><span class="p">(</span><span class="s">'Example'</span><span class="p">,</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">contains</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">isNotEmpty</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">'Error'</span><span class="p">),</span> <span class="n">throwsException</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div><p>Matcherを使うと、テストコードがより直感的で読みやすくなり、可読性が向上し、複雑な条件や状態を簡潔に処理できます。また、複数の条件を組み合わせたり否定(Negation)することができ、より柔軟なテスト作成が可能です。</p><h2 id="よく使われるmatcher">よく使われるMatcher</h2><p>Flutterの公式ドキュメントを確認すると、使用可能なMatcherを確認できます。.</p><ul><li>公式ドキュメント: <a href="https://pub.dev/documentation/matcher/latest/matcher/matcher-library.html" rel="nofollow noreferrer" target="_blank">https://pub.dev/documentation/matcher/latest/matcher/matcher-library.html</a></li></ul><p>ここでは、よく使われるMatcherを紹介します。</p><ul><li>equals(expected): 与えられた値がexpectedと同じかどうかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">actual</span><span class="p">,</span> <span class="n">equals</span><span class="p">(</span><span class="n">expected</span><span class="p">));</span>
</code></pre></div></div><ul><li>isNot(matcher): 値が与えられたMatcherと一致しないかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">actual</span><span class="p">,</span> <span class="n">isNot</span><span class="p">(</span><span class="n">equals</span><span class="p">(</span><span class="mi">5</span><span class="p">)));</span>
</code></pre></div></div><ul><li>isTrue / isFalse: 値がtrueまたはfalseかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">isTrue</span><span class="p">);</span>
</code></pre></div></div><ul><li>contains(element): コレクションや文字列に特定の要素が含まれているかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="n">contains</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</code></pre></div></div><ul><li>isNull / isNotNull: 値がnullかどうかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">isNull</span><span class="p">);</span>
<span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">isNotNull</span><span class="p">);</span>
</code></pre></div></div><ul><li>greaterThan(value) / lessThan(value): 値が与えられた値より大きいか小さいかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">greaterThan</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
</code></pre></div></div><ul><li>startsWith(prefix) / endsWith(suffix): 文字列が特定の文字列で始まるか終わるかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="s">'Flutter'</span><span class="p">,</span> <span class="n">startsWith</span><span class="p">(</span><span class="s">'Fl'</span><span class="p">));</span>
</code></pre></div></div><ul><li>throwsException / throwsA(matcher): 特定の例外が発生するかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">someFunction</span><span class="p">(),</span> <span class="n">throwsException</span><span class="p">);</span>
</code></pre></div></div><ul><li>allOf(matcher1, matcher2, …): 与えられたMatcherがすべて一致するかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">allOf</span><span class="p">(</span><span class="n">startsWith</span><span class="p">(</span><span class="s">'Fl'</span><span class="p">),</span> <span class="n">contains</span><span class="p">(</span><span class="s">'utt'</span><span class="p">)));</span>
</code></pre></div></div><ul><li>anyOf(matcher1, matcher2, …): 与えられたMatcherのいずれかが一致するかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">anyOf</span><span class="p">(</span><span class="n">equals</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">equals</span><span class="p">(</span><span class="mi">2</span><span class="p">)));</span>
</code></pre></div></div><ul><li>isA<T>(): 値が特定の型であるかを確認します。</T></li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">isA</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;());</span>
</code></pre></div></div><h2 id="完了">完了</h2><p>これで、Flutterのテストコードで使用可能なMatcherについて紹介しました。Matcherを使用すると、テストコードをより直感的で読みやすく書くことができ、さまざまな条件や状態を検証できます。</p><p>Flutterのウィジェットテストで、私は下記のようなコードをよく使っていました。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">titleContainer</span><span class="o">.</span><span class="na">child</span><span class="o">.</span><span class="na">runtimeType</span><span class="p">,</span> <span class="n">Container</span><span class="p">);</span>
</code></pre></div></div><p>しかし、上記のコードは<code class="language-plaintext highlighter-rouge">isA&lt;T&gt;()</code> Matcherを使用すると次のようにより明確に表現できます。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">titleContainer</span><span class="o">.</span><span class="na">child</span><span class="p">,</span> <span class="n">isA</span><span class="p">&lt;</span><span class="n">Container</span><span class="p">&gt;());</span>
</code></pre></div></div><p>皆さんもMatcherを使用してテストコードをより効果的で読みやすく書いてみてください。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="flutter"/><summary type="html"><![CDATA[Flutterのテストコードで使えるMatcherについて紹介し、使い方について説明します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/flutter/background.png"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/flutter/background.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">[GitHub] 複数のGitHubアカウントを1つのマシンで使う方法</title><link href="https://deku.posstree.com/git/user-multiple-github-users/" rel="alternate" type="text/html" title="[GitHub] 複数のGitHubアカウントを1つのマシンで使う方法"/><published>2024-09-25T00:00:00+09:00</published><updated>2024-10-05T20:48:48+09:00</updated><id>https://deku.posstree.com/git/use-multiple-github-users-ja</id><content type="html" xml:base="https://deku.posstree.com/git/user-multiple-github-users/"><![CDATA[<div id="contents_list"><h2 id="section">目次</h2><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次</a></li><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#ssh%E3%82%AD%E3%83%BC%E3%81%AE%E7%94%9F%E6%88%90">SSHキーの生成</a></li><li><a href="#github%E3%81%ABssh%E3%82%AD%E3%83%BC%E7%99%BB%E9%8C%B2">GitHubにSSHキー登録</a></li><li><a href="#config%E3%81%AE%E8%A8%AD%E5%AE%9A">configの設定</a></li><li><a href="#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%B3clone">クローンclone</a></li><li><a href="#git%E3%83%A6%E3%83%BC%E3%82%B6%E8%A8%AD%E5%AE%9A">Gitユーザ設定</a></li><li><a href="#%E5%AE%8C%E4%BA%86">完了</a></li></ul></div><h2 id="概要">概要</h2><p>1つのマシン(PC)で会社のGitHubアカウントと個人のGitHubアカウントの両方を使いたい場合があります。今回のブログ投稿では、複数のGitHubアカウントを1つのマシンで設定して使う方法について説明します。</p><h2 id="sshキーの生成">SSHキーの生成</h2><p>複数のGitHubアカウントを使うためには、SSHキーを生成する必要があります。私は<code class="language-plaintext highlighter-rouge">macOS</code>を使用しているため、<code class="language-plaintext highlighter-rouge">macOS</code>を基準に説明します。</p><p>まず、<code class="language-plaintext highlighter-rouge">.ssh</code>ディレクトリに移動します。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/.ssh
</code></pre></div></div><p>その後、<code class="language-plaintext highlighter-rouge">ssh-keygen</code>コマンドを使用してSSHキーを生成します。まず、個人アカウント用のSSHキーを生成します。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"GITHUB_PERSONAL_ACCOUNT_EMAIL"</span>
</code></pre></div></div><p>すると、次のようにどの名前でキーを保存するか尋ねられます。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Enter file <span class="k">in </span>which to save the key <span class="o">(</span>/Users/user_name/.ssh/id_rsa<span class="o">)</span>:
</code></pre></div></div><p>私は区別しやすくするため、<code class="language-plaintext highlighter-rouge">id_rsa_personal</code>という名前で保存しました。その後、会社アカウント用のSSHキーを生成します。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"GITHUB_COMPANY_ACCOUNT_EMAIL"</span>
</code></pre></div></div><p>同様に、どの名前でキーを保存するか尋ねられます。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Enter file <span class="k">in </span>which to save the key <span class="o">(</span>/Users/user_name/.ssh/id_rsa<span class="o">)</span>:
</code></pre></div></div><p>私は区別しやすくするため、<code class="language-plaintext highlighter-rouge">id_rsa_work</code>という名前で保存しました。</p><h2 id="githubにsshキー登録">GitHubにSSHキー登録</h2><p>生成したSSHキーをGitHubに登録する必要があります。まず、個人アカウントにSSHキーを登録してみましょう。</p><p>次のコマンドを実行すると、SSHキーを確認できます。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> ~/.ssh/id_rsa_personal.pub
</code></pre></div></div><p>表示されたSSHキーをコピーし、GitHubのウェブサイトにアクセスして<code class="language-plaintext highlighter-rouge">Settings</code> -&gt; <code class="language-plaintext highlighter-rouge">SSH and GPG keys</code> -&gt; <code class="language-plaintext highlighter-rouge">New SSH key</code>をクリックしてSSHキーを登録します。この時、GitHubのウェブサイトには個人アカウントでログインしている必要があります。</p><picture><source srcset="/assets/images/category/git/2024/user-multiple-github-users/github_register_new_ssh_key.avif" type="image/avif"/><source srcset="/assets/images/category/git/2024/user-multiple-github-users/github_register_new_ssh_key.webp" type="image/webp"/><img src="/assets/images/category/git/2024/user-multiple-github-users/github_register_new_ssh_key.png" alt="Use multiple GitHub users in local machine: Register new SSH key"/></picture><p>これと同様の方法で会社アカウントにSSHキーを登録します。この時、GitHubのウェブサイトには会社アカウントでログインしている必要があります。</p><h2 id="configの設定">configの設定</h2><p>このように設定したSSHキーを使ってGitHubのアカウントを区別するために、<code class="language-plaintext highlighter-rouge">~/.ssh/config</code>ファイルを次のように編集します。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># personal</span>

Host personal
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa_personal

<span class="c"># work</span>

Host github.com
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa_work
</code></pre></div></div><p>そして、ターミナルで次のコマンドを実行してSSHキーが正しく登録されているか確認します。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-T</span> git@personal
</code></pre></div></div><p>次のようなメッセージが表示されたら、正常に登録されていることになります。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hi GITHUB_PERSONAL_ACCOUNT! You<span class="s1">'ve successfully authenticated, but GitHub does not provide shell access.
</span></code></pre></div></div><p>同様に、会社アカウントについても次のコマンドを実行してSSHキーが正しく登録されているか確認します。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-T</span> git@github.com
</code></pre></div></div><p>同じく、次のようなメッセージが表示されたら、正常に登録されていることになります。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hi GITHUB_COMPANY_ACCOUNT! You<span class="s1">'ve successfully authenticated, but GitHub does not provide shell access.
</span></code></pre></div></div><h2 id="クローンclone">クローン(clone)</h2><p>これでGitHubからプロジェクトをクローンする際、次のように個人アカウントと会社アカウントを区別して使うことができるようになります。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Personal account</span>
git clone git@personal:GITHUB_PERSONAL_ACCOUNT/REPOSITORY.git
<span class="c"># Company account</span>
git clone git@github.com:GITHUB_COMPANY_ACCOUNT/REPOSITORY.git
</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="gitユーザ設定">Gitユーザ設定</h2><p>次のコマンドを実行すると、<code class="language-plaintext highlighter-rouge">Git</code>に設定された<code class="language-plaintext highlighter-rouge">user.name</code>と<code class="language-plaintext highlighter-rouge">user.email</code>を確認できます。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check user name</span>
git config user.name
<span class="c"># Check user email</span>
git config user.email
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">Git</code>の<code class="language-plaintext highlighter-rouge">Global</code>設定にユーザ情報を登録していない場合、コマンドを実行した時、何も表示されないはずです。</p><p><code class="language-plaintext highlighter-rouge">.gitconfig</code>ファイルを編集して<code class="language-plaintext highlighter-rouge">Global</code>ユーザを設定し、特定のフォルダで使うユーザを設定することができます。</p><p>まず、<code class="language-plaintext highlighter-rouge">~/.gitconfig-work</code>ファイルと<code class="language-plaintext highlighter-rouge">~/.gitconfig-personal</code>ファイルを作成し、次のように編集します。</p><ul><li><code class="language-plaintext highlighter-rouge">~/.gitconfig-work</code></li></ul><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># code ~/.gitconfig-work</span>
<span class="o">[</span>user]
	name <span class="o">=</span> <span class="s2">"GITHUB_COMPANY_ACCOUNT_USER_NAME"</span>
	email <span class="o">=</span> GITHUB_COMPANY_ACCOUNT_EMAIL
</code></pre></div></div><ul><li><code class="language-plaintext highlighter-rouge">~/.gitconfig-personal</code></li></ul><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># code ~/.gitconfig-personal</span>
<span class="o">[</span>user]
    name <span class="o">=</span> <span class="s2">"GITHUB_PERSONAL_ACCOUNT_USER_NAME"</span>
    email <span class="o">=</span> GITHUB_PERSONAL_ACCOUNT_EMAIL
</code></pre></div></div><p>その後、<code class="language-plaintext highlighter-rouge">.gitconfig</code>ファイルを次のように編集します。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># code ~/.gitconfig</span>

<span class="c"># This is for Global settings</span>
<span class="o">[</span>user]
	name <span class="o">=</span> <span class="s2">"GITHUB_COMPANY_ACCOUNT_USER_NAME"</span>
	email <span class="o">=</span> GITHUB_COMPANY_ACCOUNT_EMAIL
<span class="c"># For company account</span>
<span class="o">[</span>includeIf <span class="s2">"gitdir:~/WORK/"</span><span class="o">]</span>
    path <span class="o">=</span> ~/.gitconfig-work
<span class="c"># For personal account</span>
<span class="o">[</span>includeIf <span class="s2">"gitdir:~/PERSONAL/"</span><span class="o">]</span>
    path <span class="o">=</span> ~/.gitconfig-personal
</code></pre></div></div><p>この設定では、<code class="language-plaintext highlighter-rouge">Git</code>の<code class="language-plaintext highlighter-rouge">Global</code>ユーザとして会社アカウントを設定しました。<code class="language-plaintext highlighter-rouge">WORK</code>フォルダでは会社アカウントを使うようにして、<code class="language-plaintext highlighter-rouge">PERSONAL</code>フォルダでは個人アカウントを使うように設定しました。</p><p>うまく設定されたか確認するために、<code class="language-plaintext highlighter-rouge">PERSONAL</code>フォルダに移動します。その後、次のコマンドを実行してユーザ情報を確認します。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/PERSONAL
git config user.name
git config user.email
</code></pre></div></div><p>すると、次のように<code class="language-plaintext highlighter-rouge">Git</code>の<code class="language-plaintext highlighter-rouge">Global</code>ユーザ情報が表示されます。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># git config user.name</span>
GITHUB_COMPANY_ACCOUNT_USER_NAME
<span class="c"># git config user.email</span>
GITHUB_COMPANY_ACCOUNT_EMAIL
</code></pre></div></div><p>これは、現在のフォルダ(<code class="language-plaintext highlighter-rouge">PERSONAL</code>)に<code class="language-plaintext highlighter-rouge">Git</code>プロジェクトが存在しないため、単に<code class="language-plaintext highlighter-rouge">Git</code>の<code class="language-plaintext highlighter-rouge">Global</code>ユーザ情報が表示されているだけです。</p><p>そしたら、次のように実際に<code class="language-plaintext highlighter-rouge">Git</code>プロジェクトを作成し、<code class="language-plaintext highlighter-rouge">Git</code>のユーザ情報を確認してみましょう。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> ~/PERSONAL/temp
<span class="nb">cd</span> ~/PERSONAL/temp
git init
git config user.name
git config user.email
</code></pre></div></div><p>すると、次のように<code class="language-plaintext highlighter-rouge">Git</code>の個人アカウントのユーザ情報が表示されます。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GITHUB_PERSONAL_ACCOUNT_USER_NAME
GITHUB_COMPANY_ACCOUNT_EMAIL
</code></pre></div></div><p>これは私たちが<code class="language-plaintext highlighter-rouge">.gitconfig</code>に設定した内容が反映された結果です。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>includeIf <span class="s2">"gitdir:~/PERSONAL/"</span><span class="o">]</span>
    path <span class="o">=</span> ~/.gitconfig-personal
</code></pre></div></div><h2 id="完了">完了</h2><p>これで1つのマシンで複数のGitHubアカウントを使う方法について説明しました。これにより、複数のGitHubアカウントを使いながら、プロジェクトを管理する際に便利になると思います。</p><p>また、<code class="language-plaintext highlighter-rouge">.gitconfig</code>を使って特定のフォルダで使うユーザを設定する方法についても説明しました。これにより、<code class="language-plaintext highlighter-rouge">Git</code>のユーザ情報を簡単に変更できるようになります。</p><p>皆さんも複数の<code class="language-plaintext highlighter-rouge">GitHub</code>アカウントを使う必要がある場合は、このブログ投稿を参考にして複数の<code class="language-plaintext highlighter-rouge">GitHub</code>アカウントを設定して使ってみてください。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="git"/><summary type="html"><![CDATA[1つのマシン(PC)で複数のGitHubアカウントを設定して使う方法について説明します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/git/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/git/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">プログラマーの学習法</title><link href="https://deku.posstree.com/essay/studying-way-for-programmer/" rel="alternate" type="text/html" title="プログラマーの学習法"/><published>2024-09-18T00:00:00+09:00</published><updated>2024-10-10T09:01:07+09:00</updated><id>https://deku.posstree.com/essay/studying-way-for-programmer-ja</id><content type="html" xml:base="https://deku.posstree.com/essay/studying-way-for-programmer/"><![CDATA[<p>次はプログラマーが新しい言語を学ぶ時、使えば良い学習方法です。</p><h2 id="何を作るか考えながらチュートリアルを読む">何を作るか考えながらチュートリアルを読む</h2><p>新しい言語のチュートリアルを読む時、具体的なプログラムを考えながら読んで、プログラムを書けると思ったら読むのを止めて、そのプログラムを書きます。現在読んでいるチュートリアルで書ける部分を完成すると、読むのを止めた所に戻って再度読みます。もちろん、書くプログラムの次の部分を考えながら読みます。</p><p>例えば、’タスクリストを作る’、’単語の数を数える’などといった具体的なプログラムを目標にしてチュートリアルを読みます。こうして目標を設定してチュートリアルを読むと、’この言語ではループはどう書くのか？’、’出力はどうするのか？’などといった質問を持ち、積極的に読むようになります。</p><p>この読み方を<code class="language-plaintext highlighter-rouge">積極的読み</code>と言います。積極的読みは具体的な質問や目的を持って読む方法を言います。教育学では受動的に読むより積極的に読む方が理解度や記憶力などに肯定的な効果を見せると言います。</p><h3 id="sq3r読書法">SQ3R読書法</h3><p>この積極的読み方の中で最も代表的な方法は<code class="language-plaintext highlighter-rouge">SQ3R(Survey, Question, Read, Recite, Review)読書法</code>です。SQ3Rはアメリカの教育心理学者ロビンソン(Francis P. Robinson)が効果的学習法(Effective Study, 1946)で初めて紹介した方法です。</p><p>SQ3R読書法は以下のような段階で進行されます。</p><ol><li>見渡す(Survey)</li></ol><p>見渡す(Surbey)とは本を読む前に本全体と各章の内容を全体的に素早く見渡し、主要概念の間の関係を把握することを言います。見渡すは以下のような方法で進行されます。</p><ul><li>学ぶ章(chapter)の大見出しを覚える。</li><li>その章の紹介、概要、学習目標などを素早く読む。</li><li>中見出しと小見出し、図表の見出しに注目する。</li><li>太字、斜体、下線部分など重要概念を示す手がかりを見つける。</li><li>章別要約を読む。</li><li>主要概念リストを見る。</li></ul><ol><li>質問する(Question)</li></ol><p>質問する(Qustion)とは見渡すを基に質問を投げることを言います。質問する方法は以下の通りです。</p><ul><li>タイトルに出てくる概念の定義に関する質問を投げる: ⚪︎⚪︎は何か?</li><li>概念の特性に関する質問を投げる: ⚪︎⚪︎の特性は何か?</li><li>概念同士の関係に関する質問を投げる: ⚪︎⚪︎と△△の関係は何か?</li><li>タイトルの表現を活用した質問を投げる: タイトル - ⚪︎⚪︎の必要性 → 質問 - ⚪︎⚪︎の必要性は何か?</li><li>自分の背景知識に関する質問を投げる: 私は⚪︎⚪︎についてどれくらい知っているか?</li></ul><p>質問するはこうして本を読みながら質問をすることです。こうして本を読みながら質問した内容を別途書き留めて学習中に確認することも良い方法です。</p><ol><li>読む(Read)</li></ol><p>読む(Read)とは1段階と2段階を基に本文を読みながら自分が投げた質問に対する答えを探していく過程を言います。質問に対する答えを探すために本を読むことで、本を読んだ後に内容を少し長く記憶できるようになります。これは試験対策においても内容をより正確に記憶するのに大きな助けになります。</p><ol><li>暗唱する(Recite)</li></ol><p>暗唱する(Recite)とは読んだ内容に対する忘却を防ぐための重要な過程です。暗唱するは自分が知っていると思うことを直接書き込むことで、自分が実際に内容をどれだけ理解しているかを確認する方法です。暗唱するは以下のような方法で進行されます。</p><ul><li>自分が読んだ内容を振り返る。</li><li>本を閉じて、その質問に対する答えを大声で朗読するか、紙に書く。</li><li>答えはできるだけ完全に書くようにし、理解を助けるために概要、図表、図式、式の形で書くこともある。</li><li>本や本を読みながら書いたノートと比較して、答えが正しいかどうかを確認する。</li></ul><ol><li>復習する(Review)</li></ol><p>復習する(Review)とは学習した内容を定期的にそして時折再度暗唱することを言います。復習するは特に試験対策において非常に効果的な方法です。復習するは以下のような方法で進行されます。</p><ul><li>本文とノートを再度読みながら重要な部分を確認する。</li><li>難しい部分は別途暗記カードを作るなどの方法を使って記憶する。</li><li>復習した内容をテストして、自分の理解度を確認する。</li><li>学んだ部分に関して自分なりの目次や概念マップを作る。</li></ul><h2 id="勉強する時に標準ライブラリのソースコードを読む">勉強する時に標準ライブラリのソースコードを読む</h2><p>良いコードを書くためには良いコードを読む必要があります。標準ライブラリは通常、その言語を発明した人やその言語のスタイルに従う人々が書きます。そのため標準ライブラリはその言語らしいコードで構成されており、このようなコードを通じてその言語の文化やスタイルを学ぶことができます。</p><p>このような文化やスタイルに従うことはプログラムの機能の違いはもたらさないかもしれませんが、プログラムの作成コストや保守コストを削減することができます。</p><h2 id="勉強中に他の人のコードに自分が必要な機能を追加する">勉強中に他の人のコードに自分が必要な機能を追加する</h2><p>自分が勉強している言語でのオープンソースに自分が必要な機能を追加してみます。実際に使用しているコードを変更してみることで、その言語をよく知っている人々からフィードバックを受けることができ、オープンソースコミュニティと交流することができます。</p><h2 id="専門性を効果的に引き出す専門家になる">専門性を効果的に引き出す専門家になる</h2><p>専門家から秘訣を受け継ぎ、その秘訣を実行してみます。周囲の専門家の専門性を引き出し、適用することが自分の専門性を早く高める方法です。専門家に秘訣を尋ねるときは<code class="language-plaintext highlighter-rouge">プログラミング言語を早く学ぶ秘訣は何ですか?</code>と尋ねると、あまり有用な答えを得ることができません。専門家はこのような質問を受けると一般的な答えをしたり、実際の行動と異なる理論的な答えをする傾向があります。</p><p>この場合、認知的作業分析を活用すると専門家の専門性を引き出すことができます。</p><ul><li><a href="https://deku.posstree.com/essay/cognitibe-task-analysis/" target="\_blank">認知的作業分析による専門家の専門性の引き出し</a></li></ul><p>認知的作業分析を活用することで専門家の秘訣を尋ねる時は<code class="language-plaintext highlighter-rouge">具体的な出来事について話すように促す</code>ことが重要です。最近学んだ言語が何か、その言語を学ぶために時間通りにした行動は何かなどを尋ねながら暗黙的な意思決定と状況判断が何かを把握することです。</p><p>何かをうまくしたいと思ったら、すでにうまくしている人を観察し、インタビューすることが大きな助けになります。</p><h2 id="完了">完了</h2><p>このブログポストでは、プログラマーができる学習方法について調べてみました。もし新しい言語を学んでいるか、プログラマーになるために努力している方がいる場合は、この記事を参考にして勉強してみてください。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="essay"/><summary type="html"><![CDATA[プログラマーが新しい言語を学ぶ時、できる学習方法には何があるかを調べてみましょう。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/essay/2024/studying-way-for-programmer/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/essay/2024/studying-way-for-programmer/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">認知的作業分析による専門家の専門性の引き出し</title><link href="https://deku.posstree.com/essay/cognitibe-task-analysis/" rel="alternate" type="text/html" title="認知的作業分析による専門家の専門性の引き出し"/><published>2024-09-17T00:00:00+09:00</published><updated>2024-10-04T20:24:08+09:00</updated><id>https://deku.posstree.com/essay/cognitibe-task-analysis-ja</id><content type="html" xml:base="https://deku.posstree.com/essay/cognitibe-task-analysis/"><![CDATA[<p>大体の専門家は自分の専門的なスキルを正しく説明できない場合が多いです。</p><blockquote><p>米陸軍では9年間に4千万ドルをかけて開発した地雷探知システムをキャンセルしようとしていました。プロトタイプを実際にテストした結果、地雷探知率が低すぎるためです。テストによると、低金属の対人地雷を96%も探知に失敗する惨めな結果を示しました。カーネギーメロン大学の心理学科教授スタシェフスキ(James Staszewski)は地雷探知においていわゆるアウトライア(平均をはるかに超える優れた人)を探しに行きました。その中の一人がフロイド・ロッキー・ロックウェル(Floyd Rocky Rockwell)でした。彼は新しい機器を持って低金属地雷を見つけることができました。しかし、フロイドは他のほとんどの専門家と同様に、自分がどのように地雷を見つけることができるか説明できませんでした。</p></blockquote><p>この時、<code class="language-plaintext highlighter-rouge">認知的作業分析(Cognitibe Task Analysis)</code>を使えば専門家から専門性を引き出すことが可能です。</p><blockquote><p>スタシェフスキ教授は数十年にわたって開発された認知的作業分析を使用して彼の専門性を引き出しました。フロイドはマニュアル通りに機器を使用しませんでした。彼は単に音に反応するのではなく、音のパターンを捉えていましたし、マニュアルで提案される速度よりも遅く進行し、マニュアルに書かれている高さよりも低い高さで探知器を使用し、継続的に探知器の感度スイッチを調整しました。スタシェフスキ教授はフロイド自身さえ気づいていなかったこの秘訣を他の兵士たちに5日間教え、その効果を測定する実験をしました。驚くべきことに、訓練前に10%台に留まっていた探知率が訓練後90%を超えるようになりました。</p></blockquote><p>このような認知的作業分析を使えばプログラマーや管理者だけでなく、いわゆる専門家になりたいすべての人にとって有用な方法です。米海軍の研究結果、教師と生徒がこの方法を学んで協力的に使うことが教育効果を高めることを発見しました。そのため、教育時にこの方法を使用するようにしています。</p><h2 id="認知的作業分析">認知的作業分析</h2><p>認知的作業分析は専門家や熟練者が行う複雑な認知的プロセスを分析し説明する方法です。特に、問題解決、意思決定、記憶、推論など認知的側面が重要な作業で使用されます。この分析方法は専門家が情報をどのように処理し、どのように意思決定を下すかを体系的に把握することに焦点を当てています。</p><p>認知的作業分析は主に次のような状況で有用に活用されます。</p><ul><li>教育およびトレーニングプログラムの開発: 専門家が作業を行う方法を分析し、初心者やトレーニー向けの効果的な教育プログラムを設計することができます。例えば、医学、航空、軍事分野では専門家が使用する認知戦略を学習者に伝達するために認知的作業分析を活用します。</li><li>技術およびシステム設計: 認知的作業分析は人間-コンピュータ相互作用(HCI)やヒューマンセンタードデザイン(Human-Centered Design)で使用されることがあります。複雑なシステムを設計する際に専門家が使用する認知的プロセスに合わせてユーザーインターフェースや自動化システムを設計するのに役立ちます。</li><li>業務プロセスの改善: 専門家が使用する認知的戦略を分析することで、業務プロセスを改善または最適化することができます。これにより、効率性を高め、エラーを減らすことができます。</li></ul><p>認知的作業分析を行うためには、次のような手順を踏みます。</p><ul><li>プロセスの定義: 作業の目標と必要な認知的プロセスを定義します。</li><li>作業の分解: 作業を小さなステップに分割し、各ステップで必要な認知的プロセスを具体的に分析します。</li><li>専門家インタビューおよび観察: 専門家が実際に作業を行う方法をインタビューや観察を通じて収集します。</li><li>認知的要求分析: 情報を処理する方法、注意集中戦略、記憶戦略などを分析します。</li><li>結果の適用: 分析結果を教育プログラム、技術設計、業務手順の改善などに反映します。</li></ul><p>認知的作業分析は複雑な作業で専門家が使用する無意識的で暗黙的な認知プロセスを明確にするツールとして、学習と設計、システム最適化に重要な役割を果たします。</p><h2 id="認知的作業分析のプロセス">認知的作業分析のプロセス</h2><p>認知的作業分析を行うプロセスをもう少し詳しく見ると次のようになります。</p><h3 id="1-目標設定">1. 目標設定</h3><p>認知的作業分析を行う理由と目標を明確に設定する段階です。認知的作業分析は主に複雑で認知的な側面が多く必要な作業を分析する際に使われるため、どの作業を分析するか、そしてこの分析が教育、システム設計、業務改善などでどのように役立つかをまず明確にする必要があります。</p><h3 id="2-作業定義および分析">2. 作業定義および分析</h3><p>作業を詳細に定義し、分析する段階です。ここでは次の手順に従います。</p><ul><li>作業選定: 分析する作業(または業務)を選定します。複雑で認知的な処理が多く必要な作業が適しています。</li><li>作業分解: 全体の作業を細かいステップに分割します。各ステップで専門家が行う行動を特定し、どの認知的プロセス(決定、記憶、推論など)が使われるかを確認します。</li></ul><h3 id="3-専門家インタビューおよび観察">3. 専門家インタビューおよび観察</h3><p>専門家が実際に作業を行う方法を観察またはインタビューする段階です。作業を行う際に発生する暗黙の知識や認知的プロセスをよりよく把握することができます。一般的に次のような方法が使われます。</p><ul><li>深層インタビュー: 専門家に具体的な作業段階と意思決定プロセスを説明させ、彼らが使用する思考戦略を把握します。</li><li>思考音声法: 専門家が作業を行う際に自分が何を考えているかを話すように促し、認知的プロセスを外部に露出させます。</li><li>作業観察: 専門家が作業を行う様子を直接観察して記録します。これにより作業の流れと認知的要求を明確にすることができます。</li></ul><h3 id="4-認知的要求分析">4. 認知的要求分析</h3><p>専門家が使用する認知的プロセスでどの要素が重要かを分析します。ここでは作業を行う際に必要な情報処理、意思決定、問題解決戦略、注意集中方法などを明確に把握します。</p><ul><li>情報処理戦略: 専門家がどの情報をどのように処理するかを分析します。</li><li>意思決定プロセス: 専門家がどのように意思決定を下し、どの基準を使用するかを把握します。</li><li>問題解決戦略: 予期しない問題をどのように解決するかを分析します。</li></ul><h3 id="5-作業モデリング">5. 作業モデリング</h3><p>収集したデータをもとに専門家の認知的プロセウと行動を説明するモデルを作成します。この段階では作業を段階的に説明し、各段階で発生する認知的要求を具体化します。これにより専門家が使用する無意識的な技術と知識を明文化することができます。</p><h3 id="6-結果の適用">6. 結果の適用</h3><p>分析結果を実際の業務プロセス改善、システム設計、教育プログラム開発などに適用する段階です。分析された認知的プロセスを基に初心者がより速く熟練するための教育資料を作成したり、システム設計でユーザーインターフェースを改善するのに活用することができます。</p><h3 id="7-検証およびフィードバック">7. 検証およびフィードバック</h3><p>最後は、認知的作業分析結果が実際に有用であるかを検証し、フィードバックを受けて改善する段階です。認知的作業分析を通じて導出された分析が教育やシステム改善に効果的に適用されたかを評価し、必要に応じて再分析や補完を行うことができます。</p><h2 id="まとめ">まとめ</h2><p>このように認知的作業分析は専門家が使用する認知的戦略を明確にし、これを教育、システム設計、業務プロセス改善などに適用するのに役立つ方法です。特に、複雑で認知的要求が多い作業で専門家の無意識的な知識と技術を明文化し、これを他の人に伝達するのに活用することができます。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="essay"/><summary type="html"><![CDATA[認知的作業分析を使って専門家から専門性を引き出す方法について見ていきましょう。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/essay/2024/cognitibe-task-analysis/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/essay/2024/cognitibe-task-analysis/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">[Flutter] httpパッケージのMultipartRequestでファイルをアップロードする</title><link href="https://deku.posstree.com/flutter/http_multipartrequest/" rel="alternate" type="text/html" title="[Flutter] httpパッケージのMultipartRequestでファイルをアップロードする"/><published>2024-09-17T00:00:00+09:00</published><updated>2024-10-06T11:17:37+09:00</updated><id>https://deku.posstree.com/flutter/http-multipartrequest-ja</id><content type="html" xml:base="https://deku.posstree.com/flutter/http_multipartrequest/"><![CDATA[<div id="contents_list"><h2 id="section">目次</h2><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次</a></li><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#multipartrequest%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B">MultipartRequestでファイルをアップロードする</a></li><li><a href="#%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89">テストコード</a></li><li><a href="#%E5%AE%8C%E4%BA%86">完了</a></li></ul></div><h2 id="概要">概要</h2><p>Flutterでhttpパッケージを使ってファイルをアップロードする必要がある場合があります。この場合、httpパッケージの<code class="language-plaintext highlighter-rouge">MultipartRequest</code>を使うとファイルをアップロードできます。このブログポストでは、<code class="language-plaintext highlighter-rouge">MultipartRequest</code>を使ってファイルをアップロードする方法と、それをテストする方法について説明します。</p><h2 id="multipartrequestでファイルをアップロードする">MultipartRequestでファイルをアップロードする</h2><p>次は実際にhttpパッケージの<code class="language-plaintext highlighter-rouge">MultipartRequest</code>を使ってファイルをアップロードする例です。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ExampleAPI</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">token</span><span class="p">;</span>
  <span class="kd">final</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span> <span class="n">httpClient</span><span class="p">;</span>

  <span class="n">ExampleAPI</span><span class="p">({</span>
    <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">token</span><span class="p">,</span>
    <span class="nd">@visibleForTesting</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="o">?</span> <span class="n">mockClient</span><span class="p">,</span>
  <span class="p">})</span> <span class="o">:</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="n">mockClient</span> <span class="o">??</span>
            <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">(</span>
              <span class="s">"POST"</span><span class="p">,</span>
              <span class="kt">Uri</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'</span><span class="si">${ENV.apiServer}</span><span class="s">/api/app'</span><span class="p">),</span>
            <span class="p">);</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="n">InfoData</span><span class="p">&gt;</span> <span class="n">sendData</span><span class="p">({</span>
    <span class="kd">required</span> <span class="n">DateTime</span> <span class="n">date</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">int</span> <span class="n">status</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">int</span> <span class="n">docType</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">note</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">passportImage</span><span class="p">,</span>
    <span class="kt">String</span><span class="o">?</span> <span class="n">certificationImage</span><span class="p">,</span>
    <span class="kt">List</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">&gt;</span><span class="o">?</span> <span class="n">receiptImages</span><span class="p">,</span>
  <span class="p">})</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="n">data</span><span class="p">[</span><span class="s">'date'</span><span class="p">]</span> <span class="o">=</span> <span class="n">dateFormatForSearch</span><span class="p">(</span><span class="n">date</span><span class="p">);</span>
    <span class="n">data</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="si">$status</span><span class="s">'</span><span class="p">;</span>
    <span class="n">data</span><span class="p">[</span><span class="s">'doc_type'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="si">$docType</span><span class="s">'</span><span class="p">;</span>
    <span class="n">data</span><span class="p">[</span><span class="s">'note'</span><span class="p">]</span> <span class="o">=</span> <span class="n">note</span><span class="p">;</span>

    <span class="kt">List</span><span class="p">&lt;</span><span class="n">MultipartFile</span><span class="p">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'passport_image'</span><span class="p">,</span> <span class="n">passportImage</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">jpnCertImg</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">jpnCertImg</span> <span class="o">!=</span> <span class="s">''</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'cert_img'</span><span class="p">,</span> <span class="n">certificationImage</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">receiptImages</span><span class="o">?.</span><span class="na">isNotEmpty</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="n">image</span> <span class="k">in</span> <span class="n">receiptImages</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">image</span> <span class="o">==</span> <span class="s">''</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
        <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'receipt_img[]'</span><span class="p">,</span> <span class="n">image</span><span class="p">));</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">httpClient</span><span class="o">.</span><span class="na">headers</span><span class="o">.</span><span class="na">addAll</span><span class="p">({</span><span class="s">'Authorization'</span><span class="o">:</span> <span class="s">'Bearer </span><span class="si">$token</span><span class="s">'</span><span class="p">});</span>
    <span class="n">httpClient</span><span class="o">.</span><span class="na">fields</span><span class="o">.</span><span class="na">addAll</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
    <span class="n">httpClient</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">addAll</span><span class="p">(</span><span class="n">files</span><span class="p">);</span>

    <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="k">await</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">send</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">Response</span><span class="o">.</span><span class="na">fromStream</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span><span class="o">.</span><span class="na">then</span><span class="p">((</span><span class="n">response</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">final</span> <span class="n">data</span> <span class="o">=</span> <span class="n">jsonDecode</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">decode</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="na">bodyBytes</span><span class="p">));</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'success'</span><span class="p">]</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">InfoData</span><span class="o">.</span><span class="na">fromJson</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'data'</span><span class="p">]);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">'Unknown response'</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div><p>httpパッケージの<code class="language-plaintext highlighter-rouge">MultipartRequest</code>を使ってファイルをアップロードする部分をもう少し詳しく見ていきます。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ExampleAPI</span><span class="p">({</span>
  <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">token</span><span class="p">,</span>
  <span class="nd">@visibleForTesting</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="o">?</span> <span class="n">mockClient</span><span class="p">,</span>
<span class="p">})</span> <span class="o">:</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="n">mockClient</span> <span class="o">??</span>
          <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">(</span>
            <span class="s">"POST"</span><span class="p">,</span>
            <span class="kt">Uri</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'</span><span class="si">${ENV.apiServer}</span><span class="s">/api/app'</span><span class="p">),</span>
          <span class="p">);</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">MultiPartRequest</code>でファイルをアップロードするには、まず<code class="language-plaintext highlighter-rouge">http.MultipartRequest</code>のインスタンスを作成する必要があります。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="p">{};</span>
<span class="n">data</span><span class="p">[</span><span class="s">'date'</span><span class="p">]</span> <span class="o">=</span> <span class="n">dateFormatForSearch</span><span class="p">(</span><span class="n">date</span><span class="p">);</span>
<span class="n">data</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="si">$status</span><span class="s">'</span><span class="p">;</span>
<span class="n">data</span><span class="p">[</span><span class="s">'doc_type'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="si">$docType</span><span class="s">'</span><span class="p">;</span>
<span class="n">data</span><span class="p">[</span><span class="s">'note'</span><span class="p">]</span> <span class="o">=</span> <span class="n">note</span><span class="p">;</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">MultipartRequest</code>はファイル以外にも他の情報を一緒に送信できます。そのため、一緒に送信する他の情報を準備しました。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">List</span><span class="p">&lt;</span><span class="n">MultipartFile</span><span class="p">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="p">[];</span>
<span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'passport_image'</span><span class="p">,</span> <span class="n">passportImage</span><span class="p">));</span>
<span class="k">if</span> <span class="p">(</span><span class="n">jpnCertImg</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">jpnCertImg</span> <span class="o">!=</span> <span class="s">''</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'cert_img'</span><span class="p">,</span> <span class="n">certificationImage</span><span class="p">));</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="n">receiptImages</span><span class="o">?.</span><span class="na">isNotEmpty</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="n">image</span> <span class="k">in</span> <span class="n">receiptImages</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">image</span> <span class="o">==</span> <span class="s">''</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
    <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'receipt_img[]'</span><span class="p">,</span> <span class="n">image</span><span class="p">));</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div><p>ファイルを設定する関数はアップロードしたいファイルのパスを受け取ります。受け取ったファイルのパスを<code class="language-plaintext highlighter-rouge">http.MultipartFile.fromPath</code>を使って<code class="language-plaintext highlighter-rouge">MultipartFile</code>に変換します。</p><p>複数のファイルをアップロードする場合は、<code class="language-plaintext highlighter-rouge">receipt_img[]</code>のように<code class="language-plaintext highlighter-rouge">[]</code>を使って配列で渡すことができます。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">httpClient</span><span class="o">.</span><span class="na">headers</span><span class="o">.</span><span class="na">addAll</span><span class="p">({</span><span class="s">'Authorization'</span><span class="o">:</span> <span class="s">'Bearer </span><span class="si">$token</span><span class="s">'</span><span class="p">});</span>
<span class="n">httpClient</span><span class="o">.</span><span class="na">fields</span><span class="o">.</span><span class="na">addAll</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
<span class="n">httpClient</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">addAll</span><span class="p">(</span><span class="n">files</span><span class="p">);</span>
</code></pre></div></div><p>次はファイルをアップロードするために<code class="language-plaintext highlighter-rouge">Bearer</code>トークンをヘッダーに設定し、準備したデータを<code class="language-plaintext highlighter-rouge">fields</code>に追加します。準備したファイルは<code class="language-plaintext highlighter-rouge">files</code>に追加します。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="k">await</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">send</span><span class="p">();</span>
<span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">Response</span><span class="o">.</span><span class="na">fromStream</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span><span class="o">.</span><span class="na">then</span><span class="p">((</span><span class="n">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">data</span> <span class="o">=</span> <span class="n">jsonDecode</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">decode</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="na">bodyBytes</span><span class="p">));</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'success'</span><span class="p">]</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">InfoData</span><span class="o">.</span><span class="na">fromJson</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'data'</span><span class="p">]);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">'Unknown response'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div><p>最後はデータを送信し、レスポンスを受け取ります。受け取ったレスポンスをアプリに合わせて処理すれば完了です。</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="テストコード">テストコード</h2><p><code class="language-plaintext highlighter-rouge">http</code>パッケージの<code class="language-plaintext highlighter-rouge">MultipartRequest</code>を使ってファイルをアップロードする関数をテストする方法について説明します。</p><p>まず、すべてのテストコードは次のようになります。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nd">@GenerateMocks</span><span class="p">([</span><span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">])</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">mockHttpMultipartRequest</span> <span class="o">=</span> <span class="n">CustomMockMultipartRequest</span><span class="p">();</span>
  <span class="n">setUp</span><span class="p">(()</span> <span class="p">{</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">headers</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">fields</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">when</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">send</span><span class="p">())</span><span class="o">.</span><span class="na">thenAnswer</span><span class="p">(</span>
      <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="kd">final</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">jsonEncode</span><span class="p">({</span>
          <span class="s">'success'</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
          <span class="s">'data'</span><span class="o">:</span> <span class="p">{</span>
            <span class="s">'amount'</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
            <span class="s">'commission'</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
          <span class="p">}</span>
        <span class="p">});</span>
        <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">value</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">encode</span><span class="p">(</span><span class="n">responseBody</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">StreamedResponse</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>
  <span class="p">});</span>

  <span class="n">test</span><span class="p">(</span><span class="s">'Success'</span><span class="p">,</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">TaxRefundAPI</span><span class="p">(</span>
      <span class="nl">token:</span> <span class="s">'test_token'</span><span class="p">,</span>
      <span class="nl">client:</span> <span class="n">mockHttpMultipartRequest</span><span class="p">,</span>
    <span class="p">)</span><span class="o">.</span><span class="na">sendData</span><span class="p">(</span>
      <span class="nl">permitDate:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'2022-01-01 01:04'</span><span class="p">),</span>
      <span class="nl">status:</span> <span class="mi">91</span><span class="p">,</span>
      <span class="nl">docType:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="nl">note:</span> <span class="s">''</span><span class="p">,</span>
      <span class="nl">passportImg:</span> <span class="s">'assets/images/passport_sample.jpg'</span><span class="p">,</span>
      <span class="nl">certificationImage:</span> <span class="s">'assets/images/placeholder.png'</span><span class="p">,</span>
      <span class="nl">receiptImages:</span> <span class="p">[</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
      <span class="p">],</span>
    <span class="p">);</span>

    <span class="c1">// Request parameters</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">headers</span><span class="p">,</span>
      <span class="p">{</span><span class="s">'Authorization'</span><span class="o">:</span> <span class="s">'Bearer test_token'</span><span class="p">},</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">fields</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="s">'date'</span><span class="o">:</span> <span class="s">'2022-01-01'</span><span class="p">,</span>
        <span class="s">'status'</span><span class="o">:</span> <span class="s">'91'</span><span class="p">,</span>
        <span class="s">'doc_type'</span><span class="o">:</span> <span class="s">'2'</span><span class="p">,</span>
        <span class="s">'note'</span><span class="o">:</span> <span class="s">''</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">length</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'passport_image'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span> <span class="s">'passport_sample.jpg'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'cert_img'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span> <span class="s">'placeholder.png'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>

    <span class="c1">// Response</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">isA</span><span class="p">&lt;</span><span class="n">InfoData</span><span class="p">&gt;());</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="na">toMap</span><span class="p">(),</span> <span class="p">{</span>
      <span class="s">'amount'</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
      <span class="s">'commission'</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
    <span class="p">});</span>
  <span class="p">});</span>

  <span class="n">test</span><span class="p">(</span><span class="s">'Throw error when response is failed'</span><span class="p">,</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">when</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">send</span><span class="p">())</span><span class="o">.</span><span class="na">thenAnswer</span><span class="p">(</span>
      <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="kd">final</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">jsonEncode</span><span class="p">({</span>
          <span class="s">'success'</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="p">});</span>
        <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">value</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">encode</span><span class="p">(</span><span class="n">responseBody</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">StreamedResponse</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>

    <span class="k">try</span> <span class="p">{</span>
      <span class="k">await</span> <span class="n">TaxRefundAPI</span><span class="p">(</span>
        <span class="nl">token:</span> <span class="s">'test_token'</span><span class="p">,</span>
        <span class="nl">client:</span> <span class="n">mockHttpMultipartRequest</span><span class="p">,</span>
      <span class="p">)</span><span class="o">.</span><span class="na">sendData</span><span class="p">(</span>
        <span class="nl">permitDate:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'2022-01-01 01:04'</span><span class="p">),</span>
        <span class="nl">status:</span> <span class="mi">91</span><span class="p">,</span>
        <span class="nl">docType:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nl">note:</span> <span class="s">''</span><span class="p">,</span>
        <span class="nl">passportImg:</span> <span class="s">'assets/images/passport_sample.jpg'</span><span class="p">,</span>
        <span class="nl">certificationImage:</span> <span class="s">'assets/images/placeholder.png'</span><span class="p">,</span>
        <span class="nl">receiptImages:</span> <span class="p">[</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="p">],</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="p">(),</span> <span class="s">'Exception: Unknown response'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">CustomMockMultipartRequest</span> <span class="kd">extends</span> <span class="n">MockMultipartRequest</span> <span class="p">{</span>
  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">List</span><span class="p">&lt;</span><span class="n">MultipartFile</span><span class="p">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="p">[];</span>
<span class="p">}</span>
</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><p>もっと詳しく見ていきましょう。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nd">@GenerateMocks</span><span class="p">([</span><span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">])</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">mockHttpMultipartRequest</span> <span class="o">=</span> <span class="n">CustomMockMultipartRequest</span><span class="p">();</span>
  <span class="n">setUp</span><span class="p">(()</span> <span class="p">{</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">headers</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">fields</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">when</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">send</span><span class="p">())</span><span class="o">.</span><span class="na">thenAnswer</span><span class="p">(</span>
      <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="kd">final</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">jsonEncode</span><span class="p">({</span>
          <span class="s">'success'</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
          <span class="s">'data'</span><span class="o">:</span> <span class="p">{</span>
            <span class="s">'amount'</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
            <span class="s">'commission'</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
          <span class="p">}</span>
        <span class="p">});</span>
        <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">value</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">encode</span><span class="p">(</span><span class="n">responseBody</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">StreamedResponse</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>
  <span class="p">});</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">CustomMockMultipartRequest</span> <span class="kd">extends</span> <span class="n">MockMultipartRequest</span> <span class="p">{</span>
  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">List</span><span class="p">&lt;</span><span class="n">MultipartFile</span><span class="p">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="p">[];</span>
<span class="p">}</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">DI(Dependency Injection)</code>を使っているため、テスト用の<code class="language-plaintext highlighter-rouge">Mock</code>オブジェクトを作成し、<code class="language-plaintext highlighter-rouge">setUp</code>関数を使って<code class="language-plaintext highlighter-rouge">Mock</code>オブジェクトを初期化しました。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nd">@GenerateMocks</span><span class="p">([</span><span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">])</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">mockHttpMultipartRequest</span> <span class="o">=</span> <span class="n">CustomMockMultipartRequest</span><span class="p">();</span>
  <span class="p">...</span>
  <span class="n">test</span><span class="p">(</span><span class="s">'Success'</span><span class="p">,</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">TaxRefundAPI</span><span class="p">(</span>
      <span class="nl">token:</span> <span class="s">'test_token'</span><span class="p">,</span>
      <span class="nl">client:</span> <span class="n">mockHttpMultipartRequest</span><span class="p">,</span>
    <span class="p">)</span><span class="o">.</span><span class="na">sendData</span><span class="p">(</span>
      <span class="nl">permitDate:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'2022-01-01 01:04'</span><span class="p">),</span>
      <span class="nl">status:</span> <span class="mi">91</span><span class="p">,</span>
      <span class="nl">docType:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="nl">note:</span> <span class="s">''</span><span class="p">,</span>
      <span class="nl">passportImg:</span> <span class="s">'assets/images/passport_sample.jpg'</span><span class="p">,</span>
      <span class="nl">certificationImage:</span> <span class="s">'assets/images/placeholder.png'</span><span class="p">,</span>
      <span class="nl">receiptImages:</span> <span class="p">[</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
      <span class="p">],</span>
    <span class="p">);</span>

    <span class="c1">// Request parameters</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">headers</span><span class="p">,</span>
      <span class="p">{</span><span class="s">'Authorization'</span><span class="o">:</span> <span class="s">'Bearer test_token'</span><span class="p">},</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">fields</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="s">'date'</span><span class="o">:</span> <span class="s">'2022-01-01'</span><span class="p">,</span>
        <span class="s">'status'</span><span class="o">:</span> <span class="s">'91'</span><span class="p">,</span>
        <span class="s">'doc_type'</span><span class="o">:</span> <span class="s">'2'</span><span class="p">,</span>
        <span class="s">'note'</span><span class="o">:</span> <span class="s">''</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">length</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'passport_image'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span> <span class="s">'passport_sample.jpg'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'cert_img'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span> <span class="s">'placeholder.png'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>

    <span class="c1">// Response</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">isA</span><span class="p">&lt;</span><span class="n">InfoData</span><span class="p">&gt;());</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="na">toMap</span><span class="p">(),</span> <span class="p">{</span>
      <span class="s">'amount'</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
      <span class="s">'commission'</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
    <span class="p">});</span>
  <span class="p">});</span>
  <span class="p">...</span>
<span class="p">}</span>
<span class="p">...</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">setUp</code>関数で事前に設定した<code class="language-plaintext highlighter-rouge">Mock</code>オブジェクトを使って、リクエストが成功した場合をテストしました。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nd">@GenerateMocks</span><span class="p">([</span><span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">])</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">mockHttpMultipartRequest</span> <span class="o">=</span> <span class="n">CustomMockMultipartRequest</span><span class="p">();</span>
  <span class="p">...</span>
  <span class="n">test</span><span class="p">(</span><span class="s">'Throw error when response is failed'</span><span class="p">,</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">when</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">send</span><span class="p">())</span><span class="o">.</span><span class="na">thenAnswer</span><span class="p">(</span>
      <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="kd">final</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">jsonEncode</span><span class="p">({</span>
          <span class="s">'success'</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="p">});</span>
        <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">value</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">encode</span><span class="p">(</span><span class="n">responseBody</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">StreamedResponse</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>

    <span class="k">try</span> <span class="p">{</span>
      <span class="k">await</span> <span class="n">TaxRefundAPI</span><span class="p">(</span>
        <span class="nl">token:</span> <span class="s">'test_token'</span><span class="p">,</span>
        <span class="nl">client:</span> <span class="n">mockHttpMultipartRequest</span><span class="p">,</span>
      <span class="p">)</span><span class="o">.</span><span class="na">sendData</span><span class="p">(</span>
        <span class="nl">permitDate:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'2022-01-01 01:04'</span><span class="p">),</span>
        <span class="nl">status:</span> <span class="mi">91</span><span class="p">,</span>
        <span class="nl">docType:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nl">note:</span> <span class="s">''</span><span class="p">,</span>
        <span class="nl">passportImg:</span> <span class="s">'assets/images/passport_sample.jpg'</span><span class="p">,</span>
        <span class="nl">certificationImage:</span> <span class="s">'assets/images/placeholder.png'</span><span class="p">,</span>
        <span class="nl">receiptImages:</span> <span class="p">[</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="p">],</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="p">(),</span> <span class="s">'Exception: Unknown response'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>
<span class="p">...</span>
</code></pre></div></div><p>最後は、レスポンスが失敗した場合をテストしました。</p><h2 id="完了">完了</h2><p>これで、Flutterでhttpパッケージの<code class="language-plaintext highlighter-rouge">MultipartRequest</code>を使ってファイルをアップロードする方法と、それをテストする方法について説明しました。</p><p>Flutterでファイルをアップロードする機能を実装する場合は、このブログを参考にして実装し、テストコードを書いてみてください。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="flutter"/><summary type="html"><![CDATA[FlutterでhttpパッケージのMultipartRequestを使ってファイルをアップロードする方法と、それをテストする方法について説明します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/flutter/background.png"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/flutter/background.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">[GitHub Actions] GitHub Actions を手動で実行する</title><link href="https://deku.posstree.com/github_actions/execute-github-actions-manually/" rel="alternate" type="text/html" title="[GitHub Actions] GitHub Actions を手動で実行する"/><published>2024-09-13T00:00:00+09:00</published><updated>2024-09-16T16:56:41+09:00</updated><id>https://deku.posstree.com/github_actions/execute-github-actions-manually-ja</id><content type="html" xml:base="https://deku.posstree.com/github_actions/execute-github-actions-manually/"><![CDATA[<div id="contents_list"><h2 id="section">目次</h2><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次</a></li><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#workflow_dispatch">workflow_dispatch</a></li><li><a href="#inputs-%E3%82%BF%E3%82%A4%E3%83%97">inputs タイプ</a></li><li><a href="#%E4%BE%8B%E9%A1%8C">例題</a><ul><li><a href="#boolean">boolean</a></li><li><a href="#choice">choice</a></li><li><a href="#number">number</a></li><li><a href="#string">string</a></li><li><a href="#environment">environment</a></li></ul></li><li><a href="#%E5%AE%8C%E4%BA%86">完了</a></li></ul></div><h2 id="概要">概要</h2><p>GitHub Actions を使ってると、手動で GitHub Actions を実行する必要がある場合があります。このブログポストでは、GitHub Actions を手動で実行する方法について説明します。</p><h2 id="workflow_dispatch">workflow_dispatch</h2><p><code class="language-plaintext highlighter-rouge">GitHub Actions</code>を手動で実行するには、<code class="language-plaintext highlighter-rouge">workflow_dispatch</code>を使う必要があります。</p><ul><li>公式ドキュメント: <a href="https://docs.github.com/ko/actions/writing-workflows/workflow-syntax-for-github-actions#onworkflow_dispatch" rel="nofollow noreferrer" target="_blank">https://docs.github.com/ko/actions/writing-workflows/workflow-syntax-for-github-actions#onworkflow_dispatch</a></li></ul><p>この場合、<code class="language-plaintext highlighter-rouge">workflow_dispatch</code>の <code class="language-plaintext highlighter-rouge">inputs</code>を使ってパラメータを渡すことができます。</p><p><code class="language-plaintext highlighter-rouge">workflow_dispatch</code>は次のように設定できます。</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
</code></pre></div></div><h2 id="inputs-タイプ">inputs タイプ</h2><p><code class="language-plaintext highlighter-rouge">workflow_dispatch</code>の <code class="language-plaintext highlighter-rouge">inputs</code>には次のような種類があります。</p><ul><li><code class="language-plaintext highlighter-rouge">boolean</code>: true または false</li><li><code class="language-plaintext highlighter-rouge">choice</code>: 事前に指定されたオプションの中から選択できる SelectBox</li><li><code class="language-plaintext highlighter-rouge">number</code>: 数字</li><li><code class="language-plaintext highlighter-rouge">string</code>: 文字列</li><li><code class="language-plaintext highlighter-rouge">environment</code>: GitHub に設定された環境変数を使用</li></ul><p>公式ドキュメントでも使える <code class="language-plaintext highlighter-rouge">inputs</code> タイプを確認することができます。</p><ul><li>公式ドキュメント: <a href="https://docs.github.com/ko/actions/writing-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputsinput_idtype" rel="nofollow noreferrer" target="_blank">https://docs.github.com/ko/actions/writing-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputsinput_idtype</a></li></ul><p><code class="language-plaintext highlighter-rouge">workflow_dispatch</code>の <code class="language-plaintext highlighter-rouge">inputs</code>は次のように設定できます。</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_boolean</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">boolean</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="no">false</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">boolean</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">inputs</code>は <code class="language-plaintext highlighter-rouge">type</code> 以外にも <code class="language-plaintext highlighter-rouge">description</code>, <code class="language-plaintext highlighter-rouge">required</code>, <code class="language-plaintext highlighter-rouge">default</code> を設定することができます。<code class="language-plaintext highlighter-rouge">type</code> 以外はすべて任意です。</p><h2 id="例題">例題</h2><p>それでは <code class="language-plaintext highlighter-rouge">workflow_dispatch</code>を使って GitHub Actions を手動で実行する例を見ていきましょう。</p><h3 id="boolean">boolean</h3><p>手動で実行する GitHub Actions を作成するために <code class="language-plaintext highlighter-rouge">.github/workflows/manual_test.yml</code> ファイルを作成し、次のように修正します。</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_boolean</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">boolean</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="no">false</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">boolean</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy-to-staging</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print the input</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>
</code></pre></div></div><p>このように作成したファイルを commit して push した後、<code class="language-plaintext highlighter-rouge">GitHub</code> の <code class="language-plaintext highlighter-rouge">Actions</code> タブに移動すると、次のような画面を確認できます。</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input.png" alt="Execute GitHub Actions manually - Boolean input"/></picture><p>右側に表示された <code class="language-plaintext highlighter-rouge">Run workflow</code> をクリックすると、設定した <code class="language-plaintext highlighter-rouge">boolean</code> タイプの <code class="language-plaintext highlighter-rouge">inputs</code> を確認できます。これを実行すると次のような結果を得ることができます。</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input_result.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input_result.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input_result.png" alt="Execute GitHub Actions manually - Boolean input result"/></picture><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h3 id="choice">choice</h3><p>手動で実行する GitHub Actions を作成するために <code class="language-plaintext highlighter-rouge">.github/workflows/manual_test.yml</code> ファイルを作成し、次のように修正します。</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_choice</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">choice</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="s1">'</span><span class="s">warning'</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">choice</span>
        <span class="na">options</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s">info</span>
          <span class="pi">-</span> <span class="s">warning</span>
          <span class="pi">-</span> <span class="s">debug</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy-to-staging</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print the input</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>
</code></pre></div></div><p>このように作成したファイルを commit して push した後、<code class="language-plaintext highlighter-rouge">GitHub</code> の <code class="language-plaintext highlighter-rouge">Actions</code> タブに移動すると、次のような画面を確認できます。</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/choice_input.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/choice_input.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/choice_input.png" alt="Execute GitHub Actions manually - Choice input"/></picture><p>右側に表示された <code class="language-plaintext highlighter-rouge">Run workflow</code> をクリックすると、設定した <code class="language-plaintext highlighter-rouge">choice</code> タイプの <code class="language-plaintext highlighter-rouge">inputs</code> を確認できます。これを実行すると次のような結果を得ることができます。</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/choice_input_result.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/choice_input_result.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/choice_input_result.png" alt="Execute GitHub Actions manually - Choice input result"/></picture><h3 id="number">number</h3><p>手動で実行する GitHub Actions を作成するために <code class="language-plaintext highlighter-rouge">.github/workflows/manual_test.yml</code> ファイルを作成し、次のように修正します。</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_number</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">number</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="m">20</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">number</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy-to-staging</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print the input</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>
</code></pre></div></div><p>このように作成したファイルを commit して push した後、<code class="language-plaintext highlighter-rouge">GitHub</code> の <code class="language-plaintext highlighter-rouge">Actions</code> タブに移動すると、次のような画面を確認できます。</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/number_input.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/number_input.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/number_input.png" alt="Execute GitHub Actions manually - Number input"/></picture><p>右側に表示された <code class="language-plaintext highlighter-rouge">Run workflow</code> をクリックすると、設定した <code class="language-plaintext highlighter-rouge">number</code> タイプの <code class="language-plaintext highlighter-rouge">inputs</code> を確認できます。これを実行すると次のような結果を得ることができます。</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/number_input_result.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/number_input_result.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/number_input_result.png" alt="Execute GitHub Actions manually - Number input result"/></picture><h3 id="string">string</h3><p>手動で実行する GitHub Actions を作成するために <code class="language-plaintext highlighter-rouge">.github/workflows/manual_test.yml</code> ファイルを作成し、次のように修正します。</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_string</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">string</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Hello,</span><span class="nv"> </span><span class="s">World!'</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy-to-staging</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print the input</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>
</code></pre></div></div><p>このように作成したファイルを commit して push した後、<code class="language-plaintext highlighter-rouge">GitHub</code> の <code class="language-plaintext highlighter-rouge">Actions</code> タブに移動すると、次のような画面を確認できます。</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/string_input.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/string_input.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/string_input.png" alt="Execute GitHub Actions manually - String input"/></picture><p>右側に表示された <code class="language-plaintext highlighter-rouge">Run workflow</code> をクリックすると、設定した <code class="language-plaintext highlighter-rouge">string</code> タイプの <code class="language-plaintext highlighter-rouge">inputs</code> を確認できます。これを実行すると次のような結果を得ることができます。</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/string_input_result.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/string_input_result.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/string_input_result.png" alt="Execute GitHub Actions manually - String input result"/></picture><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h3 id="environment">environment</h3><p><code class="language-plaintext highlighter-rouge">workflow_dispatch</code>の <code class="language-plaintext highlighter-rouge">environment</code> タイプを使用するには、<code class="language-plaintext highlighter-rouge">GitHub</code> の <code class="language-plaintext highlighter-rouge">Settings</code> で <code class="language-plaintext highlighter-rouge">Environment</code> を設定する必要があります。</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environments.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environments.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/environments.png" alt="Execute GitHub Actions manually - Environments"/></picture><p><code class="language-plaintext highlighter-rouge">New environment</code> をクリックして、次のように <code class="language-plaintext highlighter-rouge">Name</code> に <code class="language-plaintext highlighter-rouge">dev</code> を入力してから、<code class="language-plaintext highlighter-rouge">Configure environment</code> をクリックします。</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment.png" alt="Execute GitHub Actions manually - New Dev Environment"/></picture><p>その後、<code class="language-plaintext highlighter-rouge">Environment variables</code> の <code class="language-plaintext highlighter-rouge">Add environment variable</code> ボタンをクリックして、次のように <code class="language-plaintext highlighter-rouge">Variable</code> を追加します。</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment_variable.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment_variable.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment_variable.png" alt="Execute GitHub Actions manually - Dev environment variable"/></picture><p>同じように <code class="language-plaintext highlighter-rouge">prod</code> という環境にも同じ変数を追加します。</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/prod_environment_variable.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/prod_environment_variable.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/prod_environment_variable.png" alt="Execute GitHub Actions manually - Prod environment variable"/></picture><p>次は、手動で実行する GitHub Actions を作成するために <code class="language-plaintext highlighter-rouge">.github/workflows/manual_test.yml</code> ファイルを作成し、次のように修正し</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_environment</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">environment</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">environment</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy-to-staging</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">environment</span><span class="pi">:</span> <span class="s">$</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print the input</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>
</code></pre></div></div><p>このように作成したファイルを commit して push した後、<code class="language-plaintext highlighter-rouge">GitHub</code> の <code class="language-plaintext highlighter-rouge">Actions</code> タブに移動すると、次のような画面を確認できます。</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/environment_input.png" alt="Execute GitHub Actions manually - Environment input"/></picture><p>右側に表示された <code class="language-plaintext highlighter-rouge">Run workflow</code> をクリックすると、<code class="language-plaintext highlighter-rouge">GitHub</code> の <code class="language-plaintext highlighter-rouge">Settings</code> で <code class="language-plaintext highlighter-rouge">Environment</code> に設定した値が表示されることを確認できます。これを実行すると次のような結果を得ることができます。</p><ul><li>dev 環境</li></ul><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_dev.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_dev.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_dev.png" alt="Execute GitHub Actions manually - Environment input result dev"/></picture><ul><li>prod 環境</li></ul><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_prod.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_prod.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_prod.png" alt="Execute GitHub Actions manually - Environment input result prod"/></picture><h2 id="完了">完了</h2><p>これで GitHub Actions を手動で実行する方法について説明しました。また、設定可能な <code class="language-plaintext highlighter-rouge">inputs</code> タイプについても説明しました。</p><p>皆さんも <code class="language-plaintext highlighter-rouge">workflow_dispatch</code> とさまざまなタイプの <code class="language-plaintext highlighter-rouge">inputs</code> を使って GitHub Actions を手動で実行してみてください。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[GitHub Actions を手動で実行する方法について説明します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">[GitHub Actions] モノレポ環境でGitHub Actionsを使ってPRタイトルをチェックする方法</title><link href="https://deku.posstree.com/github_actions/action-check-pr-title/" rel="alternate" type="text/html" title="[GitHub Actions] モノレポ環境でGitHub Actionsを使ってPRタイトルをチェックする方法"/><published>2024-09-10T00:00:00+09:00</published><updated>2024-09-12T09:04:12+09:00</updated><id>https://deku.posstree.com/github_actions/action-check-pr-title-ja</id><content type="html" xml:base="https://deku.posstree.com/github_actions/action-check-pr-title/"><![CDATA[<div id="contents_list"><h2 id="section">目次</h2><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次</a></li><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#action-check-pr-title">action-check-pr-title</a></li><li><a href="#github-actions-%E7%94%9F%E6%88%90">GitHub Actions 生成</a></li><li><a href="#%E5%AE%8C%E4%BA%86">完了</a></li></ul></div><h2 id="概要">概要</h2><p>私は <code class="language-plaintext highlighter-rouge">Release Drafter</code> を使って GitHub のリリースノートを自動化しています。</p><ul><li><a href="https://deku.posstree.com/share/github-actions/release-drafter/" target="\_blank">[GitHub Actions] Release notes の自動化</a></li></ul><p>この <code class="language-plaintext highlighter-rouge">Release Drafter</code>はGitHubのPRのLabelを基準に動作します。<code class="language-plaintext highlighter-rouge">Release Drafter</code>はLabelを自動で生成する機能を提供しており、この時PRのタイトルを使います。そのため、PRのタイトルは重要です。</p><p>以前はPRのタイトルをチェックするため、<a href="https://github.com/aslafy-z/conventional-pr-title-action/tree/v3/" rel="nofollow noreferrer" target="\_blank">Conventional PR Title Action</a>を使いました。</p><ul><li><a href="https://deku.posstree.com/share/github-actions/pr-title-checker/" target="\_blank">[GitHub Actions] Pull request のタイトルチェック</a></li></ul><p>しかし、現在のモノレポプロジェクトでは、この <code class="language-plaintext highlighter-rouge">Conventional PR Title Action</code>だけでは十分ではなく、他のGitHub Actionsを使うことになりました。</p><ul><li><a href="https://deku.posstree.com/environment/repository_strategy/" target="\_blank">[プロジェクト管理] リポジトリ戦略</a></li></ul><p>今回のブログポストでは、<code class="language-plaintext highlighter-rouge">action-check-pr-title</code>を使ってPRを作成した際、PRのタイトルをチェックする方法について説明します。</p><h2 id="action-check-pr-title">action-check-pr-title</h2><p><code class="language-plaintext highlighter-rouge">action-check-pr-title</code>は正規表現を使ってPRのタイトルをチェックするGitHub Actionsです。</p><ul><li><a href="https://github.com/Slashgear/action-check-pr-title" rel="nofollow noreferrer" target="\_blank">action-check-pr-title</a></li></ul><h2 id="github-actions-生成">GitHub Actions 生成</h2><p><code class="language-plaintext highlighter-rouge">action-check-pr-title</code>を使ってPRのタイトルをチェックするGitHub Actionsを生成するために、<code class="language-plaintext highlighter-rouge">.github/workflows/check_pr_title.yml</code>ファイルを生成し、以下のように修正します。</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Check PR Title</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">opened</span>
      <span class="pi">-</span> <span class="s">reopened</span>
      <span class="pi">-</span> <span class="s">edited</span>
      <span class="pi">-</span> <span class="s">synchronize</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">check-pr-title</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout Repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Check PR Title</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">Slashgear/action-check-pr-title@v4.3.0</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">regexp</span><span class="pi">:</span> <span class="s1">'</span><span class="s">(feat|fix|chore|docs|style|refactor|test|build|ci)\((SERVICE1|SERVICE2|template|components|config|common)\):</span><span class="nv"> </span><span class="s">.+'</span>
          <span class="na">helpMessage</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Example:</span><span class="nv"> </span><span class="s">'feat(SERVICE1):</span><span class="nv"> </span><span class="s">example</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">title'"</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">Pull Request</code>のタイトルをチェックする部分をもう少し詳しく見てみます。</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Check PR Title</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">Slashgear/action-check-pr-title@v4.3.0</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">regexp</span><span class="pi">:</span> <span class="s1">'</span><span class="s">(feat|fix|chore|docs|style|refactor|test|build|ci)\((SERVICE1|SERVICE2|template|components|config|common)\):</span><span class="nv"> </span><span class="s">.+'</span>
          <span class="na">helpMessage</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Example:</span><span class="nv"> </span><span class="s">'feat(SERVICE1):</span><span class="nv"> </span><span class="s">example</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">title'"</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">action-check-pr-title</code>が提供する<code class="language-plaintext highlighter-rouge">regexp</code>オプションを使って<code class="language-plaintext highlighter-rouge">PR</code>のタイトルをチェックします。ここで使う正規表現は以下のようなPRタイトルを許可します。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>feat<span class="o">(</span>SERVICE1<span class="o">)</span>: Add new feature
fix<span class="o">(</span>SERVICE2<span class="o">)</span>: Fix bug
refactor<span class="o">(</span>common<span class="o">)</span>: Refactor code
...
</code></pre></div></div><p>モノレポを使っているため、<code class="language-plaintext highlighter-rouge">Conventional Commits</code>の<code class="language-plaintext highlighter-rouge">Scope</code>領域にサービス名を設定し、これをチェックするように設定しました。</p><ul><li><a href="https://www.conventionalcommits.org/en/v1.0.0/" rel="nofollow noreferrer" target="\_blank">Conventional Commits</a></li></ul><h2 id="完了">完了</h2><p>これで<code class="language-plaintext highlighter-rouge">action-check-pr-title</code>を使ってPRを作成した際、PRのタイトルをチェックする方法について説明しました。<a href="https://github.com/aslafy-z/conventional-pr-title-action/tree/v3/" rel="nofollow noreferrer" target="\_blank">Conventional PR Title Action</a>でも正規表現チェックが可能ですが、設定が簡単ではないため、<code class="language-plaintext highlighter-rouge">action-check-pr-title</code>を使うことにしました。</p><p>皆さんも簡単に正規表現でPRタイトルをチェックしたい場合は、<code class="language-plaintext highlighter-rouge">action-check-pr-title</code>を使ってみてください。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[モノレポ環境でGitHub Actionsを使ってPR(Pull Request)を作成した際、PRのタイトルをチェックする方法について説明します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry></feed>