<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://deku.posstree.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://deku.posstree.com/" rel="alternate" type="text/html"/><updated>2024-12-19T07:46:06+09:00</updated><id>https://deku.posstree.com/feed.xml</id><title type="html">Deku</title><subtitle>『Programming Artist, DeKu』</subtitle><author><name>dev.yakuza@gmail.com</name></author><entry xml:lang="ja"><title type="html">効果的な従業員教育のための講師選定方法</title><link href="https://deku.posstree.com/essay/effective-employee-training/" rel="alternate" type="text/html" title="効果的な従業員教育のための講師選定方法"/><published>2024-11-14T00:00:00+09:00</published><updated>2024-12-03T20:54:19+09:00</updated><id>https://deku.posstree.com/essay/effective-employee-training-ja</id><content type="html" xml:base="https://deku.posstree.com/essay/effective-employee-training/"><![CDATA[<p>大体の企業は従業員教育に多額の費用を投資しています。従業員が成長すれば会社も成長できるためです。しかし、多くの企業は教育を通じて実質的な効果を得ていません。なぜ企業は教育に多額の費用を投資しているのに、実際には大きな効果を得ていないのでしょうか？</p><p>企業は教育を実施する際、従業員が成長し、その成長が会社に影響を与えることを期待しています。しかし、ほとんどの企業は、今年どのような教育を何人が修了したかを確認するだけで、教育の成果を測定していません。従業員が実質的にどれだけ助けを受け、どれだけ成長したかを測定していません。</p><p>企業での教育、トレーニングの効果に関するメタ分析研究によると、ほとんどの教育は6ヶ月ほど経つと効果がほとんど消えるとされています。教育を修了した時点では、従業員の満足度が高く、業務に非常に役立つと感じるかもしれませんが、実際には大きな効果がありません。</p><p>このような問題が発生する最大の理由は、教育を行う講師にあります。企業は講師を選定する際、主にどれだけ多くの知識を持っているかを考慮して選定します。</p><p>しかし、ジョン・ハッティの研究によると、講師の知識レベルの効果は0.09であり、学業成績に影響を与える150以上の要因の中で135位にとどまります。つまり、講師がどれだけ多くの専門知識を持っているかは、学習成果にほとんど影響を与えません。</p><blockquote><p>医療分野の研究によると、専門家が特定の手術法を学生に教える際、医学的知識、何をどのようにすべきかの行動段階、意思決定段階など、自分が該当課題を実行する際に使用する知識のうち<code class="language-plaintext highlighter-rouge">70%は教えない</code>という研究結果が多い。</p></blockquote><p>医学のような専門分野で専門家が学生に教える際、専門家が持っている知識の<code class="language-plaintext highlighter-rouge">70%は教えない</code>という研究結果が多いです。</p><p>一般的に優れた講師は、その分野について多くの知識を持っていると考えられます。しかし、教育は究極的には学生が<code class="language-plaintext highlighter-rouge">より良くなる</code>のを助けることが目的であるため、教育という文脈では、講師が持っている知識は大きな助けにはなりません。</p><p>知識が多いからといって必ずしも良い講師であるとは限らず、知識が多い人から学んだからといって学生の実力が向上するわけではありません。</p><blockquote><p>教える能力が認められ、一度以上の優れた教育賞を受賞した人であっても、できるだけ段階や知識を抜かりなく教えてくれる特定の呪文を受けたにもかかわらず、同じようでした。さらには授業が終わって「もし落としたものがありますか」と尋ねた後、それを追加しても依然として70%程度は落としました。</p></blockquote><p>専門家、卓越した教育賞を受けた人であっても、学生に該当技術を成功的にやり遂げるために必要なことの30%だけを教えておいて、自分はすべて教えたと思うということだ。</p><p>この問題を解決するためには、先生と学生が一緒に努力しなければならない。 先生の認知的分析に長けた程度が生徒たちの学業成就度に及ぼす影響は1.29だ。すなわち、この認知的分析能力が優れた先生がよく教えることだ。</p><p>先生は次のようにメタ認知を高める努力ができる。</p><blockquote><p>「私がこの問題を解決する時、どんな過程を経るのか」を考えて自身の頭の中を観察し、質問を投げかけて分析することだ。 そして学生たちがこれを学びながらどんな考えをしているのかを直接観察し質問を投げかけて分析することができる。</p></blockquote><p>学生はこのような認知的作業分析が上手な先生を選択することができる。 また、先生の認知的作業分析を助けるために、自分がどのようにこの問題を解いたのか、その認知的過程を先生に知らせることも非常に効果的な方法だ。 または、先生がその問題を解いた認知的過程を教えてほしいと要請することもできる。 認知的作業分析については、次の文を参考にすれば役に立つだろう。</p><ul><li><a href="https://deku.posstree.com/essay/cognitibe-task-analysis/" target="\_blank">認知的作業分析による専門家の専門性の引き出し</a></li></ul><p>他の人を教えたり学ぶ場でこのような部分を考えながら参加すれば、学習効果が増加することを確認できるだろう。 会社は単純に講師が知識を伝達する学習ではなく、講師と職員が一緒に認知的作業分析を通じて学習できる環境を作らなければならない。 そうでなければ、教育に投資した費用対比、大きな効果を得ることができないだろう。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="essay"/><summary type="html"><![CDATA[企業は従業員教育に多額の費用を投資していますが、実際には大きな効果を得ていません。なぜ企業は教育に多額の費用を投資しているのに、実際には大きな効果を得ていないのでしょうか？]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/essay/2024/effective-employee-training/background.webp"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/essay/2024/effective-employee-training/background.webp" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">[GitHub Actions] Reviewerに通知するためのSlackメッセージを送信する</title><link href="https://deku.posstree.com/github_actions/send_slack_message_for_reviewer/" rel="alternate" type="text/html" title="[GitHub Actions] Reviewerに通知するためのSlackメッセージを送信する"/><published>2024-11-13T00:00:00+09:00</published><updated>2024-12-17T08:50:33+09:00</updated><id>https://deku.posstree.com/github_actions/send-slack-message-ja</id><content type="html" xml:base="https://deku.posstree.com/github_actions/send_slack_message_for_reviewer/"><![CDATA[<div id="contents_list"><h2 id="section">目次</h2><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次</a></li><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#slack%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E4%BD%9C%E6%88%90">Slackアプリの作成</a></li><li><a href="#%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%ABid">チャンネルID</a></li><li><a href="#slack-github-action%E3%82%92%E4%BD%BF%E3%81%86">slack-github-actionを使う</a></li><li><a href="#composite-action">Composite Action</a></li><li><a href="#reviewer%E9%80%9A%E7%9F%A5">Reviewer通知</a></li><li><a href="#%E6%AF%8E%E6%9C%9D%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E9%80%81%E4%BF%A1">毎朝メッセージ送信</a></li><li><a href="#%E5%AE%8C%E4%BA%86">完了</a></li></ul></div><h2 id="概要">概要</h2><p>GitHub Actionsを使ってCI/CDを構築すると、ビルド、テストが成功または失敗した時にSlackにメッセージを送りたい場合があります。今回のブログでは、GitHub Actionsを使ってSlackメッセージを送る方法について説明します。</p><h2 id="slackアプリの作成">Slackアプリの作成</h2><p>Slackは対話型メッセージングプラットフォームで、メッセージを受け取るという意味は誰かがメッセージを送ったことを意味します。そのため、GitHub Actionsを使ってSlackメッセージを送るためには、Slackメッセージを送るSlackアプリを作成する必要があります。</p><p>まず、次のリンクをクリックして<code class="language-plaintext highlighter-rouge">Slack API</code>にアクセスします。</p><ul><li><a href="https://api.slack.com/" rel="nofollow noreferrer" target="_blank">https://api.slack.com/</a></li></ul><p>すると次の画面が表示されます。</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/slack_api.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/slack_api.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/slack_api.png" alt="GitHub Actions Send Slack message - Slack API site"/></picture><p>画面右上の<code class="language-plaintext highlighter-rouge">Your apps</code>を選択してアプリ作成画面に移動します。</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app.png" alt="GitHub Actions Send Slack message - Create new Slack app"/></picture><p><code class="language-plaintext highlighter-rouge">Create New App</code>を選択して新しいアプリを生成します。</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app_options.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app_options.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app_options.png" alt="GitHub Actions Send Slack message - Create new Slack app options"/></picture><p>この時、<code class="language-plaintext highlighter-rouge">From scratch</code>を選択して新しいアプリを生成します。</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_name_and_workspace.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_name_and_workspace.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_name_and_workspace.png" alt="GitHub Actions Send Slack message - Enter app name and workspace"/></picture><p>その後、アプリの名前を入力して、コナぷりを使うSlackのWorkspaceを選択して<code class="language-plaintext highlighter-rouge">Create App</code>ボタンをクリックします。</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_created.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_created.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_created.png" alt="GitHub Actions Send Slack message - App created"/></picture><p>すると上記のようにアプリが生成されることを確認できます。</p><p>次はこのアプリにメッセージを送る権限を設定する必要があります。アプリ一覧画面で新しく作成したアプリの名前を選択してアプリ詳細ページに移動します。</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions.png" alt="GitHub Actions Send Slack message - OAuth and Permissions"/></picture><p>その後、左メニューにある<code class="language-plaintext highlighter-rouge">OAuth &amp; Permissions</code>を選択して<code class="language-plaintext highlighter-rouge">OAuth &amp; Permissions</code>画面に移動します。</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_scopes.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_scopes.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_scopes.png" alt="GitHub Actions Send Slack message - OAuth and Permissions scopes"/></picture><p>少しスクロールして<code class="language-plaintext highlighter-rouge">Scopes</code>セクションに移動し、<code class="language-plaintext highlighter-rouge">Add an OAuth Scope</code>ボタンをクリックして<code class="language-plaintext highlighter-rouge">chat:write</code>権限を追加します。</p><p>最後に<code class="language-plaintext highlighter-rouge">OAuth Tokens</code>セクションに移動して、<code class="language-plaintext highlighter-rouge">Install to (workspace)</code>ボタンをクリックしてSlackアプリをインストールします。</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_install_app.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_install_app.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_install_app.png" alt="GitHub Actions Send Slack message - OAuth and Permissions install app"/></picture><p>アプリをインストールすると、次のように<code class="language-plaintext highlighter-rouge">Bot User OAuth Access Token</code>が生成されることを確認できます。</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_bot_user_oauth_access_token.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_bot_user_oauth_access_token.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_bot_user_oauth_access_token.png" alt="GitHub Actions Send Slack message - OAuth and Permissions Bot User OAuth Access Token"/></picture><p>次はこのように生成されたトークンを<code class="language-plaintext highlighter-rouge">GitHub Actions</code>で使用するために<code class="language-plaintext highlighter-rouge">GitHub</code>の<code class="language-plaintext highlighter-rouge">Secrets</code>に保存する必要があります。Slackメッセージを送りたい<code class="language-plaintext highlighter-rouge">GitHub</code>リポジトリに移動します。</p><p>その後、<code class="language-plaintext highlighter-rouge">Settings &gt; Secrets and variables &gt; Actions</code>メニューをクリックして<code class="language-plaintext highlighter-rouge">Actions secrets and variables</code>ページに移動します。</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/github_secrets_and_variables.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/github_secrets_and_variables.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/github_secrets_and_variables.png" alt="GitHub Actions Send Slack message - GitHub secrets and variables"/></picture><p>画面に表示された<code class="language-plaintext highlighter-rouge">Repository secrets</code>の<code class="language-plaintext highlighter-rouge">New repository secret</code>ボタンをクリックして、<code class="language-plaintext highlighter-rouge">Name</code>に<code class="language-plaintext highlighter-rouge">SLACK_BOT_TOKEN</code>を入力し、<code class="language-plaintext highlighter-rouge">Value</code>に<code class="language-plaintext highlighter-rouge">Slack API</code>サイトで生成したトークンを入力して<code class="language-plaintext highlighter-rouge">Add secret</code>ボタンをクリックして保存します。</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="チャンネルid">チャンネルID</h2><p><code class="language-plaintext highlighter-rouge">GitHub Actions</code>を使ってSlackのチャンネルにメッセージを送るためには<code class="language-plaintext highlighter-rouge">CHANNEL_ID</code>が必要です。</p><p><code class="language-plaintext highlighter-rouge">CHANNEL_ID</code>は<code class="language-plaintext highlighter-rouge">Slack</code>で取得できます。個人に直接送りたい場合は、次のように個人プロフィールから<code class="language-plaintext highlighter-rouge">Copy member ID</code>をクリックして<code class="language-plaintext highlighter-rouge">CHANNEL_ID</code>を取得することができます。</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/copy_slack_member_channel_id.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/copy_slack_member_channel_id.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/copy_slack_member_channel_id.png" alt="GitHub Actions Send Slack message - Copy Slack member channel ID"/></picture><p>もし、特定のチャンネルにメッセージを送りたい場合は、<code class="language-plaintext highlighter-rouge">Open channel details</code>をクリックしてチャンネルの詳細情報に移動した後、</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/open_slack_channel_details.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/open_slack_channel_details.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/open_slack_channel_details.png" alt="GitHub Actions Send Slack message - Copy Slack channel ID"/></picture><p>下に表示された<code class="language-plaintext highlighter-rouge">Channel ID</code>をコピーして使えば良いです。</p><h2 id="slack-github-actionを使う">slack-github-actionを使う</h2><p><code class="language-plaintext highlighter-rouge">Slack</code>から公式で提供されている<code class="language-plaintext highlighter-rouge">slack-github-action</code>を使うと<code class="language-plaintext highlighter-rouge">GitHub Actions</code>から<code class="language-plaintext highlighter-rouge">Slack</code>にメッセージを送ることができます。</p><ul><li>slack-github-action: <a href="https://github.com/slackapi/slack-github-action" rel="nofollow noreferrer" target="_blank">https://github.com/slackapi/slack-github-action</a></li></ul><p><code class="language-plaintext highlighter-rouge">GitHub Actions</code>を次のように<code class="language-plaintext highlighter-rouge">slack-github-action</code>を使うように修正すると<code class="language-plaintext highlighter-rouge">Slack</code>にメッセージを送ることができます。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Post to a Slack channel</span>
  <span class="na">id</span><span class="pi">:</span> <span class="s">slack</span>
  <span class="na">uses</span><span class="pi">:</span> <span class="s">slackapi/slack-github-action@v1.27.0</span>
  <span class="na">with</span><span class="pi">:</span>
    <span class="na">channel-id</span><span class="pi">:</span> <span class="s1">'</span><span class="s">CHANNEL_ID'</span>
    <span class="na">payload</span><span class="pi">:</span> <span class="pi">|</span>
      <span class="s">{</span>
        <span class="s">"text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",</span>
        <span class="s">"blocks": [</span>
          <span class="s">{</span>
            <span class="s">"type": "section",</span>
            <span class="s">"text": {</span>
              <span class="s">"type": "mrkdwn",</span>
              <span class="s">"text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"</span>
            <span class="s">}</span>
          <span class="s">}</span>
        <span class="s">]</span>
      <span class="s">}</span>
  <span class="na">env</span><span class="pi">:</span>
    <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.SLACK_BOT_TOKEN }}</span>

</code></pre></div></div><p>簡単なメッセージを送る時にはこの<code class="language-plaintext highlighter-rouge">slack-github-action</code>を使うと便利に<code class="language-plaintext highlighter-rouge">Slack</code>メッセージを送ることができます。</p><h2 id="composite-action">Composite Action</h2><p>会社では<code class="language-plaintext highlighter-rouge">slack-github-action</code>を使わず、次のように<code class="language-plaintext highlighter-rouge">Composite Action</code>を使って<code class="language-plaintext highlighter-rouge">Slack</code>メッセージを送る方法を使っています。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Send</span><span class="nv"> </span><span class="s">Slack</span><span class="nv"> </span><span class="s">messages'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Send</span><span class="nv"> </span><span class="s">Slack</span><span class="nv"> </span><span class="s">messages'</span>

<span class="na">inputs</span><span class="pi">:</span>
  <span class="na">GITHUB_TOKEN</span><span class="pi">:</span>
    <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">GitHub</span><span class="nv"> </span><span class="s">token</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">use</span><span class="nv"> </span><span class="s">GitHub</span><span class="nv"> </span><span class="s">API'</span>
    <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span>
    <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Token</span><span class="nv"> </span><span class="s">for</span><span class="nv"> </span><span class="s">Slack</span><span class="nv"> </span><span class="s">bot'</span>
    <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">MESSAGES</span><span class="pi">:</span>
    <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">(JSON)</span><span class="nv"> </span><span class="s">Multiple</span><span class="nv"> </span><span class="s">users</span><span class="nv"> </span><span class="s">and</span><span class="nv"> </span><span class="s">multiple</span><span class="nv"> </span><span class="s">Slack</span><span class="nv"> </span><span class="s">messages'</span>
    <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>

<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Send Slack messages</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">github-token</span><span class="pi">:</span> <span class="s">${{ inputs.GITHUB_TOKEN }}</span>
        <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">const slackToken = process.env.SLACK_TOKEN</span>
          <span class="s">const messages = JSON.parse(Buffer.from(process.env.MESSAGES, 'base64').toString('utf-8'));</span>
          <span class="s">const channelIDs = {</span>
            <span class="s">'GITHUB_USER_NAME_1': 'USER_CHANNEL_ID_1',</span>
            <span class="s">'GITHUB_USER_NAME_2': 'USER_CHANNEL_ID_2',</span>
            <span class="s">'GITHUB_USER_NAME_2': 'USER_CHANNEL_ID_2',</span>
            <span class="s">'GITHUB_USER_NAME_3': 'USER_CHANNEL_ID_3',</span>
            <span class="s">'GITHUB_USER_NAME_3': 'USER_CHANNEL_ID_3',</span>
            <span class="s">'GITHUB_USER_NAME_4': 'USER_CHANNEL_ID_4',</span>
          <span class="s">}</span>

          <span class="s">for (const message of messages) {</span>
            <span class="s">const { userName, messages: blocks } = message</span>
            <span class="s">const channel = channelIDs[userName]</span>
            <span class="s">fetch('https://slack.com/api/chat.postMessage', {</span>
              <span class="s">method: 'POST',</span>
              <span class="s">headers: {</span>
                <span class="s">'Content-Type': 'application/json',</span>
                <span class="s">'Authorization': `Bearer ${slackToken}`,</span>
              <span class="s">},</span>
              <span class="s">body: JSON.stringify({</span>
                <span class="s">channel,</span>
                <span class="s">blocks,</span>
              <span class="s">})</span>
            <span class="s">})</span>
            <span class="s">.then(response =&gt; response.json())</span>
            <span class="s">.then(data =&gt; {</span>
              <span class="s">if (!data.ok) {</span>
                <span class="s">throw new Error(`Slack API error: ${data.error}`);</span>
              <span class="s">}</span>
              <span class="s">console.log('Message sent to Slack successfully');</span>
            <span class="s">})</span>
            <span class="s">.catch(error =&gt; {</span>
              <span class="s">console.error('Error sending message to Slack:', error);</span>
            <span class="s">});</span>
          <span class="s">}</span>
      <span class="na">env</span><span class="pi">:</span>
        <span class="na">SLACK_TOKEN</span><span class="pi">:</span> <span class="s">${{ inputs.SLACK_BOT_TOKEN }}</span>
        <span class="na">MESSAGES</span><span class="pi">:</span> <span class="s">${{ inputs.MESSAGES }}</span>

</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">Composite Action</code>を使うと<code class="language-plaintext highlighter-rouge">GitHub Actions</code>で<code class="language-plaintext highlighter-rouge">Slack</code>メッセージを送る部分を共通化して使うことができます。<code class="language-plaintext highlighter-rouge">Composite Action</code>については次のリンクを参考にしてください。</p><ul><li><a href="https://deku.posstree.com/github_actions/composite-action/" target="_blank">[GitHub Actions] Composite Actionを使ってGitHub Actionsの重複を減らす</a></li></ul><h2 id="reviewer通知">Reviewer通知</h2><p>このように作った<code class="language-plaintext highlighter-rouge">Composite Action</code>を使って<code class="language-plaintext highlighter-rouge">GitHub Actions</code>を使ってReviewerに指定された場合、<code class="language-plaintext highlighter-rouge">Slack</code>メッセージを送る方法について説明します。</p><p><code class="language-plaintext highlighter-rouge">GitHub Actions</code>でReviewerに指定された場合、<code class="language-plaintext highlighter-rouge">Slack</code>の個人チャンネルにメッセージを送るためには次のように<code class="language-plaintext highlighter-rouge">GitHub Actions</code>を作成することができます。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">[Slack]</span><span class="nv"> </span><span class="s">Reviewer</span><span class="nv"> </span><span class="s">assigned'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">review_requested</span><span class="pi">]</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">notify_for_reviewer</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout Repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Make Slack messages</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">make-slack-messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github-token</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">const prNumber = context.payload.pull_request.number;</span>
            <span class="s">const prTitle = context.payload.pull_request.title;</span>
            <span class="s">const prLink = context.payload.pull_request.html_url;</span>
            <span class="s">const { data: reviewers } = await github.rest.pulls.listRequestedReviewers({</span>
              <span class="s">owner: context.repo.owner,</span>
              <span class="s">repo: context.repo.repo,</span>
              <span class="s">pull_number: prNumber,</span>
            <span class="s">});</span>

            <span class="s">let slackMessages = []</span>
            <span class="s">const reviewerLogins = reviewers.users.map(user =&gt; user.login);</span>
            <span class="s">for (const userName of reviewerLogins) {</span>
              <span class="s">const message = `*Reviewer notification*\n\nYou are assigned to new PR.\n\n- title: ${prTitle}\n- link: ${prLink}`</span>
              <span class="s">slackMessages.push({</span>
                <span class="s">userName,</span>
                <span class="s">messages: [</span>
                  <span class="s">{</span>
                    <span class="s">type: 'section',</span>
                    <span class="s">text: {</span>
                      <span class="s">type: 'mrkdwn',</span>
                      <span class="s">text: message,</span>
                    <span class="s">}</span>
                  <span class="s">}</span>
                <span class="s">]</span>
              <span class="s">})</span>
            <span class="s">}</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Send Slack messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/send_slack_messages</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.SLACK_BOT_TOKEN }}</span>
          <span class="na">MESSAGES</span><span class="pi">:</span> <span class="s">${{ steps.make-slack-messages.outputs.MESSAGES }}</span>

</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><p>この<code class="language-plaintext highlighter-rouge">GitHub Actions</code>をもっと詳しく見ていきます。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">[Slack]</span><span class="nv"> </span><span class="s">Reviewer</span><span class="nv"> </span><span class="s">assigned'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">review_requested</span><span class="pi">]</span>
<span class="nn">...</span>

</code></pre></div></div><p>この<code class="language-plaintext highlighter-rouge">GitHub Actions</code>は<code class="language-plaintext highlighter-rouge">pull_request</code>イベントの<code class="language-plaintext highlighter-rouge">review_requested</code>を使ってPRにReviewerが指定された場合にのみ実行されます。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout Repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
<span class="nn">...</span>

</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">Composite Action</code>は<code class="language-plaintext highlighter-rouge">Git</code>から管理されているため、<code class="language-plaintext highlighter-rouge">actions/checkout@v4</code>を使ってリポジトリをチェックアウトする必要があります。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Make Slack messages</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">make-slack-messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github-token</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">const prNumber = context.payload.pull_request.number;</span>
            <span class="s">const prTitle = context.payload.pull_request.title;</span>
            <span class="s">const prLink = context.payload.pull_request.html_url;</span>
            <span class="s">const { data: reviewers } = await github.rest.pulls.listRequestedReviewers({</span>
              <span class="s">owner: context.repo.owner,</span>
              <span class="s">repo: context.repo.repo,</span>
              <span class="s">pull_number: prNumber,</span>
            <span class="s">});</span>

            <span class="s">let slackMessages = []</span>
            <span class="s">const reviewerLogins = reviewers.users.map(user =&gt; user.login);</span>
            <span class="s">for (const userName of reviewerLogins) {</span>
              <span class="s">const message = `*Reviewer notification*\n\nYou are assigned to new PR.\n\n- title: ${prTitle}\n- link: ${prLink}`</span>
              <span class="s">slackMessages.push({</span>
                <span class="s">userName,</span>
                <span class="s">messages: [</span>
                  <span class="s">{</span>
                    <span class="s">type: 'section',</span>
                    <span class="s">text: {</span>
                      <span class="s">type: 'mrkdwn',</span>
                      <span class="s">text: message,</span>
                    <span class="s">}</span>
                  <span class="s">}</span>
                <span class="s">]</span>
              <span class="s">})</span>
            <span class="s">}</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
<span class="s">...</span>

</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">actions/github-script@v7</code>を使ってReviewerにメッセージを送るためのメッセージを作成します。PRのタイトル、リンクを取得してReviewer用のメッセージを作成します。</p><div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Reviewer notification
You are assigned to new PR.
- title: PR title
- link: https://...
</code></pre></div></div><p>このメッセージはPRに指定されたReviewer全員にメッセージを送ることになります。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
            <span class="s">const reviewerLogins = reviewers.users.map(user =&gt; user.login);</span>
            <span class="s">for (const userName of reviewerLogins) {</span>
<span class="nn">...</span>

</code></pre></div></div><p>このように作ったメッセージを<code class="language-plaintext highlighter-rouge">JSON</code>をそのまま渡すと問題が発生します。そのため、<code class="language-plaintext highlighter-rouge">Buffer</code>を使って<code class="language-plaintext highlighter-rouge">base64</code>にエンコードして<code class="language-plaintext highlighter-rouge">core.setOutput</code>を使って<code class="language-plaintext highlighter-rouge">MESSAGES</code>に保存して渡すようにしました。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
<span class="nn">...</span>

</code></pre></div></div><p>最後は、前に作った<code class="language-plaintext highlighter-rouge">Composite Action</code>を使って<code class="language-plaintext highlighter-rouge">Slack</code>メッセージを送りました。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Send Slack messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/send_slack_messages</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.SLACK_BOT_TOKEN }}</span>
          <span class="na">MESSAGES</span><span class="pi">:</span> <span class="s">${{ steps.make-slack-messages.outputs.MESSAGES }}</span>
<span class="nn">...</span>

</code></pre></div></div><h2 id="毎朝メッセージ送信">毎朝メッセージ送信</h2><p>レビュワーがSlackメッセージを受け取った後、PRをレビューする場合もありますが、忙しくてPRをレビューできない場合もあります。このような場合、毎朝レビュワーにメッセージを送ってPRをレビューするように促すことができます。</p><p>次のように<code class="language-plaintext highlighter-rouge">GitHub Actions</code>を作成すると、平日の朝(月〜金)9時30分(日本時間)にレビュワーにメッセージを送ることができます。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">[Slack]</span><span class="nv"> </span><span class="s">Every</span><span class="nv"> </span><span class="s">weekday</span><span class="nv"> </span><span class="s">at</span><span class="nv"> </span><span class="s">9:30</span><span class="nv"> </span><span class="s">AM'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span> <span class="s1">'</span><span class="s">30</span><span class="nv"> </span><span class="s">0</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">1-5'</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">notify_reviewers_every_weekday</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Make Slack messages</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">make-slack-messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github-token</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">const userList = [</span>
              <span class="s">'GITHUB_USER_NAME_1',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_4',</span>
            <span class="s">]</span>
            <span class="s">const escapeForSlack = (text) =&gt; {</span>
              <span class="s">return text</span>
                <span class="s">.replace(/&amp;/g, '&amp;amp;')   // &amp; → &amp;amp;</span>
                <span class="s">.replace(/&lt;/g, '&amp;lt;')    // &lt; → &amp;lt;</span>
                <span class="s">.replace(/&gt;/g, '&amp;gt;')    // &gt; → &amp;gt;</span>
                <span class="s">.replace(/"/g, '&amp;quot;')  // " → &amp;quot;</span>
                <span class="s">.replace(/'/g, '&amp;#39;');  // ' → &amp;#39;</span>
            <span class="s">}</span>

            <span class="s">// Get All PRs</span>
            <span class="s">const prList = []</span>
            <span class="s">let pageIndex = 1</span>
            <span class="s">let hasMorePages = true</span>
            <span class="s">while (hasMorePages) {</span>
              <span class="s">const result = await github.rest.pulls.list({</span>
                <span class="s">owner: context.repo.owner,</span>
                <span class="s">repo: context.repo.repo,</span>
                <span class="s">state: 'open',</span>
                <span class="s">per_page: 100,</span>
                <span class="s">page: pageIndex,</span>
              <span class="s">})</span>
              <span class="s">if (result.data.length &gt; 0) {</span>
                <span class="s">prList.push(...result.data)</span>
                <span class="s">pageIndex += 1</span>
              <span class="s">} else {</span>
                <span class="s">hasMorePages = false</span>
              <span class="s">}</span>
            <span class="s">}</span>
            <span class="s">let slackMessages = []</span>
            <span class="s">for (const userName of userList) {</span>
              <span class="s">const reviewerPRList = prList.filter(pr =&gt; pr.user.login !== 'dependabot[bot]' &amp;&amp;</span>
                <span class="s">pr.requested_reviewers.some(reviewer =&gt; reviewer.login === userName)</span>
              <span class="s">);</span>
              <span class="s">if (reviewerPRList.length &gt; 0) {</span>
                <span class="s">let message = '*Reviewer notification*\n\nYou have assigned PRs. Please review when you have time.\n'</span>
                <span class="s">reviewerPRList.forEach(pr =&gt; {</span>
                  <span class="s">message += `\n- &lt;${pr.html_url}|${escapeForSlack(pr.title)}&gt;`;</span>
                <span class="s">});</span>
                <span class="s">slackMessages.push({</span>
                  <span class="s">userName,</span>
                  <span class="s">messages: [</span>
                    <span class="s">{</span>
                      <span class="s">type: 'section',</span>
                      <span class="s">text: {</span>
                        <span class="s">type: 'mrkdwn',</span>
                        <span class="s">text: message,</span>
                      <span class="s">}</span>
                    <span class="s">}</span>
                  <span class="s">]</span>
                <span class="s">})</span>
              <span class="s">}</span>
            <span class="s">}</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Send Slack messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/send_slack_messages</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.SLACK_BOT_TOKEN }}</span>
          <span class="na">MESSAGES</span><span class="pi">:</span> <span class="s">${{ steps.make-slack-messages.outputs.MESSAGES }}</span>

</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><p>この<code class="language-plaintext highlighter-rouge">GitHub Actions</code>をもっと詳しく見ていきます。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">[Slack]</span><span class="nv"> </span><span class="s">Every</span><span class="nv"> </span><span class="s">weekday</span><span class="nv"> </span><span class="s">at</span><span class="nv"> </span><span class="s">9:30</span><span class="nv"> </span><span class="s">AM'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span> <span class="s1">'</span><span class="s">30</span><span class="nv"> </span><span class="s">0</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">1-5'</span>
<span class="nn">...</span>

</code></pre></div></div><p>この<code class="language-plaintext highlighter-rouge">GitHub Actions</code>は<code class="language-plaintext highlighter-rouge">schedule</code>を使って平日(1-5)の朝9時30分(日本時間)に実行されます。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout Repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
<span class="nn">...</span>

</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">Composite Action</code>は<code class="language-plaintext highlighter-rouge">Git</code>から管理されているため、<code class="language-plaintext highlighter-rouge">actions/checkout@v4</code>を使ってリポジトリをチェックアウトする必要があります。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Make Slack messages</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">make-slack-messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github-token</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">const userList = [</span>
              <span class="s">'GITHUB_USER_NAME_1',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_4',</span>
            <span class="s">]</span>
            <span class="s">const escapeForSlack = (text) =&gt; {</span>
              <span class="s">return text</span>
                <span class="s">.replace(/&amp;/g, '&amp;amp;')   // &amp; → &amp;amp;</span>
                <span class="s">.replace(/&lt;/g, '&amp;lt;')    // &lt; → &amp;lt;</span>
                <span class="s">.replace(/&gt;/g, '&amp;gt;')    // &gt; → &amp;gt;</span>
                <span class="s">.replace(/"/g, '&amp;quot;')  // " → &amp;quot;</span>
                <span class="s">.replace(/'/g, '&amp;#39;');  // ' → &amp;#39;</span>
            <span class="s">}</span>

            <span class="s">// Get All PRs</span>
            <span class="s">const prList = []</span>
            <span class="s">let pageIndex = 1</span>
            <span class="s">let hasMorePages = true</span>
            <span class="s">while (hasMorePages) {</span>
              <span class="s">const result = await github.rest.pulls.list({</span>
                <span class="s">owner: context.repo.owner,</span>
                <span class="s">repo: context.repo.repo,</span>
                <span class="s">state: 'open',</span>
                <span class="s">per_page: 100,</span>
                <span class="s">page: pageIndex,</span>
              <span class="s">})</span>
              <span class="s">if (result.data.length &gt; 0) {</span>
                <span class="s">prList.push(...result.data)</span>
                <span class="s">pageIndex += 1</span>
              <span class="s">} else {</span>
                <span class="s">hasMorePages = false</span>
              <span class="s">}</span>
            <span class="s">}</span>
            <span class="s">let slackMessages = []</span>
            <span class="s">for (const userName of userList) {</span>
              <span class="s">const reviewerPRList = prList.filter(pr =&gt; pr.user.login !== 'dependabot[bot]' &amp;&amp;</span>
                <span class="s">pr.requested_reviewers.some(reviewer =&gt; reviewer.login === userName)</span>
              <span class="s">);</span>
              <span class="s">if (reviewerPRList.length &gt; 0) {</span>
                <span class="s">let message = '*Reviewer notification*\n\nYou have assigned PRs. Please review when you have time.\n'</span>
                <span class="s">reviewerPRList.forEach(pr =&gt; {</span>
                  <span class="s">message += `\n- &lt;${pr.html_url}|${escapeForSlack(pr.title)}&gt;`;</span>
                <span class="s">});</span>
                <span class="s">slackMessages.push({</span>
                  <span class="s">userName,</span>
                  <span class="s">messages: [</span>
                    <span class="s">{</span>
                      <span class="s">type: 'section',</span>
                      <span class="s">text: {</span>
                        <span class="s">type: 'mrkdwn',</span>
                        <span class="s">text: message,</span>
                      <span class="s">}</span>
                    <span class="s">}</span>
                  <span class="s">]</span>
                <span class="s">})</span>
              <span class="s">}</span>
            <span class="s">}</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
<span class="s">...</span>

</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">actions/github-script@v7</code>を使ってReviewerにメッセージを送るためのメッセージを作成します。各GitHubユーザーが割り当てられたすべてのPRを取得して、レビュワーに送るメッセージを作成します。</p><div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Reviewer notification
You have assigned PRs. Please review when you have time.
- PR title1: https://...
- PR title2: https://...
- PR title3: https://...
- PR title4: https://...
</code></pre></div></div><p>このメッセージはすでに作成したGitHubユーザーのリストにある全てのユーザーにメッセージを送ることになります。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
            <span class="s">const userList = [</span>
              <span class="s">'GITHUB_USER_NAME_1',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_4',</span>
            <span class="s">]</span>
<span class="nn">...</span>

</code></pre></div></div><p>このように作ったメッセージを<code class="language-plaintext highlighter-rouge">JSON</code>をそのまま渡すと問題が発生します。そのため、<code class="language-plaintext highlighter-rouge">Buffer</code>を使って<code class="language-plaintext highlighter-rouge">base64</code>にエンコードして<code class="language-plaintext highlighter-rouge">core.setOutput</code>を使って<code class="language-plaintext highlighter-rouge">MESSAGES</code>に保存して渡すようにしました。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
<span class="nn">...</span>

</code></pre></div></div><p>最後は、前に作った<code class="language-plaintext highlighter-rouge">Composite Action</code>を使って<code class="language-plaintext highlighter-rouge">Slack</code>メッセージを送りました。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Send Slack messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/send_slack_messages</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.SLACK_BOT_TOKEN }}</span>
          <span class="na">MESSAGES</span><span class="pi">:</span> <span class="s">${{ steps.make-slack-messages.outputs.MESSAGES }}</span>
<span class="nn">...</span>

</code></pre></div></div><h2 id="完了">完了</h2><p>これで<code class="language-plaintext highlighter-rouge">GitHub Actions</code>を使ってReviewerに指定された場合、<code class="language-plaintext highlighter-rouge">Slack</code>メッセージを送る方法と、毎朝レビュワーにPRリストを送る方法について説明しました。</p><p>レビュワーに指定されたことが認識されなくて、レビューが遅れている場合、この方法を使ってレビュワーにメッセージを送ってレビューを促してみてください。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[GitHub Actionsを使ってReviewerに指定された場合、Slackメッセージを送信する方法と、毎朝ReviewerにPRリストをSlackメッセージで送信する方法について説明します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">[GitHub Actions] Jestの実行Actionsのパフォーマンスを改善する</title><link href="https://deku.posstree.com/github_actions/improve-test-performance/" rel="alternate" type="text/html" title="[GitHub Actions] Jestの実行Actionsのパフォーマンスを改善する"/><published>2024-10-23T00:00:00+09:00</published><updated>2024-11-11T20:56:07+09:00</updated><id>https://deku.posstree.com/github_actions/improve-test-performance-ja</id><content type="html" xml:base="https://deku.posstree.com/github_actions/improve-test-performance/"><![CDATA[<div id="contents_list"><h2 id="section">目次</h2><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次</a></li><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#%E5%95%8F%E9%A1%8C%E7%82%B9">問題点</a></li><li><a href="#%E6%80%A7%E8%83%BD%E6%94%B9%E5%96%84">性能改善</a><ul><li><a href="#dependencies-cache">Dependencies Cache</a></li><li><a href="#actions%E5%88%86%E9%9B%A2">Actions分離</a></li><li><a href="#jest%E3%81%AEbail">Jestのbail</a></li><li><a href="#jest%E3%81%AEshard%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">Jestのshardオプション</a></li></ul></li><li><a href="#%E5%AE%8C%E4%BA%86">完了</a></li></ul></div><h2 id="概要">概要</h2><p>最近、会社でテストコードが増えてきたため、<code class="language-plaintext highlighter-rouge">GitHub Actions</code>でコードをチェックするActionに時間がかかるようになりました。この問題を解決するために、<code class="language-plaintext highlighter-rouge">Jest</code>を実行するActionのパフォーマンスを改善した内容を共有したいと思います。</p><h2 id="問題点">問題点</h2><p>現在、次のようなActionを使用してPRをチェックしています。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">jobs</span><span class="pi">:</span>
  <span class="na">check-code</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Check Code</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Prettier</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn format</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn cspell</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn lint</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn stylelint</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">yarn test:ci</span>
          <span class="s">yarn test:storybook</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">yarn build</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build SCSS</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">yarn typegen:scss</span>

          <span class="s"># Get the changed files</span>
          <span class="s">CHANGED_FILES=$(git diff --name-only HEAD)</span>
          <span class="s"># Check if there are changes in the generated files</span>
          <span class="s">if [ -n "$CHANGED_FILES" ]; then</span>
            <span class="s">echo "Error: There are changes in the following files: $CHANGED_FILES"</span>
            <span class="s">exit 1</span>
          <span class="s">fi</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">PR</code>が作成されるたびに<code class="language-plaintext highlighter-rouge">Prettier</code>、<code class="language-plaintext highlighter-rouge">CSpell</code>、<code class="language-plaintext highlighter-rouge">ESLint</code>、<code class="language-plaintext highlighter-rouge">Stylelint</code>、<code class="language-plaintext highlighter-rouge">Test</code>、<code class="language-plaintext highlighter-rouge">Build</code>、<code class="language-plaintext highlighter-rouge">Build SCSS</code>が実行されています。このActionは約25分かかります。</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/check-code-actions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/check-code-actions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/check-code-actions.png" alt="GitHub Actions - Improve Jest test performance"/></picture><h2 id="性能改善">性能改善</h2><p>PRを生成するたびに25分かかるのは非常に非効率的です。このブログポストでは、<code class="language-plaintext highlighter-rouge">Jest</code>を実行するActionのパフォーマンスを改善する方法について説明します。</p><h3 id="dependencies-cache">Dependencies Cache</h3><p>一番最初に行ったのは、<code class="language-plaintext highlighter-rouge">yarn install</code>でインストールされる<code class="language-plaintext highlighter-rouge">Dependencies</code>をキャッシュすることです。これにより、<code class="language-plaintext highlighter-rouge">Dependencies</code>を再インストールする時間を短縮できます。</p><p>この部分は他の<code class="language-plaintext highlighter-rouge">Actions</code>でも使用できるため、<code class="language-plaintext highlighter-rouge">Composite Action</code>として作成しました。<code class="language-plaintext highlighter-rouge">Composite Action</code>については、次のリンクを参照してください。</p><ul><li><a href="https://deku.posstree.com/github_actions/composite-action/" target="_blank">[GitHub Actions] Composite Actionを使ってGitHub Actionsの重複を減らす</a></li></ul><p>キャッシュは<code class="language-plaintext highlighter-rouge">actions/cache</code>を使って行いました。</p><ul><li><code class="language-plaintext highlighter-rouge">actions/cache</code>の公式ドキュメント: <a href="https://github.com/actions/cache" rel="nofollow noreferrer" target="_blank">https://github.com/actions/cache</a></li></ul><p><code class="language-plaintext highlighter-rouge">actions/cache</code>を使って<code class="language-plaintext highlighter-rouge">Dependencies</code>をキャッシュする<code class="language-plaintext highlighter-rouge">Composite Action</code>は次のようになります。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Dependencies'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Dependencies'</span>
<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Get yarn cache directory path</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">yarn-cache-dir-path</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo "dir=$(yarn config get cacheFolder)" &gt;&gt; $GITHUB_OUTPUT</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/cache@v4</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">yarn-cache</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">path</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">node_modules</span>
          <span class="s">**/node_modules</span>
          <span class="s">${{ steps.yarn-cache-dir-path.outputs.dir }}</span>
        <span class="na">key</span><span class="pi">:</span> <span class="s">${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}</span>
        <span class="na">restore-keys</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">${{ runner.os }}-yarn-</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
      <span class="na">if</span><span class="pi">:</span> <span class="s">steps.yarn-cache.outputs.cache-hit != 'true'</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>

</code></pre></div></div><p>私たちのチームは<code class="language-plaintext highlighter-rouge">Yarn</code>の<code class="language-plaintext highlighter-rouge">3.7.0</code>バージョンを使っています。そのため、<code class="language-plaintext highlighter-rouge">corepack enable</code>を追加し、<code class="language-plaintext highlighter-rouge">Yarn 3.7.0</code>のキャッシュフォルダを取得して<code class="language-plaintext highlighter-rouge">node_modules</code>と一緒にキャッシュしました。</p><p>また、プロジェクトがモノレポであるため、<code class="language-plaintext highlighter-rouge">**/node_modules</code>を使ってサブプロジェクトの<code class="language-plaintext highlighter-rouge">node_modules</code>もキャッシュしました。</p><p>もし、皆さんのプロジェクトがモノレポではなく、<code class="language-plaintext highlighter-rouge">Yarn 3.7.0</code>も使っていない場合は、公式ドキュメントを参照して適切な設定を行ってください。</p><ul><li>公式ドキュメント: <a href="https://github.com/actions/cache?tab=readme-ov-file#implementation-examples" rel="nofollow noreferrer" target="_blank">https://github.com/actions/cache?tab=readme-ov-file#implementation-examples</a></li></ul><p>この変更により、パフォーマンスが少し向上しました。</p><ul><li>Before: 1m 25s</li></ul><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/before-cache-actions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/before-cache-actions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/before-cache-actions.png" alt="GitHub Actions - Before using actions/cache for dependencies"/></picture><ul><li>After: 9s</li></ul><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/after-cache-actions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/after-cache-actions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/after-cache-actions.png" alt="GitHub Actions - After using actions/cache for dependencies"/></picture><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h3 id="actions分離">Actions分離</h3><p><code class="language-plaintext highlighter-rouge">Prettier</code>、<code class="language-plaintext highlighter-rouge">CSpell</code>、<code class="language-plaintext highlighter-rouge">ESLint</code>、<code class="language-plaintext highlighter-rouge">Stylelint</code>、<code class="language-plaintext highlighter-rouge">Test</code>、<code class="language-plaintext highlighter-rouge">Build</code>、<code class="language-plaintext highlighter-rouge">Build SCSS</code>をすべて1つの<code class="language-plaintext highlighter-rouge">Action</code>で実行していました。その中で最も時間がかかったのが<code class="language-plaintext highlighter-rouge">Test</code>の実行でした。</p><p>なので、<code class="language-plaintext highlighter-rouge">Test</code>が実行される間に他の<code class="language-plaintext highlighter-rouge">Actions</code>を実行できるように<code class="language-plaintext highlighter-rouge">Actions</code>を分離しました。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">jobs</span><span class="pi">:</span>
  <span class="na">cspell</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn cspell</span>
  <span class="na">remark</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn remark:service_1</span>
  <span class="na">eslint</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn lint:service_1</span>
  <span class="na">stylelint</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn stylelint:service_1</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn build:service_1</span>
  <span class="na">test-service_1</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Test service_1</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn test:ci:service_1</span>
</code></pre></div></div><p>モノレポを使っているため、このような<code class="language-plaintext highlighter-rouge">GitHub Actions</code>はサービスごとに存在し、<code class="language-plaintext highlighter-rouge">if</code>文を使ってそのサービスだけが実行されるようにしています。</p><p>分離する前には、この<code class="language-plaintext highlighter-rouge">Action</code>は約25分かかりました。</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/check-code-actions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/check-code-actions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/check-code-actions.png" alt="GitHub Actions - Before sperating actions"/></picture><p>分離した後、この<code class="language-plaintext highlighter-rouge">Action</code>は約13分程度で性能が改善されました。</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" alt="GitHub Actions - After sperating actions"/></picture><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h3 id="jestのbail">Jestのbail</h3><p><code class="language-plaintext highlighter-rouge">Jest</code>の<code class="language-plaintext highlighter-rouge">bail</code>オプションを使うと、テスト中に1つでもテストが失敗した場合にテストを中止するように設定できます。</p><p>このオプションを追加することで、テストが失敗した場合にすぐにすべてのテストを実行せずに中止することができ、時間を短縮できます。</p><p><code class="language-plaintext highlighter-rouge">Jest</code>の<code class="language-plaintext highlighter-rouge">bail</code>オプションを設定するために、<code class="language-plaintext highlighter-rouge">jest</code>を実行するコマンドが含まれる<code class="language-plaintext highlighter-rouge">package.json</code>ファイルを開いて、次のように変更します。</p><div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">...</span><span class="w">
    </span><span class="nl">"test:ci"</span><span class="p">:</span><span class="w"> </span><span class="s2">"jest --ci --bail"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="err">...</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div><h3 id="jestのshardオプション">Jestのshardオプション</h3><p><code class="language-plaintext highlighter-rouge">Jest</code>の<code class="language-plaintext highlighter-rouge">shard</code>オプションを使うと、テストを並列で実行できます。<code class="language-plaintext highlighter-rouge">shard</code>を使ってテストを並列で実行するために、<code class="language-plaintext highlighter-rouge">Jest</code>を実行する<code class="language-plaintext highlighter-rouge">Action</code>を開いて次のように変更します。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="s">...</span>
  <span class="s">test-service_1</span><span class="err">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Test service_1</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">strategy</span><span class="pi">:</span>
      <span class="na">matrix</span><span class="pi">:</span>
        <span class="na">shard</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">1</span><span class="pi">,</span> <span class="nv">2</span><span class="pi">,</span> <span class="nv">3</span><span class="pi">,</span> <span class="nv">4</span><span class="pi">,</span> <span class="nv">5</span><span class="pi">,</span> <span class="nv">6</span><span class="pi">,</span> <span class="nv">7</span><span class="pi">,</span> <span class="nv">8</span><span class="pi">,</span> <span class="nv">9</span><span class="pi">,</span> <span class="nv">10</span><span class="pi">]</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn test:ci:service_1 -- --shard=$/10</span>
</code></pre></div></div><p>このプロジェクトでは、モノレポを管理するために<code class="language-plaintext highlighter-rouge">Turborepo</code>を使っています。</p><ul><li><code class="language-plaintext highlighter-rouge">Turborepo</code>公式ドキュメント: <a href="https://turborepo.com/" rel="nofollow noreferrer">https://turborepo.com/</a></li></ul><p>この<code class="language-plaintext highlighter-rouge">Action</code>で実行する<code class="language-plaintext highlighter-rouge">yarn test:ci:service_1</code>は<code class="language-plaintext highlighter-rouge">turbo test:ci --parallel --filter=service_1</code>コマンドを実行します。そのため、<code class="language-plaintext highlighter-rouge">Jest</code>の<code class="language-plaintext highlighter-rouge">--shard</code>オプションを渡すために<code class="language-plaintext highlighter-rouge">--</code>を使ってオプションを渡しました。</p><p><code class="language-plaintext highlighter-rouge">shard</code>オプションを追加する前のテストは約13分かかりました。</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" alt="GitHub Actions - After sperating action"/></picture><p><code class="language-plaintext highlighter-rouge">shard</code>オプションを追加した後、テストは約2~3分かかりました。</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/jest-shard-option.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/jest-shard-option.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/jest-shard-option.png" alt="GitHub Actions - Use Jest shard option"/></picture><h2 id="完了">完了</h2><p>このブログポストでは、<code class="language-plaintext highlighter-rouge">Jest</code>を実行する<code class="language-plaintext highlighter-rouge">Action</code>のパフォーマンスを改善する方法について説明しました。パフォーマンス改善前には約25分かかりましたが、パフォーマンス改善後には約2~3分かかるようになりました。</p><p>皆さんも<code class="language-plaintext highlighter-rouge">Cache</code>、<code class="language-plaintext highlighter-rouge">Actions分離</code>、<code class="language-plaintext highlighter-rouge">shard</code>オプションを使って<code class="language-plaintext highlighter-rouge">Jest</code>を実行する<code class="language-plaintext highlighter-rouge">Action</code>のパフォーマンスを改善してみてください。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[GitHub ActionsでJestを実行するActionのパフォーマンスを改善する方法について紹介します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">[GitHub Actions] Composite Actionを使ってGitHub Actionsの重複を減らす</title><link href="https://deku.posstree.com/github_actions/composite-action/" rel="alternate" type="text/html" title="[GitHub Actions] Composite Actionを使ってGitHub Actionsの重複を減らす"/><published>2024-10-22T00:00:00+09:00</published><updated>2024-11-13T18:54:21+09:00</updated><id>https://deku.posstree.com/github_actions/composite-actions-ja</id><content type="html" xml:base="https://deku.posstree.com/github_actions/composite-action/"><![CDATA[<div id="contents_list"><h2 id="section">目次</h2><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#composite-action%E3%81%A8%E3%81%AF">Composite Actionとは</a></li><li><a href="#%E9%87%8D%E8%A4%87%E3%82%B3%E3%83%BC%E3%83%89%E3%81%8C%E3%81%82%E3%82%8Bgithub-action%E3%81%AE%E4%BE%8B">重複コードがあるGitHub Actionの例</a></li><li><a href="#composite-action%E3%82%92%E4%BD%9C%E3%82%8B">Composite Actionを作る</a></li><li><a href="#composite-action%E3%82%92%E4%BD%BF%E3%81%86">Composite Actionを使う</a></li><li><a href="#composite-action%E3%81%AEinputs">Composite Actionのinputs</a></li><li><a href="#composite-action%E3%81%AEoutputs">Composite Actionのoutputs</a></li><li><a href="#%E5%AE%8C%E4%BA%86">完了</a></li></ul></div><h2 id="概要">概要</h2><p>GitHub Actionsを使って開発をする際にActionで共通で使う部分が出てくることがあります。この時、Composite Actionを使うと共通で使う部分を一つのActionにまとめて再利用性を高めることができます。</p><p>このブログポストではComposite Actionを使ってGitHub Actionsの再利用性を高める方法について紹介します。</p><h2 id="composite-actionとは">Composite Actionとは</h2><p>Composite Actionは複数のActionを一つのActionにまとめて使うことができる機能です。Composite Actionを使うと複数のActionで共通で使う部分を一つのActionにまとめて再利用性を高めることができます。</p><ul><li>公式ドキュメント: <a href="https://docs.github.com/en/actions/sharing-automations/creating-actions/creating-a-composite-action" rel="nofollow noreferrer" target="_blank">Composite Action</a></li></ul><h2 id="重複コードがあるgithub-actionの例">重複コードがあるGitHub Actionの例</h2><p>Reactを使うプロジェクトで次のようなGitHub Actionsを使うことができます。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Check</span><span class="nv"> </span><span class="s">code'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">cspell</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn cspell</span>
  <span class="na">remark</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn remark</span>
  <span class="na">eslint</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn lint</span>
  <span class="na">stylelint</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn stylelint</span>
  <span class="na">test</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn test</span>
</code></pre></div></div><p>Reactプロジェクトで<code class="language-plaintext highlighter-rouge">CSpell</code>と複数の<code class="language-plaintext highlighter-rouge">Linter</code>と<code class="language-plaintext highlighter-rouge">Test</code>を実行するGitHub Actionsです。ここでDependenciesをインストールする部分が重複していることが分かります。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="s">...</span>
      <span class="s">- name</span><span class="err">:</span> <span class="s">Setup node</span>
        <span class="s">uses</span><span class="err">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="s">with</span><span class="err">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="s">...</span>
</code></pre></div></div><p>この部分をComposite Actionを使って一つのActionにまとめて再利用する方法について見ていきます。</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="composite-actionを作る">Composite Actionを作る</h2><p>Dependenciesをインストールする部分をComposite Actionにするために<code class="language-plaintext highlighter-rouge">.github/actions/install-dependencies.yml</code>ファイルを作成して次のように修正します。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Dependencies'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Dependencies'</span>

<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">Composite Action</code>を使うためには<code class="language-plaintext highlighter-rouge">using</code>キーワードに<code class="language-plaintext highlighter-rouge">composite</code>を使ってComposite Actionであることを明示します。そして<code class="language-plaintext highlighter-rouge">steps</code>にComposite Actionを実行するステップを記述します。</p><p>コマンドを実行する際には<code class="language-plaintext highlighter-rouge">shell</code>キーワードに<code class="language-plaintext highlighter-rouge">bash</code>を使ってbashシェルを使うように設定する必要があります。</p><h2 id="composite-actionを使う">Composite Actionを使う</h2><p>Composite Actionを使うためにはGitHub Actionsを次のように修正します。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Check</span><span class="nv"> </span><span class="s">code'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">cspell</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn cspell</span>
  <span class="na">remark</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn remark</span>
  <span class="na">eslint</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn lint</span>
  <span class="na">stylelint</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn stylelint</span>
  <span class="na">test</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn test</span>
</code></pre></div></div><p>공통으로 분리한 Composite Action을 다음과 같이 사용하도록 수정하였습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="s">...</span>
       <span class="s">- name</span><span class="err">:</span> <span class="s">Checkout code</span>
        <span class="s">uses</span><span class="err">:</span> <span class="s">actions/checkout@v4</span>
        <span class="s">with</span><span class="err">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
<span class="err">      </span><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="s">...</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">Composite Action</code>는 <code class="language-plaintext highlighter-rouge">.github</code>フォルダで管理しているため、<code class="language-plaintext highlighter-rouge">actions/checkout</code>を使ってコードを先にチェックアウトする必要があります。その後、<code class="language-plaintext highlighter-rouge">uses</code>キーワードにComposite Actionのパスを記述してComposite Actionを使えます。</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="composite-actionのinputs">Composite Actionのinputs</h2><p><code class="language-plaintext highlighter-rouge">Composite Action</code>を使う際、特定の値を渡してActionを実行したい場合があります。この場合、<code class="language-plaintext highlighter-rouge">Composite Action</code>の<code class="language-plaintext highlighter-rouge">inputs</code>を使って値を渡すことができます。</p><p><code class="language-plaintext highlighter-rouge">Composite Action</code>の<code class="language-plaintext highlighter-rouge">inputs</code>を使うため、<code class="language-plaintext highlighter-rouge">Composite Action</code>を次のように修正します。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Composite</span><span class="nv"> </span><span class="s">Action</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">inputs'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Composite</span><span class="nv"> </span><span class="s">Action</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">inputs'</span>
<span class="na">inputs</span><span class="pi">:</span>
  <span class="na">variable_name</span><span class="pi">:</span>
    <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Description</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">variable'</span>
    <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">default</span><span class="pi">:</span> <span class="s1">'</span><span class="s">variabel_default_value'</span>
<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print Composite Action inputs variable</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo ${{ inputs.variable_name }}</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>

</code></pre></div></div><p>この<code class="language-plaintext highlighter-rouge">inputs</code>を使うと条件によって異なる動作をする<code class="language-plaintext highlighter-rouge">Composite Action</code>を作成することができます。</p><p>このように作った<code class="language-plaintext highlighter-rouge">Composite Action</code>は次のように使って<code class="language-plaintext highlighter-rouge">Composite Action</code>の<code class="language-plaintext highlighter-rouge">inputs</code>を使うことができます。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
      <span class="s">...</span>
      <span class="s">- name</span><span class="err">:</span> <span class="s">Checkout code</span>
        <span class="s">uses</span><span class="err">:</span> <span class="s">actions/checkout@v4</span>
        <span class="s">with</span><span class="err">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
<span class="err">      </span><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Composite Action with inputs</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/composite_action</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">variable_name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">test_input_value'</span>
      <span class="s">...</span>

</code></pre></div></div><h2 id="composite-actionのoutputs">Composite Actionのoutputs</h2><p><code class="language-plaintext highlighter-rouge">Composite Action</code>を使う際、<code class="language-plaintext highlighter-rouge">Composite Action</code>から特定の値を受け取ってActionを実行したい場合があります。この場合、<code class="language-plaintext highlighter-rouge">Composite Action</code>の<code class="language-plaintext highlighter-rouge">outputs</code>を使って値を渡すことができます。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Composite</span><span class="nv"> </span><span class="s">Action</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">outputs'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Composite</span><span class="nv"> </span><span class="s">Action</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">outputs'</span>
<span class="na">outputs</span><span class="pi">:</span>
  <span class="na">variable_name</span><span class="pi">:</span>
    <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">variable</span><span class="nv"> </span><span class="s">description"</span>
    <span class="na">value</span><span class="pi">:</span> <span class="s">${{ steps.output_step.outputs.output_variable_name }}</span>
<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set outputs</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">output_step</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo "output_variable_name=test_output_value" &gt;&gt; $GITHUB_OUTPUT</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>

</code></pre></div></div><p>このように作った<code class="language-plaintext highlighter-rouge">Composite Action</code>は次のように使って<code class="language-plaintext highlighter-rouge">Composite Action</code>の<code class="language-plaintext highlighter-rouge">outputs</code>を使うことができます。</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
      <span class="s">...</span>
      <span class="s">- name</span><span class="err">:</span> <span class="s">Checkout code</span>
        <span class="s">uses</span><span class="err">:</span> <span class="s">actions/checkout@v4</span>
        <span class="s">with</span><span class="err">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
<span class="err">      </span><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Composite Action with outputs</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">composite_action</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/composite_action</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print Composite Action outputs variable</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo ${{ steps.composite_action.outputs.variable_name }}</span>
      <span class="s">...</span>

</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">outputs</code>を使うと<code class="language-plaintext highlighter-rouge">Composite Action</code>の実行結果を使う<code class="language-plaintext highlighter-rouge">Action</code>を作成することができます。</p><h2 id="完了">完了</h2><p>これで<code class="language-plaintext highlighter-rouge">Composite Action</code>を使ってGitHub Actionsの重複を減らし、Actionの再利用性を高める方法について紹介しました。</p><p>皆さんももし重複するActionがあれば<code class="language-plaintext highlighter-rouge">Composite Action</code>を使ってActionの再利用性を高めてみてください。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[GitHub Actionsで重複で使われるActionをComposite Actionで作ってActionの再利用性を高める方法について紹介します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">ミス管理戦略</title><link href="https://deku.posstree.com/essay/mistakes-management/" rel="alternate" type="text/html" title="ミス管理戦略"/><published>2024-10-15T00:00:00+09:00</published><updated>2024-12-03T20:54:19+09:00</updated><id>https://deku.posstree.com/essay/mistakes-management-ja</id><content type="html" xml:base="https://deku.posstree.com/essay/mistakes-management/"><![CDATA[<p>人は誰でもミスをします。どれだけ注意して何度確認しても、ミスは発生します。私たちが専門家と呼ぶ人々も、1時間に平均3〜5回のミスをします。</p><p>会社やチームは人々で構成されており、人々が製品やサービスを作ります。そのため、製品やサービスには障害やバグが発生し、会社はこのような問題（ミス）を解決しなければなりません。</p><p>会社では、このようなミスに対処するために<code class="language-plaintext highlighter-rouge">ミス予防</code>と<code class="language-plaintext highlighter-rouge">ミス管理</code>という戦略を使うことができます。</p><ul><li>ミス予防: ミスをしないようにする戦略。ミスに至る経路を遮断し、ミスを犯さないように要求する戦略。</li><li>ミス管理: ミスをしても早く発見して早く修正する戦略。</li></ul><blockquote><p>アメリカの中西部の有名な病院で、2006年に新生児室の赤ちゃんにヘパリンを基準値の1,000倍投与する事件が発生します。1週間にわたって5人の看護師が合計6人の赤ちゃんにそのように投与をし、その赤ちゃんのうち3人が亡くなり、残りの3人も重傷を負いました。さらに驚くべきことに、その病院に2001年にヘパリン過剰投与で似たような事故があり、この事故を契機に安全プログラムを運営しており、その面で優れた病院として認められていたという点です。しかし、調査によるとこの事件は、病院の安全プロセスがあまりにも信頼できるために起こりました。新しい標準運用手順のおかげで薬剤師がヘパリンを準備する際にミスの余地がないと信じた看護師たちは、もはや薬の投与時に確認すべきことを気にしなくなりました。実際、その方法は事故が起きる前までは効果的でした。</p></blockquote><p>この例は<code class="language-plaintext highlighter-rouge">ミス予防</code>戦略を使用しましたが、この戦略をあまり信じすぎたために別のミスが発生しました。</p><p>ミスを予防するために作られた安全プロセスが完璧だと思ったため、看護師たちは薬剤師がヘパリンの準備でミスをしないだろうと信じました。この安全プロセスを信じた看護師たちは、薬の投与時に確認すべきことを気にしないミスを犯してしまい、このような問題が再発することになりました。</p><p><code class="language-plaintext highlighter-rouge">ミス予防</code>はミスをしないようにする戦略ですが、人がミスをしないようにすることは不可能です。したがって、この戦略を実行することは実際には不可能です。</p><p><code class="language-plaintext highlighter-rouge">ミス管理</code>は、ミスがいつでも発生する可能性があると認識し、その代わりミスが最悪になる前に早く発見して早く修正しようとする戦略です。</p><p><code class="language-plaintext highlighter-rouge">ミス予防</code>はミスをした人を非難し、処罰することが多いため、ミスを隠そうとする傾向が多く見られます。</p><p><code class="language-plaintext highlighter-rouge">ミス管理</code>は、ミスがより大きな問題になる前にそれを修正しようとするため、ミスを共有し、そこから学ぼうとする傾向が多く見られます。</p><p>専門家でも1時間に平均3〜5回のミスをしますが、会社が潰れずにサービスが継続される理由は、専門家がミスを早期に発見して迅速な対応を取っているからです。専門家は自分がミスをする可能性があることを認め、ミスがより悪い状況になる前に早く発見して早く修正しようと努力します。</p><p><a href="https://www.researchgate.net/publication/7453312_Organizational_Error_Management_Culture_and_Its_Impact_on_Performance_A_Two-Study_Replication" rel="nofollow noreferrer" target="_blank">Cathy van Dyck, Michael Frese, Markus Baer, &amp; Doris Sonnentag. (2005) Organizational error management culture and its impact on performance: A two-study replication. Journal of Applied Psychology</a>の研究結果を見ると、会社がミス予防よりもミス管理戦略を使用するほど、その企業の革新度が高いと言います。また、この研究では、ミス予防よりもミス管理戦略が会社の収益率を高めると言います。</p><p>人はミスを通じて多くのことを学びます。逆に言えば、ミスをしないと学習できません。したがって、ミス管理戦略ほど学習がよくなります。従業員にミスをしないように言うことは、学習をしないように指示することと同じです。さまざまなミスを経験することを奨励し、ミスの事例を学び、ミス時の対処方法を教える教育がより効果的な教育方法であるという研究結果も多いです。会社でミスを経験するように奨励する必要はありませんが、ミスをしてもそれを通じて学習できる環境を作る必要があります。</p><p>ミス管理戦略は<code class="language-plaintext highlighter-rouge">2次的ミス予防</code>に拡張できます。<code class="language-plaintext highlighter-rouge">2次的ミス予防</code>は既に発生したミスについて学習し、その後「次回はこう行動しよう」と計画を立てることです。</p><p>ミス管理戦略を取るためには、ミスが発生することは早く検知する<code class="language-plaintext highlighter-rouge">モニタリング</code>が必要です。そしてこれを早く<code class="language-plaintext highlighter-rouge">対応</code>しなければなりません。対応後にはこのミスについて<code class="language-plaintext highlighter-rouge">学習</code>をし、同じミスが繰り返されないように<code class="language-plaintext highlighter-rouge">予防</code>措置を取らなければなりません。</p><ul><li>モニタリング &gt; 対応する &gt; 学習する &gt; 予防する</li></ul><p>まとめると、人は誰でもミスをします。専門家でも1時間に3〜5回のミスをします。人々はミスを通じて学習します。ミス予防よりもミスを管理する戦略が企業の革新度を高め、会社の収益率も高めます。したがって、ミスを予防することは不可能だということを認め、ミスを管理できる努力をしなければなりません。代表的なミス管理方法は、ミスが発生するかどうかをモニタリングし、発生時に迅速に対応し、これを通じて学習した後、同じミスが繰り返されないように予防措置を取ることです。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="essay"/><summary type="html"><![CDATA[組織でミスを管理する方法と、ミスに対する戦略がチームに与える影響について説明します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/essay/2024/mistakes-management/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/essay/2024/mistakes-management/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">[Flutter] PageViewウィジェットの使い方</title><link href="https://deku.posstree.com/flutter/widgets/page_view/" rel="alternate" type="text/html" title="[Flutter] PageViewウィジェットの使い方"/><published>2024-10-11T00:00:00+09:00</published><updated>2024-10-21T20:59:58+09:00</updated><id>https://deku.posstree.com/flutter/widgets/widget-page-view-ja</id><content type="html" xml:base="https://deku.posstree.com/flutter/widgets/page_view/"><![CDATA[<div id="contents_list"><h2 id="section">目次</h2><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次</a></li><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#pageview%E3%82%A6%E3%82%A3%E3%82%B8%E3%82%A7%E3%83%83%E3%83%88">PageViewウィジェット</a></li><li><a href="#pageview%E3%82%A6%E3%82%A3%E3%82%B8%E3%82%A7%E3%83%83%E3%83%88%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9">PageViewウィジェットの使い方</a></li><li><a href="#pagecontorller">PageContorller</a></li><li><a href="#scrolldirection%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">scrollDirectionオプション</a></li><li><a href="#onpagechanged%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">onPageChangedオプション</a></li><li><a href="#pageview-builder">PageView Builder</a></li><li><a href="#%E5%AE%8C%E4%BA%86">完了</a></li></ul></div><h2 id="概要">概要</h2><p>Flutterでアプリを開発する時、<code class="language-plaintext highlighter-rouge">TikTok</code>のように画面全体をスクロールする機能を実装したい時があります。この時Flutterが基本的に提供する<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットを使えば簡単に実装できます。</p><p>このブログポストでは、<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットを使う方法について説明します。</p><p>このブログポストで紹介するソースコードは以下のリンクで確認できます。</p><ul><li>GitHub: <a href="https://github.com/dev-yakuza/study-flutter/tree/main/widget/page_view" rel="nofollow noreferrer" target="_blank">https://github.com/dev-yakuza/study-flutter/tree/main/widget/page_view</a></li></ul><h2 id="pageviewウィジェット">PageViewウィジェット</h2><p>Flutterが提供する<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットはスクロールを通じて画面全体を移動するウィジェットです。<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットは<code class="language-plaintext highlighter-rouge">children</code>プロパティを通じて複数のウィジェットを渡してページを構成できます。</p><picture><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" type="image/avif"/><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" type="image/webp"/><img src="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" alt="Flutter - PageView widget scroll vertical"/></picture><p>公式ドキュメントを通じて<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットについて詳しい情報を確認できます。</p><ul><li>公式ドキュメント: <a href="https://api.flutter.dev/flutter/widgets/PageView-class.html" rel="nofollow noreferrer" target="_blank">PageView class</a></li></ul><h2 id="pageviewウィジェットの使い方">PageViewウィジェットの使い方</h2><p><code class="language-plaintext highlighter-rouge">PageView</code>はFlutterが基本的に提供するウィジェットなので、次のように<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットを簡単に使うことができます。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyHomePage</span> <span class="kd">extends</span> <span class="n">StatelessWidget</span> <span class="p">{</span>
  <span class="n">MyHomePage</span><span class="p">({</span><span class="k">super</span><span class="o">.</span><span class="na">key</span><span class="p">});</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">body:</span> <span class="n">PageView</span><span class="p">(</span>
        <span class="nl">children:</span> <span class="p">[</span>
          <span class="n">Container</span><span class="p">(</span>
            <span class="nl">width:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">height:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">red</span><span class="p">,</span>
          <span class="p">),</span>
          <span class="n">Container</span><span class="p">(</span>
            <span class="nl">width:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">height:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">blue</span><span class="p">,</span>
          <span class="p">),</span>
          <span class="n">Container</span><span class="p">(</span>
            <span class="nl">width:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">height:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">green</span><span class="p">,</span>
          <span class="p">),</span>
        <span class="p">],</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットの<code class="language-plaintext highlighter-rouge">children</code>に表示するウィジェットを一緒に渡すと、次のように画面全体をスクロールしてページを移動できるようになります。</p><picture><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_horizontal.gif" type="image/avif"/><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_horizontal.gif" type="image/webp"/><img src="/assets/images/category/flutter/2024/page_view/page_view_scroll_horizontal.gif" alt="Flutter - PageView widget scroll horizontal"/></picture><p>ここでは分かりやすくするために<code class="language-plaintext highlighter-rouge">Container</code>ウィジェットを使用しました。</p><h2 id="pagecontorller">PageContorller</h2><p><code class="language-plaintext highlighter-rouge">PageContorller</code>を使用すると初期に表示するページを決定できます。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyHomePage</span> <span class="kd">extends</span> <span class="n">StatelessWidget</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">pageController</span> <span class="o">=</span> <span class="n">PageController</span><span class="p">(</span>
    <span class="nl">initialPage:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="p">);</span>

  <span class="n">MyHomePage</span><span class="p">({</span><span class="k">super</span><span class="o">.</span><span class="na">key</span><span class="p">});</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">body:</span> <span class="n">PageView</span><span class="p">(</span>
        <span class="nl">controller:</span> <span class="n">pageController</span><span class="p">,</span>
        <span class="nl">children:</span> <span class="p">[</span>
          <span class="p">...</span>
        <span class="p">],</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">PageController</code>の<code class="language-plaintext highlighter-rouge">initialPage</code>プロパティに初めに表示するページのインデックスを設定できます。このように変更してアプリを再実行すると、初めに表示されるページが変更されたことを確認できます。</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="scrolldirectionオプション">scrollDirectionオプション</h2><p><code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットは<code class="language-plaintext highlighter-rouge">scrollDirection</code>オプションを通じてスクロール方向を設定できます。基本的に<code class="language-plaintext highlighter-rouge">scrollDirection</code>オプションは<code class="language-plaintext highlighter-rouge">Axis.horizontal</code>に設定されていますが、これを<code class="language-plaintext highlighter-rouge">Axis.vertical</code>に設定して垂直方向にスクロールできます。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PageView</span><span class="p">(</span>
  <span class="nl">controller:</span> <span class="n">pageController</span><span class="p">,</span>
  <span class="nl">scrollDirection:</span> <span class="n">Axis</span><span class="o">.</span><span class="na">vertical</span><span class="p">,</span>
  <span class="nl">children:</span> <span class="p">[</span>
    <span class="p">...</span>
  <span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div><p>このように修正して実行すると、次のように垂直方向にスクロールできるページを確認できます。</p><picture><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" type="image/avif"/><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" type="image/webp"/><img src="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" alt="Flutter - PageView widget scroll vertical"/></picture><h2 id="onpagechangedオプション">onPageChangedオプション</h2><p><code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットは<code class="language-plaintext highlighter-rouge">onPageChanged</code>オプションを通じてページが変更された時に呼び出されるコールバック関数を設定できます。これを通じてページが変更された時に追加的な作業を行うことができます。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PageView</span><span class="p">(</span>
  <span class="nl">controller:</span> <span class="n">pageController</span><span class="p">,</span>
  <span class="nl">onPageChanged:</span> <span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">print</span><span class="p">(</span><span class="s">'Page changed to </span><span class="si">$index</span><span class="s">'</span><span class="p">);</span>
  <span class="p">},</span>
  <span class="nl">children:</span> <span class="p">[</span>
    <span class="p">...</span>
  <span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div><h2 id="pageview-builder">PageView Builder</h2><p><code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットは<code class="language-plaintext highlighter-rouge">PageView.builder</code>コンストラクタを通じて動的にページを作成することができます。<code class="language-plaintext highlighter-rouge">PageView.builder</code>コンストラクタは<code class="language-plaintext highlighter-rouge">itemBuilder</code>プロパティを通じてページを作成する関数を渡すことができます。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PageView</span><span class="o">.</span><span class="na">builder</span><span class="p">(</span>
  <span class="nl">controller:</span> <span class="n">pageController</span><span class="p">,</span>
  <span class="nl">itemCount:</span> <span class="mi">10</span><span class="p">,</span>
  <span class="nl">itemBuilder:</span> <span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Container</span><span class="p">(</span>
      <span class="nl">width:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
      <span class="nl">height:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
      <span class="nl">color:</span> <span class="n">index</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">Colors</span><span class="o">.</span><span class="na">red</span> <span class="o">:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">blue</span><span class="p">,</span>
    <span class="p">);</span>
  <span class="p">},</span>
<span class="p">)</span>
</code></pre></div></div><h2 id="完了">完了</h2><p>今回のブログポストではFlutterが基本的に提供する<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットを使ってページ全体をスクロールする方法について説明しました。<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットを使うと簡単にページ全体をスクロールでき、<code class="language-plaintext highlighter-rouge">scrollDirection</code>オプションを通じてスクロール方向を設定できます。</p><p><code class="language-plaintext highlighter-rouge">PageView</code>を使うと、<code class="language-plaintext highlighter-rouge">TikTok</code>のように画面全体をスクロールする機能を簡単に実装できます。もし、実装中のアプリが画面全体をスクロールする機能が必要なら、<code class="language-plaintext highlighter-rouge">PageView</code>ウィジェットを使って実装してみてください。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="flutter"/><summary type="html"><![CDATA[Flutterが基本的提供するPageViewウィジェットを使ってページ全体をスクロールする方法について説明します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/flutter/background.png"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/flutter/background.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">[Flutter] Test Matcherを使う</title><link href="https://deku.posstree.com/flutter/test/matcher/" rel="alternate" type="text/html" title="[Flutter] Test Matcherを使う"/><published>2024-10-06T00:00:00+09:00</published><updated>2024-10-09T09:48:41+09:00</updated><id>https://deku.posstree.com/flutter/test/test-matcher-ja</id><content type="html" xml:base="https://deku.posstree.com/flutter/test/matcher/"><![CDATA[<div id="contents_list"><h2 id="section">目次</h2><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次</a></li><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#matcher">Matcher</a></li><li><a href="#%E3%82%88%E3%81%8F%E4%BD%BF%E3%82%8F%E3%82%8C%E3%82%8Bmatcher">よく使われるMatcher</a></li><li><a href="#%E5%AE%8C%E4%BA%86">完了</a></li></ul></div><h2 id="概要">概要</h2><p>Flutterでテストコードを書く際、様々な<code class="language-plaintext highlighter-rouge">Matcher</code>を使うことができます。今回のブログポストでは、Flutterのテストコードで使える<code class="language-plaintext highlighter-rouge">Matcher</code>について紹介し、使い方について説明します。</p><h2 id="matcher">Matcher</h2><p>テストコードでMatcherは、特定の値や条件を検証するための検証ツールです。テストが実際の値と期待する値や状態が一致するかどうかを比較する際、Matcherを使ってより表現力豊かで読みやすいテストコードを書くことができます。</p><p>FlutterのテストコードでMatcherは、<code class="language-plaintext highlighter-rouge">expect</code>文を通じて値が期待する条件に一致するかを確認する際に主に使用されます。Matcherは単純な値の比較だけでなく、より複雑な条件やさまざまなタイプの検証をサポートします。</p><p>例えば:</p><ul><li>equals: 値が特定の値と同じかどうか比較できます。</li><li>isNull: 値がnullかどうかを確認できます。</li><li>contains: コレクションや文字列に特定の項目が含まれているかを検査できます。</li><li>throwsException: 関数が例外をスローするかを確認できます。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">test</span><span class="p">(</span><span class="s">'Example'</span><span class="p">,</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">contains</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">isNotEmpty</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">'Error'</span><span class="p">),</span> <span class="n">throwsException</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div><p>Matcherを使うと、テストコードがより直感的で読みやすくなり、可読性が向上し、複雑な条件や状態を簡潔に処理できます。また、複数の条件を組み合わせたり否定(Negation)することができ、より柔軟なテスト作成が可能です。</p><h2 id="よく使われるmatcher">よく使われるMatcher</h2><p>Flutterの公式ドキュメントを確認すると、使用可能なMatcherを確認できます。.</p><ul><li>公式ドキュメント: <a href="https://pub.dev/documentation/matcher/latest/matcher/matcher-library.html" rel="nofollow noreferrer" target="_blank">https://pub.dev/documentation/matcher/latest/matcher/matcher-library.html</a></li></ul><p>ここでは、よく使われるMatcherを紹介します。</p><ul><li>equals(expected): 与えられた値がexpectedと同じかどうかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">actual</span><span class="p">,</span> <span class="n">equals</span><span class="p">(</span><span class="n">expected</span><span class="p">));</span>
</code></pre></div></div><ul><li>isNot(matcher): 値が与えられたMatcherと一致しないかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">actual</span><span class="p">,</span> <span class="n">isNot</span><span class="p">(</span><span class="n">equals</span><span class="p">(</span><span class="mi">5</span><span class="p">)));</span>
</code></pre></div></div><ul><li>isTrue / isFalse: 値がtrueまたはfalseかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">isTrue</span><span class="p">);</span>
</code></pre></div></div><ul><li>contains(element): コレクションや文字列に特定の要素が含まれているかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="n">contains</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</code></pre></div></div><ul><li>isNull / isNotNull: 値がnullかどうかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">isNull</span><span class="p">);</span>
<span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">isNotNull</span><span class="p">);</span>
</code></pre></div></div><ul><li>greaterThan(value) / lessThan(value): 値が与えられた値より大きいか小さいかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">greaterThan</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
</code></pre></div></div><ul><li>startsWith(prefix) / endsWith(suffix): 文字列が特定の文字列で始まるか終わるかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="s">'Flutter'</span><span class="p">,</span> <span class="n">startsWith</span><span class="p">(</span><span class="s">'Fl'</span><span class="p">));</span>
</code></pre></div></div><ul><li>throwsException / throwsA(matcher): 特定の例外が発生するかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">someFunction</span><span class="p">(),</span> <span class="n">throwsException</span><span class="p">);</span>
</code></pre></div></div><ul><li>allOf(matcher1, matcher2, …): 与えられたMatcherがすべて一致するかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">allOf</span><span class="p">(</span><span class="n">startsWith</span><span class="p">(</span><span class="s">'Fl'</span><span class="p">),</span> <span class="n">contains</span><span class="p">(</span><span class="s">'utt'</span><span class="p">)));</span>
</code></pre></div></div><ul><li>anyOf(matcher1, matcher2, …): 与えられたMatcherのいずれかが一致するかを確認します。</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">anyOf</span><span class="p">(</span><span class="n">equals</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">equals</span><span class="p">(</span><span class="mi">2</span><span class="p">)));</span>
</code></pre></div></div><ul><li>isA<T>(): 値が特定の型であるかを確認します。</T></li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">isA</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;());</span>
</code></pre></div></div><h2 id="完了">完了</h2><p>これで、Flutterのテストコードで使用可能なMatcherについて紹介しました。Matcherを使用すると、テストコードをより直感的で読みやすく書くことができ、さまざまな条件や状態を検証できます。</p><p>Flutterのウィジェットテストで、私は下記のようなコードをよく使っていました。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">titleContainer</span><span class="o">.</span><span class="na">child</span><span class="o">.</span><span class="na">runtimeType</span><span class="p">,</span> <span class="n">Container</span><span class="p">);</span>
</code></pre></div></div><p>しかし、上記のコードは<code class="language-plaintext highlighter-rouge">isA&lt;T&gt;()</code> Matcherを使用すると次のようにより明確に表現できます。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">titleContainer</span><span class="o">.</span><span class="na">child</span><span class="p">,</span> <span class="n">isA</span><span class="p">&lt;</span><span class="n">Container</span><span class="p">&gt;());</span>
</code></pre></div></div><p>皆さんもMatcherを使用してテストコードをより効果的で読みやすく書いてみてください。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="flutter"/><summary type="html"><![CDATA[Flutterのテストコードで使えるMatcherについて紹介し、使い方について説明します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/flutter/background.png"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/flutter/background.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">[GitHub] 複数のGitHubアカウントを1つのマシンで使う方法</title><link href="https://deku.posstree.com/git/user-multiple-github-users/" rel="alternate" type="text/html" title="[GitHub] 複数のGitHubアカウントを1つのマシンで使う方法"/><published>2024-09-25T00:00:00+09:00</published><updated>2024-10-05T20:48:48+09:00</updated><id>https://deku.posstree.com/git/use-multiple-github-users-ja</id><content type="html" xml:base="https://deku.posstree.com/git/user-multiple-github-users/"><![CDATA[<div id="contents_list"><h2 id="section">目次</h2><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次</a></li><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#ssh%E3%82%AD%E3%83%BC%E3%81%AE%E7%94%9F%E6%88%90">SSHキーの生成</a></li><li><a href="#github%E3%81%ABssh%E3%82%AD%E3%83%BC%E7%99%BB%E9%8C%B2">GitHubにSSHキー登録</a></li><li><a href="#config%E3%81%AE%E8%A8%AD%E5%AE%9A">configの設定</a></li><li><a href="#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%B3clone">クローンclone</a></li><li><a href="#git%E3%83%A6%E3%83%BC%E3%82%B6%E8%A8%AD%E5%AE%9A">Gitユーザ設定</a></li><li><a href="#%E5%AE%8C%E4%BA%86">完了</a></li></ul></div><h2 id="概要">概要</h2><p>1つのマシン(PC)で会社のGitHubアカウントと個人のGitHubアカウントの両方を使いたい場合があります。今回のブログ投稿では、複数のGitHubアカウントを1つのマシンで設定して使う方法について説明します。</p><h2 id="sshキーの生成">SSHキーの生成</h2><p>複数のGitHubアカウントを使うためには、SSHキーを生成する必要があります。私は<code class="language-plaintext highlighter-rouge">macOS</code>を使用しているため、<code class="language-plaintext highlighter-rouge">macOS</code>を基準に説明します。</p><p>まず、<code class="language-plaintext highlighter-rouge">.ssh</code>ディレクトリに移動します。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/.ssh
</code></pre></div></div><p>その後、<code class="language-plaintext highlighter-rouge">ssh-keygen</code>コマンドを使用してSSHキーを生成します。まず、個人アカウント用のSSHキーを生成します。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"GITHUB_PERSONAL_ACCOUNT_EMAIL"</span>
</code></pre></div></div><p>すると、次のようにどの名前でキーを保存するか尋ねられます。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Enter file <span class="k">in </span>which to save the key <span class="o">(</span>/Users/user_name/.ssh/id_rsa<span class="o">)</span>:
</code></pre></div></div><p>私は区別しやすくするため、<code class="language-plaintext highlighter-rouge">id_rsa_personal</code>という名前で保存しました。その後、会社アカウント用のSSHキーを生成します。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"GITHUB_COMPANY_ACCOUNT_EMAIL"</span>
</code></pre></div></div><p>同様に、どの名前でキーを保存するか尋ねられます。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Enter file <span class="k">in </span>which to save the key <span class="o">(</span>/Users/user_name/.ssh/id_rsa<span class="o">)</span>:
</code></pre></div></div><p>私は区別しやすくするため、<code class="language-plaintext highlighter-rouge">id_rsa_work</code>という名前で保存しました。</p><h2 id="githubにsshキー登録">GitHubにSSHキー登録</h2><p>生成したSSHキーをGitHubに登録する必要があります。まず、個人アカウントにSSHキーを登録してみましょう。</p><p>次のコマンドを実行すると、SSHキーを確認できます。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> ~/.ssh/id_rsa_personal.pub
</code></pre></div></div><p>表示されたSSHキーをコピーし、GitHubのウェブサイトにアクセスして<code class="language-plaintext highlighter-rouge">Settings</code> -&gt; <code class="language-plaintext highlighter-rouge">SSH and GPG keys</code> -&gt; <code class="language-plaintext highlighter-rouge">New SSH key</code>をクリックしてSSHキーを登録します。この時、GitHubのウェブサイトには個人アカウントでログインしている必要があります。</p><picture><source srcset="/assets/images/category/git/2024/user-multiple-github-users/github_register_new_ssh_key.avif" type="image/avif"/><source srcset="/assets/images/category/git/2024/user-multiple-github-users/github_register_new_ssh_key.webp" type="image/webp"/><img src="/assets/images/category/git/2024/user-multiple-github-users/github_register_new_ssh_key.png" alt="Use multiple GitHub users in local machine: Register new SSH key"/></picture><p>これと同様の方法で会社アカウントにSSHキーを登録します。この時、GitHubのウェブサイトには会社アカウントでログインしている必要があります。</p><h2 id="configの設定">configの設定</h2><p>このように設定したSSHキーを使ってGitHubのアカウントを区別するために、<code class="language-plaintext highlighter-rouge">~/.ssh/config</code>ファイルを次のように編集します。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># personal</span>

Host personal
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa_personal

<span class="c"># work</span>

Host github.com
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa_work
</code></pre></div></div><p>そして、ターミナルで次のコマンドを実行してSSHキーが正しく登録されているか確認します。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-T</span> git@personal
</code></pre></div></div><p>次のようなメッセージが表示されたら、正常に登録されていることになります。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hi GITHUB_PERSONAL_ACCOUNT! You<span class="s1">'ve successfully authenticated, but GitHub does not provide shell access.
</span></code></pre></div></div><p>同様に、会社アカウントについても次のコマンドを実行してSSHキーが正しく登録されているか確認します。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-T</span> git@github.com
</code></pre></div></div><p>同じく、次のようなメッセージが表示されたら、正常に登録されていることになります。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hi GITHUB_COMPANY_ACCOUNT! You<span class="s1">'ve successfully authenticated, but GitHub does not provide shell access.
</span></code></pre></div></div><h2 id="クローンclone">クローン(clone)</h2><p>これでGitHubからプロジェクトをクローンする際、次のように個人アカウントと会社アカウントを区別して使うことができるようになります。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Personal account</span>
git clone git@personal:GITHUB_PERSONAL_ACCOUNT/REPOSITORY.git
<span class="c"># Company account</span>
git clone git@github.com:GITHUB_COMPANY_ACCOUNT/REPOSITORY.git
</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="gitユーザ設定">Gitユーザ設定</h2><p>次のコマンドを実行すると、<code class="language-plaintext highlighter-rouge">Git</code>に設定された<code class="language-plaintext highlighter-rouge">user.name</code>と<code class="language-plaintext highlighter-rouge">user.email</code>を確認できます。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check user name</span>
git config user.name
<span class="c"># Check user email</span>
git config user.email
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">Git</code>の<code class="language-plaintext highlighter-rouge">Global</code>設定にユーザ情報を登録していない場合、コマンドを実行した時、何も表示されないはずです。</p><p><code class="language-plaintext highlighter-rouge">.gitconfig</code>ファイルを編集して<code class="language-plaintext highlighter-rouge">Global</code>ユーザを設定し、特定のフォルダで使うユーザを設定することができます。</p><p>まず、<code class="language-plaintext highlighter-rouge">~/.gitconfig-work</code>ファイルと<code class="language-plaintext highlighter-rouge">~/.gitconfig-personal</code>ファイルを作成し、次のように編集します。</p><ul><li><code class="language-plaintext highlighter-rouge">~/.gitconfig-work</code></li></ul><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># code ~/.gitconfig-work</span>
<span class="o">[</span>user]
	name <span class="o">=</span> <span class="s2">"GITHUB_COMPANY_ACCOUNT_USER_NAME"</span>
	email <span class="o">=</span> GITHUB_COMPANY_ACCOUNT_EMAIL
</code></pre></div></div><ul><li><code class="language-plaintext highlighter-rouge">~/.gitconfig-personal</code></li></ul><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># code ~/.gitconfig-personal</span>
<span class="o">[</span>user]
    name <span class="o">=</span> <span class="s2">"GITHUB_PERSONAL_ACCOUNT_USER_NAME"</span>
    email <span class="o">=</span> GITHUB_PERSONAL_ACCOUNT_EMAIL
</code></pre></div></div><p>その後、<code class="language-plaintext highlighter-rouge">.gitconfig</code>ファイルを次のように編集します。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># code ~/.gitconfig</span>

<span class="c"># This is for Global settings</span>
<span class="o">[</span>user]
	name <span class="o">=</span> <span class="s2">"GITHUB_COMPANY_ACCOUNT_USER_NAME"</span>
	email <span class="o">=</span> GITHUB_COMPANY_ACCOUNT_EMAIL
<span class="c"># For company account</span>
<span class="o">[</span>includeIf <span class="s2">"gitdir:~/WORK/"</span><span class="o">]</span>
    path <span class="o">=</span> ~/.gitconfig-work
<span class="c"># For personal account</span>
<span class="o">[</span>includeIf <span class="s2">"gitdir:~/PERSONAL/"</span><span class="o">]</span>
    path <span class="o">=</span> ~/.gitconfig-personal
</code></pre></div></div><p>この設定では、<code class="language-plaintext highlighter-rouge">Git</code>の<code class="language-plaintext highlighter-rouge">Global</code>ユーザとして会社アカウントを設定しました。<code class="language-plaintext highlighter-rouge">WORK</code>フォルダでは会社アカウントを使うようにして、<code class="language-plaintext highlighter-rouge">PERSONAL</code>フォルダでは個人アカウントを使うように設定しました。</p><p>うまく設定されたか確認するために、<code class="language-plaintext highlighter-rouge">PERSONAL</code>フォルダに移動します。その後、次のコマンドを実行してユーザ情報を確認します。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/PERSONAL
git config user.name
git config user.email
</code></pre></div></div><p>すると、次のように<code class="language-plaintext highlighter-rouge">Git</code>の<code class="language-plaintext highlighter-rouge">Global</code>ユーザ情報が表示されます。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># git config user.name</span>
GITHUB_COMPANY_ACCOUNT_USER_NAME
<span class="c"># git config user.email</span>
GITHUB_COMPANY_ACCOUNT_EMAIL
</code></pre></div></div><p>これは、現在のフォルダ(<code class="language-plaintext highlighter-rouge">PERSONAL</code>)に<code class="language-plaintext highlighter-rouge">Git</code>プロジェクトが存在しないため、単に<code class="language-plaintext highlighter-rouge">Git</code>の<code class="language-plaintext highlighter-rouge">Global</code>ユーザ情報が表示されているだけです。</p><p>そしたら、次のように実際に<code class="language-plaintext highlighter-rouge">Git</code>プロジェクトを作成し、<code class="language-plaintext highlighter-rouge">Git</code>のユーザ情報を確認してみましょう。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> ~/PERSONAL/temp
<span class="nb">cd</span> ~/PERSONAL/temp
git init
git config user.name
git config user.email
</code></pre></div></div><p>すると、次のように<code class="language-plaintext highlighter-rouge">Git</code>の個人アカウントのユーザ情報が表示されます。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GITHUB_PERSONAL_ACCOUNT_USER_NAME
GITHUB_COMPANY_ACCOUNT_EMAIL
</code></pre></div></div><p>これは私たちが<code class="language-plaintext highlighter-rouge">.gitconfig</code>に設定した内容が反映された結果です。</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>includeIf <span class="s2">"gitdir:~/PERSONAL/"</span><span class="o">]</span>
    path <span class="o">=</span> ~/.gitconfig-personal
</code></pre></div></div><h2 id="完了">完了</h2><p>これで1つのマシンで複数のGitHubアカウントを使う方法について説明しました。これにより、複数のGitHubアカウントを使いながら、プロジェクトを管理する際に便利になると思います。</p><p>また、<code class="language-plaintext highlighter-rouge">.gitconfig</code>を使って特定のフォルダで使うユーザを設定する方法についても説明しました。これにより、<code class="language-plaintext highlighter-rouge">Git</code>のユーザ情報を簡単に変更できるようになります。</p><p>皆さんも複数の<code class="language-plaintext highlighter-rouge">GitHub</code>アカウントを使う必要がある場合は、このブログ投稿を参考にして複数の<code class="language-plaintext highlighter-rouge">GitHub</code>アカウントを設定して使ってみてください。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="git"/><summary type="html"><![CDATA[1つのマシン(PC)で複数のGitHubアカウントを設定して使う方法について説明します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/git/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/git/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">プログラマーの学習法</title><link href="https://deku.posstree.com/essay/studying-way-for-programmer/" rel="alternate" type="text/html" title="プログラマーの学習法"/><published>2024-09-18T00:00:00+09:00</published><updated>2024-10-10T09:01:07+09:00</updated><id>https://deku.posstree.com/essay/studying-way-for-programmer-ja</id><content type="html" xml:base="https://deku.posstree.com/essay/studying-way-for-programmer/"><![CDATA[<p>次はプログラマーが新しい言語を学ぶ時、使えば良い学習方法です。</p><h2 id="何を作るか考えながらチュートリアルを読む">何を作るか考えながらチュートリアルを読む</h2><p>新しい言語のチュートリアルを読む時、具体的なプログラムを考えながら読んで、プログラムを書けると思ったら読むのを止めて、そのプログラムを書きます。現在読んでいるチュートリアルで書ける部分を完成すると、読むのを止めた所に戻って再度読みます。もちろん、書くプログラムの次の部分を考えながら読みます。</p><p>例えば、’タスクリストを作る’、’単語の数を数える’などといった具体的なプログラムを目標にしてチュートリアルを読みます。こうして目標を設定してチュートリアルを読むと、’この言語ではループはどう書くのか？’、’出力はどうするのか？’などといった質問を持ち、積極的に読むようになります。</p><p>この読み方を<code class="language-plaintext highlighter-rouge">積極的読み</code>と言います。積極的読みは具体的な質問や目的を持って読む方法を言います。教育学では受動的に読むより積極的に読む方が理解度や記憶力などに肯定的な効果を見せると言います。</p><h3 id="sq3r読書法">SQ3R読書法</h3><p>この積極的読み方の中で最も代表的な方法は<code class="language-plaintext highlighter-rouge">SQ3R(Survey, Question, Read, Recite, Review)読書法</code>です。SQ3Rはアメリカの教育心理学者ロビンソン(Francis P. Robinson)が効果的学習法(Effective Study, 1946)で初めて紹介した方法です。</p><p>SQ3R読書法は以下のような段階で進行されます。</p><ol><li>見渡す(Survey)</li></ol><p>見渡す(Surbey)とは本を読む前に本全体と各章の内容を全体的に素早く見渡し、主要概念の間の関係を把握することを言います。見渡すは以下のような方法で進行されます。</p><ul><li>学ぶ章(chapter)の大見出しを覚える。</li><li>その章の紹介、概要、学習目標などを素早く読む。</li><li>中見出しと小見出し、図表の見出しに注目する。</li><li>太字、斜体、下線部分など重要概念を示す手がかりを見つける。</li><li>章別要約を読む。</li><li>主要概念リストを見る。</li></ul><ol><li>質問する(Question)</li></ol><p>質問する(Qustion)とは見渡すを基に質問を投げることを言います。質問する方法は以下の通りです。</p><ul><li>タイトルに出てくる概念の定義に関する質問を投げる: ⚪︎⚪︎は何か?</li><li>概念の特性に関する質問を投げる: ⚪︎⚪︎の特性は何か?</li><li>概念同士の関係に関する質問を投げる: ⚪︎⚪︎と△△の関係は何か?</li><li>タイトルの表現を活用した質問を投げる: タイトル - ⚪︎⚪︎の必要性 → 質問 - ⚪︎⚪︎の必要性は何か?</li><li>自分の背景知識に関する質問を投げる: 私は⚪︎⚪︎についてどれくらい知っているか?</li></ul><p>質問するはこうして本を読みながら質問をすることです。こうして本を読みながら質問した内容を別途書き留めて学習中に確認することも良い方法です。</p><ol><li>読む(Read)</li></ol><p>読む(Read)とは1段階と2段階を基に本文を読みながら自分が投げた質問に対する答えを探していく過程を言います。質問に対する答えを探すために本を読むことで、本を読んだ後に内容を少し長く記憶できるようになります。これは試験対策においても内容をより正確に記憶するのに大きな助けになります。</p><ol><li>暗唱する(Recite)</li></ol><p>暗唱する(Recite)とは読んだ内容に対する忘却を防ぐための重要な過程です。暗唱するは自分が知っていると思うことを直接書き込むことで、自分が実際に内容をどれだけ理解しているかを確認する方法です。暗唱するは以下のような方法で進行されます。</p><ul><li>自分が読んだ内容を振り返る。</li><li>本を閉じて、その質問に対する答えを大声で朗読するか、紙に書く。</li><li>答えはできるだけ完全に書くようにし、理解を助けるために概要、図表、図式、式の形で書くこともある。</li><li>本や本を読みながら書いたノートと比較して、答えが正しいかどうかを確認する。</li></ul><ol><li>復習する(Review)</li></ol><p>復習する(Review)とは学習した内容を定期的にそして時折再度暗唱することを言います。復習するは特に試験対策において非常に効果的な方法です。復習するは以下のような方法で進行されます。</p><ul><li>本文とノートを再度読みながら重要な部分を確認する。</li><li>難しい部分は別途暗記カードを作るなどの方法を使って記憶する。</li><li>復習した内容をテストして、自分の理解度を確認する。</li><li>学んだ部分に関して自分なりの目次や概念マップを作る。</li></ul><h2 id="勉強する時に標準ライブラリのソースコードを読む">勉強する時に標準ライブラリのソースコードを読む</h2><p>良いコードを書くためには良いコードを読む必要があります。標準ライブラリは通常、その言語を発明した人やその言語のスタイルに従う人々が書きます。そのため標準ライブラリはその言語らしいコードで構成されており、このようなコードを通じてその言語の文化やスタイルを学ぶことができます。</p><p>このような文化やスタイルに従うことはプログラムの機能の違いはもたらさないかもしれませんが、プログラムの作成コストや保守コストを削減することができます。</p><h2 id="勉強中に他の人のコードに自分が必要な機能を追加する">勉強中に他の人のコードに自分が必要な機能を追加する</h2><p>自分が勉強している言語でのオープンソースに自分が必要な機能を追加してみます。実際に使用しているコードを変更してみることで、その言語をよく知っている人々からフィードバックを受けることができ、オープンソースコミュニティと交流することができます。</p><h2 id="専門性を効果的に引き出す専門家になる">専門性を効果的に引き出す専門家になる</h2><p>専門家から秘訣を受け継ぎ、その秘訣を実行してみます。周囲の専門家の専門性を引き出し、適用することが自分の専門性を早く高める方法です。専門家に秘訣を尋ねるときは<code class="language-plaintext highlighter-rouge">プログラミング言語を早く学ぶ秘訣は何ですか?</code>と尋ねると、あまり有用な答えを得ることができません。専門家はこのような質問を受けると一般的な答えをしたり、実際の行動と異なる理論的な答えをする傾向があります。</p><p>この場合、認知的作業分析を活用すると専門家の専門性を引き出すことができます。</p><ul><li><a href="https://deku.posstree.com/essay/cognitibe-task-analysis/" target="\_blank">認知的作業分析による専門家の専門性の引き出し</a></li></ul><p>認知的作業分析を活用することで専門家の秘訣を尋ねる時は<code class="language-plaintext highlighter-rouge">具体的な出来事について話すように促す</code>ことが重要です。最近学んだ言語が何か、その言語を学ぶために時間通りにした行動は何かなどを尋ねながら暗黙的な意思決定と状況判断が何かを把握することです。</p><p>何かをうまくしたいと思ったら、すでにうまくしている人を観察し、インタビューすることが大きな助けになります。</p><h2 id="完了">完了</h2><p>このブログポストでは、プログラマーができる学習方法について調べてみました。もし新しい言語を学んでいるか、プログラマーになるために努力している方がいる場合は、この記事を参考にして勉強してみてください。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="essay"/><summary type="html"><![CDATA[プログラマーが新しい言語を学ぶ時、できる学習方法には何があるかを調べてみましょう。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/essay/2024/studying-way-for-programmer/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/essay/2024/studying-way-for-programmer/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ja"><title type="html">[Flutter] httpパッケージのMultipartRequestでファイルをアップロードする</title><link href="https://deku.posstree.com/flutter/http_multipartrequest/" rel="alternate" type="text/html" title="[Flutter] httpパッケージのMultipartRequestでファイルをアップロードする"/><published>2024-09-17T00:00:00+09:00</published><updated>2024-10-06T11:17:37+09:00</updated><id>https://deku.posstree.com/flutter/http-multipartrequest-ja</id><content type="html" xml:base="https://deku.posstree.com/flutter/http_multipartrequest/"><![CDATA[<div id="contents_list"><h2 id="section">目次</h2><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次</a></li><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#multipartrequest%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B">MultipartRequestでファイルをアップロードする</a></li><li><a href="#%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89">テストコード</a></li><li><a href="#%E5%AE%8C%E4%BA%86">完了</a></li></ul></div><h2 id="概要">概要</h2><p>Flutterでhttpパッケージを使ってファイルをアップロードする必要がある場合があります。この場合、httpパッケージの<code class="language-plaintext highlighter-rouge">MultipartRequest</code>を使うとファイルをアップロードできます。このブログポストでは、<code class="language-plaintext highlighter-rouge">MultipartRequest</code>を使ってファイルをアップロードする方法と、それをテストする方法について説明します。</p><h2 id="multipartrequestでファイルをアップロードする">MultipartRequestでファイルをアップロードする</h2><p>次は実際にhttpパッケージの<code class="language-plaintext highlighter-rouge">MultipartRequest</code>を使ってファイルをアップロードする例です。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ExampleAPI</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">token</span><span class="p">;</span>
  <span class="kd">final</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span> <span class="n">httpClient</span><span class="p">;</span>

  <span class="n">ExampleAPI</span><span class="p">({</span>
    <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">token</span><span class="p">,</span>
    <span class="nd">@visibleForTesting</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="o">?</span> <span class="n">mockClient</span><span class="p">,</span>
  <span class="p">})</span> <span class="o">:</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="n">mockClient</span> <span class="o">??</span>
            <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">(</span>
              <span class="s">"POST"</span><span class="p">,</span>
              <span class="kt">Uri</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'</span><span class="si">${ENV.apiServer}</span><span class="s">/api/app'</span><span class="p">),</span>
            <span class="p">);</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="n">InfoData</span><span class="p">&gt;</span> <span class="n">sendData</span><span class="p">({</span>
    <span class="kd">required</span> <span class="n">DateTime</span> <span class="n">date</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">int</span> <span class="n">status</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">int</span> <span class="n">docType</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">note</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">passportImage</span><span class="p">,</span>
    <span class="kt">String</span><span class="o">?</span> <span class="n">certificationImage</span><span class="p">,</span>
    <span class="kt">List</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">&gt;</span><span class="o">?</span> <span class="n">receiptImages</span><span class="p">,</span>
  <span class="p">})</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="n">data</span><span class="p">[</span><span class="s">'date'</span><span class="p">]</span> <span class="o">=</span> <span class="n">dateFormatForSearch</span><span class="p">(</span><span class="n">date</span><span class="p">);</span>
    <span class="n">data</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="si">$status</span><span class="s">'</span><span class="p">;</span>
    <span class="n">data</span><span class="p">[</span><span class="s">'doc_type'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="si">$docType</span><span class="s">'</span><span class="p">;</span>
    <span class="n">data</span><span class="p">[</span><span class="s">'note'</span><span class="p">]</span> <span class="o">=</span> <span class="n">note</span><span class="p">;</span>

    <span class="kt">List</span><span class="p">&lt;</span><span class="n">MultipartFile</span><span class="p">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'passport_image'</span><span class="p">,</span> <span class="n">passportImage</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">jpnCertImg</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">jpnCertImg</span> <span class="o">!=</span> <span class="s">''</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'cert_img'</span><span class="p">,</span> <span class="n">certificationImage</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">receiptImages</span><span class="o">?.</span><span class="na">isNotEmpty</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="n">image</span> <span class="k">in</span> <span class="n">receiptImages</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">image</span> <span class="o">==</span> <span class="s">''</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
        <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'receipt_img[]'</span><span class="p">,</span> <span class="n">image</span><span class="p">));</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">httpClient</span><span class="o">.</span><span class="na">headers</span><span class="o">.</span><span class="na">addAll</span><span class="p">({</span><span class="s">'Authorization'</span><span class="o">:</span> <span class="s">'Bearer </span><span class="si">$token</span><span class="s">'</span><span class="p">});</span>
    <span class="n">httpClient</span><span class="o">.</span><span class="na">fields</span><span class="o">.</span><span class="na">addAll</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
    <span class="n">httpClient</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">addAll</span><span class="p">(</span><span class="n">files</span><span class="p">);</span>

    <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="k">await</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">send</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">Response</span><span class="o">.</span><span class="na">fromStream</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span><span class="o">.</span><span class="na">then</span><span class="p">((</span><span class="n">response</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">final</span> <span class="n">data</span> <span class="o">=</span> <span class="n">jsonDecode</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">decode</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="na">bodyBytes</span><span class="p">));</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'success'</span><span class="p">]</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">InfoData</span><span class="o">.</span><span class="na">fromJson</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'data'</span><span class="p">]);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">'Unknown response'</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div><p>httpパッケージの<code class="language-plaintext highlighter-rouge">MultipartRequest</code>を使ってファイルをアップロードする部分をもう少し詳しく見ていきます。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ExampleAPI</span><span class="p">({</span>
  <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">token</span><span class="p">,</span>
  <span class="nd">@visibleForTesting</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="o">?</span> <span class="n">mockClient</span><span class="p">,</span>
<span class="p">})</span> <span class="o">:</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="n">mockClient</span> <span class="o">??</span>
          <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">(</span>
            <span class="s">"POST"</span><span class="p">,</span>
            <span class="kt">Uri</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'</span><span class="si">${ENV.apiServer}</span><span class="s">/api/app'</span><span class="p">),</span>
          <span class="p">);</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">MultiPartRequest</code>でファイルをアップロードするには、まず<code class="language-plaintext highlighter-rouge">http.MultipartRequest</code>のインスタンスを作成する必要があります。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="p">{};</span>
<span class="n">data</span><span class="p">[</span><span class="s">'date'</span><span class="p">]</span> <span class="o">=</span> <span class="n">dateFormatForSearch</span><span class="p">(</span><span class="n">date</span><span class="p">);</span>
<span class="n">data</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="si">$status</span><span class="s">'</span><span class="p">;</span>
<span class="n">data</span><span class="p">[</span><span class="s">'doc_type'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="si">$docType</span><span class="s">'</span><span class="p">;</span>
<span class="n">data</span><span class="p">[</span><span class="s">'note'</span><span class="p">]</span> <span class="o">=</span> <span class="n">note</span><span class="p">;</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">MultipartRequest</code>はファイル以外にも他の情報を一緒に送信できます。そのため、一緒に送信する他の情報を準備しました。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">List</span><span class="p">&lt;</span><span class="n">MultipartFile</span><span class="p">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="p">[];</span>
<span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'passport_image'</span><span class="p">,</span> <span class="n">passportImage</span><span class="p">));</span>
<span class="k">if</span> <span class="p">(</span><span class="n">jpnCertImg</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">jpnCertImg</span> <span class="o">!=</span> <span class="s">''</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'cert_img'</span><span class="p">,</span> <span class="n">certificationImage</span><span class="p">));</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="n">receiptImages</span><span class="o">?.</span><span class="na">isNotEmpty</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="n">image</span> <span class="k">in</span> <span class="n">receiptImages</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">image</span> <span class="o">==</span> <span class="s">''</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
    <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'receipt_img[]'</span><span class="p">,</span> <span class="n">image</span><span class="p">));</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div><p>ファイルを設定する関数はアップロードしたいファイルのパスを受け取ります。受け取ったファイルのパスを<code class="language-plaintext highlighter-rouge">http.MultipartFile.fromPath</code>を使って<code class="language-plaintext highlighter-rouge">MultipartFile</code>に変換します。</p><p>複数のファイルをアップロードする場合は、<code class="language-plaintext highlighter-rouge">receipt_img[]</code>のように<code class="language-plaintext highlighter-rouge">[]</code>を使って配列で渡すことができます。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">httpClient</span><span class="o">.</span><span class="na">headers</span><span class="o">.</span><span class="na">addAll</span><span class="p">({</span><span class="s">'Authorization'</span><span class="o">:</span> <span class="s">'Bearer </span><span class="si">$token</span><span class="s">'</span><span class="p">});</span>
<span class="n">httpClient</span><span class="o">.</span><span class="na">fields</span><span class="o">.</span><span class="na">addAll</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
<span class="n">httpClient</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">addAll</span><span class="p">(</span><span class="n">files</span><span class="p">);</span>
</code></pre></div></div><p>次はファイルをアップロードするために<code class="language-plaintext highlighter-rouge">Bearer</code>トークンをヘッダーに設定し、準備したデータを<code class="language-plaintext highlighter-rouge">fields</code>に追加します。準備したファイルは<code class="language-plaintext highlighter-rouge">files</code>に追加します。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="k">await</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">send</span><span class="p">();</span>
<span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">Response</span><span class="o">.</span><span class="na">fromStream</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span><span class="o">.</span><span class="na">then</span><span class="p">((</span><span class="n">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">data</span> <span class="o">=</span> <span class="n">jsonDecode</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">decode</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="na">bodyBytes</span><span class="p">));</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'success'</span><span class="p">]</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">InfoData</span><span class="o">.</span><span class="na">fromJson</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'data'</span><span class="p">]);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">'Unknown response'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div><p>最後はデータを送信し、レスポンスを受け取ります。受け取ったレスポンスをアプリに合わせて処理すれば完了です。</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="テストコード">テストコード</h2><p><code class="language-plaintext highlighter-rouge">http</code>パッケージの<code class="language-plaintext highlighter-rouge">MultipartRequest</code>を使ってファイルをアップロードする関数をテストする方法について説明します。</p><p>まず、すべてのテストコードは次のようになります。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nd">@GenerateMocks</span><span class="p">([</span><span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">])</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">mockHttpMultipartRequest</span> <span class="o">=</span> <span class="n">CustomMockMultipartRequest</span><span class="p">();</span>
  <span class="n">setUp</span><span class="p">(()</span> <span class="p">{</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">headers</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">fields</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">when</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">send</span><span class="p">())</span><span class="o">.</span><span class="na">thenAnswer</span><span class="p">(</span>
      <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="kd">final</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">jsonEncode</span><span class="p">({</span>
          <span class="s">'success'</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
          <span class="s">'data'</span><span class="o">:</span> <span class="p">{</span>
            <span class="s">'amount'</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
            <span class="s">'commission'</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
          <span class="p">}</span>
        <span class="p">});</span>
        <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">value</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">encode</span><span class="p">(</span><span class="n">responseBody</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">StreamedResponse</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>
  <span class="p">});</span>

  <span class="n">test</span><span class="p">(</span><span class="s">'Success'</span><span class="p">,</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">TaxRefundAPI</span><span class="p">(</span>
      <span class="nl">token:</span> <span class="s">'test_token'</span><span class="p">,</span>
      <span class="nl">client:</span> <span class="n">mockHttpMultipartRequest</span><span class="p">,</span>
    <span class="p">)</span><span class="o">.</span><span class="na">sendData</span><span class="p">(</span>
      <span class="nl">permitDate:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'2022-01-01 01:04'</span><span class="p">),</span>
      <span class="nl">status:</span> <span class="mi">91</span><span class="p">,</span>
      <span class="nl">docType:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="nl">note:</span> <span class="s">''</span><span class="p">,</span>
      <span class="nl">passportImg:</span> <span class="s">'assets/images/passport_sample.jpg'</span><span class="p">,</span>
      <span class="nl">certificationImage:</span> <span class="s">'assets/images/placeholder.png'</span><span class="p">,</span>
      <span class="nl">receiptImages:</span> <span class="p">[</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
      <span class="p">],</span>
    <span class="p">);</span>

    <span class="c1">// Request parameters</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">headers</span><span class="p">,</span>
      <span class="p">{</span><span class="s">'Authorization'</span><span class="o">:</span> <span class="s">'Bearer test_token'</span><span class="p">},</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">fields</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="s">'date'</span><span class="o">:</span> <span class="s">'2022-01-01'</span><span class="p">,</span>
        <span class="s">'status'</span><span class="o">:</span> <span class="s">'91'</span><span class="p">,</span>
        <span class="s">'doc_type'</span><span class="o">:</span> <span class="s">'2'</span><span class="p">,</span>
        <span class="s">'note'</span><span class="o">:</span> <span class="s">''</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">length</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'passport_image'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span> <span class="s">'passport_sample.jpg'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'cert_img'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span> <span class="s">'placeholder.png'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>

    <span class="c1">// Response</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">isA</span><span class="p">&lt;</span><span class="n">InfoData</span><span class="p">&gt;());</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="na">toMap</span><span class="p">(),</span> <span class="p">{</span>
      <span class="s">'amount'</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
      <span class="s">'commission'</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
    <span class="p">});</span>
  <span class="p">});</span>

  <span class="n">test</span><span class="p">(</span><span class="s">'Throw error when response is failed'</span><span class="p">,</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">when</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">send</span><span class="p">())</span><span class="o">.</span><span class="na">thenAnswer</span><span class="p">(</span>
      <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="kd">final</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">jsonEncode</span><span class="p">({</span>
          <span class="s">'success'</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="p">});</span>
        <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">value</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">encode</span><span class="p">(</span><span class="n">responseBody</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">StreamedResponse</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>

    <span class="k">try</span> <span class="p">{</span>
      <span class="k">await</span> <span class="n">TaxRefundAPI</span><span class="p">(</span>
        <span class="nl">token:</span> <span class="s">'test_token'</span><span class="p">,</span>
        <span class="nl">client:</span> <span class="n">mockHttpMultipartRequest</span><span class="p">,</span>
      <span class="p">)</span><span class="o">.</span><span class="na">sendData</span><span class="p">(</span>
        <span class="nl">permitDate:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'2022-01-01 01:04'</span><span class="p">),</span>
        <span class="nl">status:</span> <span class="mi">91</span><span class="p">,</span>
        <span class="nl">docType:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nl">note:</span> <span class="s">''</span><span class="p">,</span>
        <span class="nl">passportImg:</span> <span class="s">'assets/images/passport_sample.jpg'</span><span class="p">,</span>
        <span class="nl">certificationImage:</span> <span class="s">'assets/images/placeholder.png'</span><span class="p">,</span>
        <span class="nl">receiptImages:</span> <span class="p">[</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="p">],</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="p">(),</span> <span class="s">'Exception: Unknown response'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">CustomMockMultipartRequest</span> <span class="kd">extends</span> <span class="n">MockMultipartRequest</span> <span class="p">{</span>
  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">List</span><span class="p">&lt;</span><span class="n">MultipartFile</span><span class="p">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="p">[];</span>
<span class="p">}</span>
</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><p>もっと詳しく見ていきましょう。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nd">@GenerateMocks</span><span class="p">([</span><span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">])</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">mockHttpMultipartRequest</span> <span class="o">=</span> <span class="n">CustomMockMultipartRequest</span><span class="p">();</span>
  <span class="n">setUp</span><span class="p">(()</span> <span class="p">{</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">headers</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">fields</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">when</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">send</span><span class="p">())</span><span class="o">.</span><span class="na">thenAnswer</span><span class="p">(</span>
      <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="kd">final</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">jsonEncode</span><span class="p">({</span>
          <span class="s">'success'</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
          <span class="s">'data'</span><span class="o">:</span> <span class="p">{</span>
            <span class="s">'amount'</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
            <span class="s">'commission'</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
          <span class="p">}</span>
        <span class="p">});</span>
        <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">value</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">encode</span><span class="p">(</span><span class="n">responseBody</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">StreamedResponse</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>
  <span class="p">});</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">CustomMockMultipartRequest</span> <span class="kd">extends</span> <span class="n">MockMultipartRequest</span> <span class="p">{</span>
  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">List</span><span class="p">&lt;</span><span class="n">MultipartFile</span><span class="p">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="p">[];</span>
<span class="p">}</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">DI(Dependency Injection)</code>を使っているため、テスト用の<code class="language-plaintext highlighter-rouge">Mock</code>オブジェクトを作成し、<code class="language-plaintext highlighter-rouge">setUp</code>関数を使って<code class="language-plaintext highlighter-rouge">Mock</code>オブジェクトを初期化しました。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nd">@GenerateMocks</span><span class="p">([</span><span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">])</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">mockHttpMultipartRequest</span> <span class="o">=</span> <span class="n">CustomMockMultipartRequest</span><span class="p">();</span>
  <span class="p">...</span>
  <span class="n">test</span><span class="p">(</span><span class="s">'Success'</span><span class="p">,</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">TaxRefundAPI</span><span class="p">(</span>
      <span class="nl">token:</span> <span class="s">'test_token'</span><span class="p">,</span>
      <span class="nl">client:</span> <span class="n">mockHttpMultipartRequest</span><span class="p">,</span>
    <span class="p">)</span><span class="o">.</span><span class="na">sendData</span><span class="p">(</span>
      <span class="nl">permitDate:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'2022-01-01 01:04'</span><span class="p">),</span>
      <span class="nl">status:</span> <span class="mi">91</span><span class="p">,</span>
      <span class="nl">docType:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="nl">note:</span> <span class="s">''</span><span class="p">,</span>
      <span class="nl">passportImg:</span> <span class="s">'assets/images/passport_sample.jpg'</span><span class="p">,</span>
      <span class="nl">certificationImage:</span> <span class="s">'assets/images/placeholder.png'</span><span class="p">,</span>
      <span class="nl">receiptImages:</span> <span class="p">[</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
      <span class="p">],</span>
    <span class="p">);</span>

    <span class="c1">// Request parameters</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">headers</span><span class="p">,</span>
      <span class="p">{</span><span class="s">'Authorization'</span><span class="o">:</span> <span class="s">'Bearer test_token'</span><span class="p">},</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">fields</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="s">'date'</span><span class="o">:</span> <span class="s">'2022-01-01'</span><span class="p">,</span>
        <span class="s">'status'</span><span class="o">:</span> <span class="s">'91'</span><span class="p">,</span>
        <span class="s">'doc_type'</span><span class="o">:</span> <span class="s">'2'</span><span class="p">,</span>
        <span class="s">'note'</span><span class="o">:</span> <span class="s">''</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">length</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'passport_image'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span> <span class="s">'passport_sample.jpg'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'cert_img'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span> <span class="s">'placeholder.png'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>

    <span class="c1">// Response</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">isA</span><span class="p">&lt;</span><span class="n">InfoData</span><span class="p">&gt;());</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="na">toMap</span><span class="p">(),</span> <span class="p">{</span>
      <span class="s">'amount'</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
      <span class="s">'commission'</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
    <span class="p">});</span>
  <span class="p">});</span>
  <span class="p">...</span>
<span class="p">}</span>
<span class="p">...</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">setUp</code>関数で事前に設定した<code class="language-plaintext highlighter-rouge">Mock</code>オブジェクトを使って、リクエストが成功した場合をテストしました。</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nd">@GenerateMocks</span><span class="p">([</span><span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">])</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">mockHttpMultipartRequest</span> <span class="o">=</span> <span class="n">CustomMockMultipartRequest</span><span class="p">();</span>
  <span class="p">...</span>
  <span class="n">test</span><span class="p">(</span><span class="s">'Throw error when response is failed'</span><span class="p">,</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">when</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">send</span><span class="p">())</span><span class="o">.</span><span class="na">thenAnswer</span><span class="p">(</span>
      <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="kd">final</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">jsonEncode</span><span class="p">({</span>
          <span class="s">'success'</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="p">});</span>
        <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">value</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">encode</span><span class="p">(</span><span class="n">responseBody</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">StreamedResponse</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>

    <span class="k">try</span> <span class="p">{</span>
      <span class="k">await</span> <span class="n">TaxRefundAPI</span><span class="p">(</span>
        <span class="nl">token:</span> <span class="s">'test_token'</span><span class="p">,</span>
        <span class="nl">client:</span> <span class="n">mockHttpMultipartRequest</span><span class="p">,</span>
      <span class="p">)</span><span class="o">.</span><span class="na">sendData</span><span class="p">(</span>
        <span class="nl">permitDate:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'2022-01-01 01:04'</span><span class="p">),</span>
        <span class="nl">status:</span> <span class="mi">91</span><span class="p">,</span>
        <span class="nl">docType:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nl">note:</span> <span class="s">''</span><span class="p">,</span>
        <span class="nl">passportImg:</span> <span class="s">'assets/images/passport_sample.jpg'</span><span class="p">,</span>
        <span class="nl">certificationImage:</span> <span class="s">'assets/images/placeholder.png'</span><span class="p">,</span>
        <span class="nl">receiptImages:</span> <span class="p">[</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="p">],</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="p">(),</span> <span class="s">'Exception: Unknown response'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>
<span class="p">...</span>
</code></pre></div></div><p>最後は、レスポンスが失敗した場合をテストしました。</p><h2 id="完了">完了</h2><p>これで、Flutterでhttpパッケージの<code class="language-plaintext highlighter-rouge">MultipartRequest</code>を使ってファイルをアップロードする方法と、それをテストする方法について説明しました。</p><p>Flutterでファイルをアップロードする機能を実装する場合は、このブログを参考にして実装し、テストコードを書いてみてください。</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="flutter"/><summary type="html"><![CDATA[FlutterでhttpパッケージのMultipartRequestを使ってファイルをアップロードする方法と、それをテストする方法について説明します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/flutter/background.png"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/flutter/background.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry></feed>