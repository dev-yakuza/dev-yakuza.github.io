<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://deku.posstree.com/en/feed.xml" rel="self" type="application/atom+xml"/><link href="https://deku.posstree.com/en/" rel="alternate" type="text/html"/><updated>2024-12-17T08:50:44+09:00</updated><id>https://deku.posstree.com/feed.xml</id><title type="html">Deku</title><subtitle>『Programming Artist, DeKu』</subtitle><author><name>dev.yakuza@gmail.com</name></author><entry xml:lang="en"><title type="html">How to select an instructor for effective employee training</title><link href="https://deku.posstree.com/en/essay/effective-employee-training/" rel="alternate" type="text/html" title="How to select an instructor for effective employee training"/><published>2024-11-14T00:00:00+09:00</published><updated>2024-12-03T20:54:19+09:00</updated><id>https://deku.posstree.com/essay/effective-employee-training-en</id><content type="html" xml:base="https://deku.posstree.com/essay/effective-employee-training/"><![CDATA[<p>Most companies invest a lot of money in employee training. This is because the company can grow as employees grow. However, many companies do not actually get much benefit from training. Why do companies invest a lot of money in training but do not actually get much benefit?</p><p>Companies conduct training with the hope that employees will grow and that growth will have an impact on the company. However, most companies measure the effectiveness of training by checking how many people completed what training this year. They do not measure how much help employees actually received and how much they grew.</p><p>According to a meta-analysis study on the effects of education and training in companies, most education effect almost disappears after 6 months. At the time of completion of the training, employees may feel very satisfied and helpful in their work, but in reality, there is little effect.</p><p>The biggest reason for this problem is the instructor who conducts the training. Companies mainly consider how much knowledge the instructor has when selecting them.</p><p>However, according to the research results of John Hattie, the effect of the instructor’s knowledge level is 0.09, which ranks 135th among more than 150 factors that affect academic achievement. In other words, how much specialized knowledge the instructor has has little effect on learning achievement.</p><blockquote><p>In the medical field, many research results show that when an expert teaches a specific surgical technique to a student, among the knowledge used when performing the task, such as medical knowledge, action steps on what to do, and decision-making steps, <code class="language-plaintext highlighter-rouge">70% is not taught</code>.</p></blockquote><p>In the medical field, many research results show that when an expert teaches a student, <code class="language-plaintext highlighter-rouge">70% of the knowledge used when performing the task is not taught</code>.</p><p>It is commonly thought that an excellent teacher has a lot of knowledge and deep knowledge in the field. However, since the ultimate goal of education is to help students <code class="language-plaintext highlighter-rouge">do better</code>, the knowledge that a teacher has is not very helpful in the context of education.</p><p>A person with a lot of knowledge is not necessarily a good teacher, and learning from a person with a lot of knowledge does not improve the student’s skills.</p><blockquote><p>Even though he was recognized for his ability to teach and received more than one outstanding education award, he was given a special order to teach him every step or knowledge he could. Even after the class was over, I asked, “Did you miss anything?” and added it, but I still dropped about 70%.</p></blockquote><p>Even experts and people who have received outstanding educational awards think that they have taught students only 30% of what is necessary to successfully achieve the skill and that they have taught them all.</p><p>To solve this problem, teachers and students must work together. The effect of the degree of proficiency in the teacher’s cognitive analysis on students’ academic achievement is 1.29. In other words, the teacher with excellent cognitive analysis ability teaches well.</p><p>Teachers can make efforts to increase their metacognition as follows.</p><blockquote><p>It is to observe your head, ask questions, and analyze, thinking, “What process do I go through when solving this problem?” And you can directly observe, ask questions, and analyze what students think as they learn this.</p></blockquote><p>Students can choose a teacher who is good at analyzing these cognitive tasks. In addition, it is a very effective way to inform the teacher of how he solved this problem and the cognitive process to help the teacher analyze the cognitive work. Or, the teacher may ask for the cognitive process of solving the problem. For cognitive task analysis, refer to the following article.</p><ul><li><a href="https://deku.posstree.com/en/essay/cognitibe-task-analysis/" target="\_blank">Extracting Expertise from Experts through Cognitive Task Analysis</a></li></ul><p>You will be able to see things that increase the learning effect if you participate while thinking about these parts in teaching or learning others. Companies should create an environment in which instructors and employees can learn together through cognitive task analysis, not just learning that instructors convey knowledge. Otherwise, you will not have a great effect on the cost of investing in education.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="essay"/><summary type="html"><![CDATA[Many companies invest a lot of money in employee training, but they do not actually get much benefit. Why do companies invest a lot of money in training but do not actually get much benefit?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/essay/2024/effective-employee-training/background.webp"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/essay/2024/effective-employee-training/background.webp" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">[GitHub Actions] Send Slack message for Reviewer</title><link href="https://deku.posstree.com/en/github_actions/send_slack_message_for_reviewer/" rel="alternate" type="text/html" title="[GitHub Actions] Send Slack message for Reviewer"/><published>2024-11-13T00:00:00+09:00</published><updated>2024-12-17T08:50:33+09:00</updated><id>https://deku.posstree.com/github_actions/send-slack-message-en</id><content type="html" xml:base="https://deku.posstree.com/github_actions/send_slack_message_for_reviewer/"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#create-slack-app">Create Slack App</a></li><li><a href="#channel-id">Channel ID</a></li><li><a href="#use-slack-github-action">Use slack-github-action</a></li><li><a href="#composite-action">Composite Action</a></li><li><a href="#reviewer-notification">Reviewer Notification</a></li><li><a href="#send-messages-every-morning">Send messages every morning</a></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>When using GitHub Actions to build CI/CD, sometimes you want to send messages to Slack when the build and test are successful or failed. In this blog post, I will introduce how to send Slack messages using GitHub Actions.</p><h2 id="create-slack-app">Create Slack App</h2><p>Slack is an interactive messaging platform, so receiving messages means that someone has sent a message. Therefore, to send Slack messages using GitHub Actions, you need to create a Slack app that sends messages.</p><p>First, click the following link to access the <code class="language-plaintext highlighter-rouge">Slack API</code>.</p><ul><li><a href="https://api.slack.com/" rel="nofollow noreferrer" target="_blank">https://api.slack.com/</a></li></ul><p>Then, you will see the following screen.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/slack_api.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/slack_api.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/slack_api.png" alt="GitHub Actions Send Slack message - Slack API site"/></picture><p>Click the <code class="language-plaintext highlighter-rouge">Your apps</code> button on the top right to go to the app creation screen.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app.png" alt="GitHub Actions Send Slack message - Create new Slack app"/></picture><p>Click the <code class="language-plaintext highlighter-rouge">Create New App</code> button to create a new app.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app_options.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app_options.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app_options.png" alt="GitHub Actions Send Slack message - Create new Slack app options"/></picture><p>At this time, select <code class="language-plaintext highlighter-rouge">From scratch</code> to create a new app.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_name_and_workspace.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_name_and_workspace.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_name_and_workspace.png" alt="GitHub Actions Send Slack message - Enter app name and workspace"/></picture><p>Enter the name of the app, select the Slack Workspace to use this app, and click the <code class="language-plaintext highlighter-rouge">Create App</code> button.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_created.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_created.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_created.png" alt="GitHub Actions Send Slack message - App created"/></picture><p>Then, you can see that the app is created successfully as shown above.</p><p>Now, you need to set the permission to send messages to this app. Select the name of the newly created app on the app list screen to go to the app details page.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions.png" alt="GitHub Actions Send Slack message - OAuth and Permissions"/></picture><p>Then, select the <code class="language-plaintext highlighter-rouge">OAuth &amp; Permissions</code> menu from the left menu to go to the <code class="language-plaintext highlighter-rouge">OAuth &amp; Permissions</code> screen.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_scopes.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_scopes.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_scopes.png" alt="GitHub Actions Send Slack message - OAuth and Permissions scopes"/></picture><p>Scroll down a bit and click the <code class="language-plaintext highlighter-rouge">Add an OAuth Scope</code> button in the <code class="language-plaintext highlighter-rouge">Scopes</code> section, then add the <code class="language-plaintext highlighter-rouge">chat:write</code> permission.</p><p>Lastly, go to the <code class="language-plaintext highlighter-rouge">OAuth Tokens</code> section and click the <code class="language-plaintext highlighter-rouge">Install to (workspace)</code> button to install the Slack app.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_install_app.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_install_app.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_install_app.png" alt="GitHub Actions Send Slack message - OAuth and Permissions install app"/></picture><p>After installing the app, you will see that the <code class="language-plaintext highlighter-rouge">Bot User OAuth Access Token</code> is created as shown above.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_bot_user_oauth_access_token.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_bot_user_oauth_access_token.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_bot_user_oauth_access_token.png" alt="GitHub Actions Send Slack message - OAuth and Permissions Bot User OAuth Access Token"/></picture><p>Now, you need to save this <code class="language-plaintext highlighter-rouge">Bot User OAuth Access Token</code> to use it in GitHub Actions. Go to the <code class="language-plaintext highlighter-rouge">GitHub</code> repository where you want to send Slack messages.</p><p>Then, click the <code class="language-plaintext highlighter-rouge">Settings &gt; Secrets and variables &gt; Actions</code> menu to go to the <code class="language-plaintext highlighter-rouge">Actions secrets and variables</code> page.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/github_secrets_and_variables.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/github_secrets_and_variables.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/github_secrets_and_variables.png" alt="GitHub Actions Send Slack message - GitHub secrets and variables"/></picture><p>Click the <code class="language-plaintext highlighter-rouge">New repository secret</code> button on the <code class="language-plaintext highlighter-rouge">Repository secrets</code> screen, enter <code class="language-plaintext highlighter-rouge">Name</code> as <code class="language-plaintext highlighter-rouge">SLACK_BOT_TOKEN</code> and enter the token created on the <code class="language-plaintext highlighter-rouge">Slack API</code> site in <code class="language-plaintext highlighter-rouge">Value</code>, and click the <code class="language-plaintext highlighter-rouge">Add secret</code> button to save it.</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="channel-id">Channel ID</h2><p>To send messages to a Slack channel using GitHub Actions, you need a <code class="language-plaintext highlighter-rouge">CHANNEL_ID</code>.</p><p>You can get the <code class="language-plaintext highlighter-rouge">CHANNEL_ID</code> from <code class="language-plaintext highlighter-rouge">Slack</code>. If you want to send it directly to an individual, you can get the <code class="language-plaintext highlighter-rouge">CHANNEL_ID</code> by clicking <code class="language-plaintext highlighter-rouge">Copy member ID</code> in the individual profile.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/copy_slack_member_channel_id.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/copy_slack_member_channel_id.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/copy_slack_member_channel_id.png" alt="GitHub Actions Send Slack message - Copy Slack member channel ID"/></picture><p>If you want to send a message to a specific channel, click <code class="language-plaintext highlighter-rouge">Open channel details</code> to go to the channel details,</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/open_slack_channel_details.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/open_slack_channel_details.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/open_slack_channel_details.png" alt="GitHub Actions Send Slack message - Copy Slack channel ID"/></picture><p>and copy the <code class="language-plaintext highlighter-rouge">Channel ID</code> displayed at the bottom.</p><h2 id="use-slack-github-action">Use slack-github-action</h2><p>You can send messages to Slack using the <code class="language-plaintext highlighter-rouge">slack-github-action</code> officially provided by <code class="language-plaintext highlighter-rouge">Slack</code>.</p><ul><li>slack-github-action: <a href="https://github.com/slackapi/slack-github-action" rel="nofollow noreferrer" target="_blank">https://github.com/slackapi/slack-github-action</a></li></ul><p>You can send messages to Slack by modifying <code class="language-plaintext highlighter-rouge">GitHub Actions</code> as follows to use <code class="language-plaintext highlighter-rouge">slack-github-action</code>.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Post to a Slack channel</span>
  <span class="na">id</span><span class="pi">:</span> <span class="s">slack</span>
  <span class="na">uses</span><span class="pi">:</span> <span class="s">slackapi/slack-github-action@v1.27.0</span>
  <span class="na">with</span><span class="pi">:</span>
    <span class="na">channel-id</span><span class="pi">:</span> <span class="s1">'</span><span class="s">CHANNEL_ID'</span>
    <span class="na">payload</span><span class="pi">:</span> <span class="pi">|</span>
      <span class="s">{</span>
        <span class="s">"text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",</span>
        <span class="s">"blocks": [</span>
          <span class="s">{</span>
            <span class="s">"type": "section",</span>
            <span class="s">"text": {</span>
              <span class="s">"type": "mrkdwn",</span>
              <span class="s">"text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"</span>
            <span class="s">}</span>
          <span class="s">}</span>
        <span class="s">]</span>
      <span class="s">}</span>
  <span class="na">env</span><span class="pi">:</span>
    <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.SLACK_BOT_TOKEN }}</span>

</code></pre></div></div><p>When sending a simple message, you can conveniently send a <code class="language-plaintext highlighter-rouge">Slack</code> message by using this <code class="language-plaintext highlighter-rouge">slack-github-action</code>.</p><p>You can send a message easily using the <code class="language-plaintext highlighter-rouge">slack-github-action</code> provided by <code class="language-plaintext highlighter-rouge">Slack</code> when you want to send a simple message.</p><h2 id="composite-action">Composite Action</h2><p>The company I work for does not use <code class="language-plaintext highlighter-rouge">slack-github-action</code>, but uses the following code to send <code class="language-plaintext highlighter-rouge">Slack</code> messages by using <code class="language-plaintext highlighter-rouge">Composite Action</code>.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Send</span><span class="nv"> </span><span class="s">Slack</span><span class="nv"> </span><span class="s">messages'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Send</span><span class="nv"> </span><span class="s">Slack</span><span class="nv"> </span><span class="s">messages'</span>

<span class="na">inputs</span><span class="pi">:</span>
  <span class="na">GITHUB_TOKEN</span><span class="pi">:</span>
    <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">GitHub</span><span class="nv"> </span><span class="s">token</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">use</span><span class="nv"> </span><span class="s">GitHub</span><span class="nv"> </span><span class="s">API'</span>
    <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span>
    <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Token</span><span class="nv"> </span><span class="s">for</span><span class="nv"> </span><span class="s">Slack</span><span class="nv"> </span><span class="s">bot'</span>
    <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">MESSAGES</span><span class="pi">:</span>
    <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">(JSON)</span><span class="nv"> </span><span class="s">Multiple</span><span class="nv"> </span><span class="s">users</span><span class="nv"> </span><span class="s">and</span><span class="nv"> </span><span class="s">multiple</span><span class="nv"> </span><span class="s">Slack</span><span class="nv"> </span><span class="s">messages'</span>
    <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>

<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Send Slack messages</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">github-token</span><span class="pi">:</span> <span class="s">${{ inputs.GITHUB_TOKEN }}</span>
        <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">const slackToken = process.env.SLACK_TOKEN</span>
          <span class="s">const messages = JSON.parse(Buffer.from(process.env.MESSAGES, 'base64').toString('utf-8'));</span>
          <span class="s">const channelIDs = {</span>
            <span class="s">'GITHUB_USER_NAME_1': 'USER_CHANNEL_ID_1',</span>
            <span class="s">'GITHUB_USER_NAME_2': 'USER_CHANNEL_ID_2',</span>
            <span class="s">'GITHUB_USER_NAME_2': 'USER_CHANNEL_ID_2',</span>
            <span class="s">'GITHUB_USER_NAME_3': 'USER_CHANNEL_ID_3',</span>
            <span class="s">'GITHUB_USER_NAME_3': 'USER_CHANNEL_ID_3',</span>
            <span class="s">'GITHUB_USER_NAME_4': 'USER_CHANNEL_ID_4',</span>
          <span class="s">}</span>

          <span class="s">for (const message of messages) {</span>
            <span class="s">const { userName, messages: blocks } = message</span>
            <span class="s">const channel = channelIDs[userName]</span>
            <span class="s">fetch('https://slack.com/api/chat.postMessage', {</span>
              <span class="s">method: 'POST',</span>
              <span class="s">headers: {</span>
                <span class="s">'Content-Type': 'application/json',</span>
                <span class="s">'Authorization': `Bearer ${slackToken}`,</span>
              <span class="s">},</span>
              <span class="s">body: JSON.stringify({</span>
                <span class="s">channel,</span>
                <span class="s">blocks,</span>
              <span class="s">})</span>
            <span class="s">})</span>
            <span class="s">.then(response =&gt; response.json())</span>
            <span class="s">.then(data =&gt; {</span>
              <span class="s">if (!data.ok) {</span>
                <span class="s">throw new Error(`Slack API error: ${data.error}`);</span>
              <span class="s">}</span>
              <span class="s">console.log('Message sent to Slack successfully');</span>
            <span class="s">})</span>
            <span class="s">.catch(error =&gt; {</span>
              <span class="s">console.error('Error sending message to Slack:', error);</span>
            <span class="s">});</span>
          <span class="s">}</span>
      <span class="na">env</span><span class="pi">:</span>
        <span class="na">SLACK_TOKEN</span><span class="pi">:</span> <span class="s">${{ inputs.SLACK_BOT_TOKEN }}</span>
        <span class="na">MESSAGES</span><span class="pi">:</span> <span class="s">${{ inputs.MESSAGES }}</span>

</code></pre></div></div><p>By using <code class="language-plaintext highlighter-rouge">Composite Action</code>, you can make the part of sending <code class="language-plaintext highlighter-rouge">Slack</code> messages common and use it. For more information about <code class="language-plaintext highlighter-rouge">Composite Action</code>, please refer to the following link.</p><ul><li><a href="https://deku.posstree.com/en/github_actions/composite-action/" target="_blank">[GitHub Actions] Removing duplication in GitHub Actions using Composite Action</a></li></ul><h2 id="reviewer-notification">Reviewer Notification</h2><p>Next, I will show you how to send a <code class="language-plaintext highlighter-rouge">Slack</code> message using <code class="language-plaintext highlighter-rouge">GitHub Actions</code> when a Reviewer is assigned by using the <code class="language-plaintext highlighter-rouge">Composite Action</code> created above.</p><p>You can create a <code class="language-plaintext highlighter-rouge">GitHub Actions</code> as follows to send a message to a private channel in Slack when a Reviewer is assigned in a PR.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">[Slack]</span><span class="nv"> </span><span class="s">Reviewer</span><span class="nv"> </span><span class="s">assigned'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">review_requested</span><span class="pi">]</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">notify_for_reviewer</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout Repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Make Slack messages</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">make-slack-messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github-token</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">const prNumber = context.payload.pull_request.number;</span>
            <span class="s">const prTitle = context.payload.pull_request.title;</span>
            <span class="s">const prLink = context.payload.pull_request.html_url;</span>
            <span class="s">const { data: reviewers } = await github.rest.pulls.listRequestedReviewers({</span>
              <span class="s">owner: context.repo.owner,</span>
              <span class="s">repo: context.repo.repo,</span>
              <span class="s">pull_number: prNumber,</span>
            <span class="s">});</span>

            <span class="s">let slackMessages = []</span>
            <span class="s">const reviewerLogins = reviewers.users.map(user =&gt; user.login);</span>
            <span class="s">for (const userName of reviewerLogins) {</span>
              <span class="s">const message = `*Reviewer notification*\n\nYou are assigned to new PR.\n\n- title: ${prTitle}\n- link: ${prLink}`</span>
              <span class="s">slackMessages.push({</span>
                <span class="s">userName,</span>
                <span class="s">messages: [</span>
                  <span class="s">{</span>
                    <span class="s">type: 'section',</span>
                    <span class="s">text: {</span>
                      <span class="s">type: 'mrkdwn',</span>
                      <span class="s">text: message,</span>
                    <span class="s">}</span>
                  <span class="s">}</span>
                <span class="s">]</span>
              <span class="s">})</span>
            <span class="s">}</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Send Slack messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/send_slack_messages</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.SLACK_BOT_TOKEN }}</span>
          <span class="na">MESSAGES</span><span class="pi">:</span> <span class="s">${{ steps.make-slack-messages.outputs.MESSAGES }}</span>

</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><p>Let’s take a closer look at this <code class="language-plaintext highlighter-rouge">GitHub Actions</code>.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">[Slack]</span><span class="nv"> </span><span class="s">Reviewer</span><span class="nv"> </span><span class="s">assigned'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">review_requested</span><span class="pi">]</span>
<span class="nn">...</span>

</code></pre></div></div><p>This <code class="language-plaintext highlighter-rouge">GitHub Actions</code> is triggered only when the <code class="language-plaintext highlighter-rouge">review_requested</code> event of the <code class="language-plaintext highlighter-rouge">pull_request</code> is used.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout Repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
<span class="nn">...</span>

</code></pre></div></div><p>Since <code class="language-plaintext highlighter-rouge">Composite Action</code> is managed by <code class="language-plaintext highlighter-rouge">Git</code>, you need to check out the repository using <code class="language-plaintext highlighter-rouge">actions/checkout@v4</code>.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Make Slack messages</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">make-slack-messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github-token</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">const prNumber = context.payload.pull_request.number;</span>
            <span class="s">const prTitle = context.payload.pull_request.title;</span>
            <span class="s">const prLink = context.payload.pull_request.html_url;</span>
            <span class="s">const { data: reviewers } = await github.rest.pulls.listRequestedReviewers({</span>
              <span class="s">owner: context.repo.owner,</span>
              <span class="s">repo: context.repo.repo,</span>
              <span class="s">pull_number: prNumber,</span>
            <span class="s">});</span>

            <span class="s">let slackMessages = []</span>
            <span class="s">const reviewerLogins = reviewers.users.map(user =&gt; user.login);</span>
            <span class="s">for (const userName of reviewerLogins) {</span>
              <span class="s">const message = `*Reviewer notification*\n\nYou are assigned to new PR.\n\n- title: ${prTitle}\n- link: ${prLink}`</span>
              <span class="s">slackMessages.push({</span>
                <span class="s">userName,</span>
                <span class="s">messages: [</span>
                  <span class="s">{</span>
                    <span class="s">type: 'section',</span>
                    <span class="s">text: {</span>
                      <span class="s">type: 'mrkdwn',</span>
                      <span class="s">text: message,</span>
                    <span class="s">}</span>
                  <span class="s">}</span>
                <span class="s">]</span>
              <span class="s">})</span>
            <span class="s">}</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
<span class="s">...</span>

</code></pre></div></div><p>Using <code class="language-plaintext highlighter-rouge">actions/github-script@v7</code>, create a message to send to the Reviewer. Get the title and link of the PR and create a message to send to the Reviewer.</p><div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Reviewer notification
You are assigned to new PR.
- title: PR title
- link: https://...
</code></pre></div></div><p>This message will be sent to all Reviewers specified in the PR.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
            <span class="s">const reviewerLogins = reviewers.users.map(user =&gt; user.login);</span>
            <span class="s">for (const userName of reviewerLogins) {</span>
<span class="nn">...</span>

</code></pre></div></div><p>If you send this message as it is in <code class="language-plaintext highlighter-rouge">JSON</code> to the Composite Action, a problem will occur. Therefore, use <code class="language-plaintext highlighter-rouge">Buffer</code> to encode it in <code class="language-plaintext highlighter-rouge">base64</code> and save it in <code class="language-plaintext highlighter-rouge">MESSAGES</code> using <code class="language-plaintext highlighter-rouge">core.setOutput</code> to pass it on.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
<span class="nn">...</span>

</code></pre></div></div><p>Lastly, send a <code class="language-plaintext highlighter-rouge">Slack</code> message using the previously created <code class="language-plaintext highlighter-rouge">Composite Action</code>.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Send Slack messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/send_slack_messages</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.SLACK_BOT_TOKEN }}</span>
          <span class="na">MESSAGES</span><span class="pi">:</span> <span class="s">${{ steps.make-slack-messages.outputs.MESSAGES }}</span>
<span class="nn">...</span>

</code></pre></div></div><h2 id="send-messages-every-morning">Send messages every morning</h2><p>When reviewers receive Slack messages, they sometimes review PRs after receiving Slack messages, but sometimes they are too busy to review PRs. In this case, you can send a message to the reviewer every morning to review the PR.</p><p>If you create a <code class="language-plaintext highlighter-rouge">GitHub Actions</code> as follows, you can send messages to reviewers every weekday morning (Monday to Friday) at 9:30 AM (Japan time).</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">[Slack]</span><span class="nv"> </span><span class="s">Every</span><span class="nv"> </span><span class="s">weekday</span><span class="nv"> </span><span class="s">at</span><span class="nv"> </span><span class="s">9:30</span><span class="nv"> </span><span class="s">AM'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span> <span class="s1">'</span><span class="s">30</span><span class="nv"> </span><span class="s">0</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">1-5'</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">notify_reviewers_every_weekday</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Make Slack messages</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">make-slack-messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github-token</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">const userList = [</span>
              <span class="s">'GITHUB_USER_NAME_1',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_4',</span>
            <span class="s">]</span>
            <span class="s">const escapeForSlack = (text) =&gt; {</span>
              <span class="s">return text</span>
                <span class="s">.replace(/&amp;/g, '&amp;amp;')   // &amp; → &amp;amp;</span>
                <span class="s">.replace(/&lt;/g, '&amp;lt;')    // &lt; → &amp;lt;</span>
                <span class="s">.replace(/&gt;/g, '&amp;gt;')    // &gt; → &amp;gt;</span>
                <span class="s">.replace(/"/g, '&amp;quot;')  // " → &amp;quot;</span>
                <span class="s">.replace(/'/g, '&amp;#39;');  // ' → &amp;#39;</span>
            <span class="s">}</span>

            <span class="s">// Get All PRs</span>
            <span class="s">const prList = []</span>
            <span class="s">let pageIndex = 1</span>
            <span class="s">let hasMorePages = true</span>
            <span class="s">while (hasMorePages) {</span>
              <span class="s">const result = await github.rest.pulls.list({</span>
                <span class="s">owner: context.repo.owner,</span>
                <span class="s">repo: context.repo.repo,</span>
                <span class="s">state: 'open',</span>
                <span class="s">per_page: 100,</span>
                <span class="s">page: pageIndex,</span>
              <span class="s">})</span>
              <span class="s">if (result.data.length &gt; 0) {</span>
                <span class="s">prList.push(...result.data)</span>
                <span class="s">pageIndex += 1</span>
              <span class="s">} else {</span>
                <span class="s">hasMorePages = false</span>
              <span class="s">}</span>
            <span class="s">}</span>
            <span class="s">let slackMessages = []</span>
            <span class="s">for (const userName of userList) {</span>
              <span class="s">const reviewerPRList = prList.filter(pr =&gt; pr.user.login !== 'dependabot[bot]' &amp;&amp;</span>
                <span class="s">pr.requested_reviewers.some(reviewer =&gt; reviewer.login === userName)</span>
              <span class="s">);</span>
              <span class="s">if (reviewerPRList.length &gt; 0) {</span>
                <span class="s">let message = '*Reviewer notification*\n\nYou have assigned PRs. Please review when you have time.\n'</span>
                <span class="s">reviewerPRList.forEach(pr =&gt; {</span>
                  <span class="s">message += `\n- &lt;${pr.html_url}|${escapeForSlack(pr.title)}&gt;`;</span>
                <span class="s">});</span>
                <span class="s">slackMessages.push({</span>
                  <span class="s">userName,</span>
                  <span class="s">messages: [</span>
                    <span class="s">{</span>
                      <span class="s">type: 'section',</span>
                      <span class="s">text: {</span>
                        <span class="s">type: 'mrkdwn',</span>
                        <span class="s">text: message,</span>
                      <span class="s">}</span>
                    <span class="s">}</span>
                  <span class="s">]</span>
                <span class="s">})</span>
              <span class="s">}</span>
            <span class="s">}</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Send Slack messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/send_slack_messages</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.SLACK_BOT_TOKEN }}</span>
          <span class="na">MESSAGES</span><span class="pi">:</span> <span class="s">${{ steps.make-slack-messages.outputs.MESSAGES }}</span>

</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><p>Let’s take a closer look at this <code class="language-plaintext highlighter-rouge">GitHub Actions</code>.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">[Slack]</span><span class="nv"> </span><span class="s">Every</span><span class="nv"> </span><span class="s">weekday</span><span class="nv"> </span><span class="s">at</span><span class="nv"> </span><span class="s">9:30</span><span class="nv"> </span><span class="s">AM'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span> <span class="s1">'</span><span class="s">30</span><span class="nv"> </span><span class="s">0</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">1-5'</span>
<span class="nn">...</span>

</code></pre></div></div><p>This <code class="language-plaintext highlighter-rouge">GitHub Actions</code> is triggered every weekday (1-5) at 9:30 AM (Japan time).</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout Repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
<span class="nn">...</span>

</code></pre></div></div><p>Since <code class="language-plaintext highlighter-rouge">Composite Action</code> is managed by <code class="language-plaintext highlighter-rouge">Git</code>, you need to check out the repository using <code class="language-plaintext highlighter-rouge">actions/checkout@v4</code>.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Make Slack messages</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">make-slack-messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github-token</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">const userList = [</span>
              <span class="s">'GITHUB_USER_NAME_1',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_4',</span>
            <span class="s">]</span>
            <span class="s">const escapeForSlack = (text) =&gt; {</span>
              <span class="s">return text</span>
                <span class="s">.replace(/&amp;/g, '&amp;amp;')   // &amp; → &amp;amp;</span>
                <span class="s">.replace(/&lt;/g, '&amp;lt;')    // &lt; → &amp;lt;</span>
                <span class="s">.replace(/&gt;/g, '&amp;gt;')    // &gt; → &amp;gt;</span>
                <span class="s">.replace(/"/g, '&amp;quot;')  // " → &amp;quot;</span>
                <span class="s">.replace(/'/g, '&amp;#39;');  // ' → &amp;#39;</span>
            <span class="s">}</span>

            <span class="s">// Get All PRs</span>
            <span class="s">const prList = []</span>
            <span class="s">let pageIndex = 1</span>
            <span class="s">let hasMorePages = true</span>
            <span class="s">while (hasMorePages) {</span>
              <span class="s">const result = await github.rest.pulls.list({</span>
                <span class="s">owner: context.repo.owner,</span>
                <span class="s">repo: context.repo.repo,</span>
                <span class="s">state: 'open',</span>
                <span class="s">per_page: 100,</span>
                <span class="s">page: pageIndex,</span>
              <span class="s">})</span>
              <span class="s">if (result.data.length &gt; 0) {</span>
                <span class="s">prList.push(...result.data)</span>
                <span class="s">pageIndex += 1</span>
              <span class="s">} else {</span>
                <span class="s">hasMorePages = false</span>
              <span class="s">}</span>
            <span class="s">}</span>
            <span class="s">let slackMessages = []</span>
            <span class="s">for (const userName of userList) {</span>
              <span class="s">const reviewerPRList = prList.filter(pr =&gt; pr.user.login !== 'dependabot[bot]' &amp;&amp;</span>
                <span class="s">pr.requested_reviewers.some(reviewer =&gt; reviewer.login === userName)</span>
              <span class="s">);</span>
              <span class="s">if (reviewerPRList.length &gt; 0) {</span>
                <span class="s">let message = '*Reviewer notification*\n\nYou have assigned PRs. Please review when you have time.\n'</span>
                <span class="s">reviewerPRList.forEach(pr =&gt; {</span>
                  <span class="s">message += `\n- &lt;${pr.html_url}|${escapeForSlack(pr.title)}&gt;`;</span>
                <span class="s">});</span>
                <span class="s">slackMessages.push({</span>
                  <span class="s">userName,</span>
                  <span class="s">messages: [</span>
                    <span class="s">{</span>
                      <span class="s">type: 'section',</span>
                      <span class="s">text: {</span>
                        <span class="s">type: 'mrkdwn',</span>
                        <span class="s">text: message,</span>
                      <span class="s">}</span>
                    <span class="s">}</span>
                  <span class="s">]</span>
                <span class="s">})</span>
              <span class="s">}</span>
            <span class="s">}</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
<span class="s">...</span>

</code></pre></div></div><p>Using <code class="language-plaintext highlighter-rouge">actions/github-script@v7</code>, create a message to send to the Reviewer. Get all PRs and create a message to send to the Reviewer.</p><div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Reviewer notification
You have assigned PRs. Please review when you have time.
- PR title1: https://...
- PR title2: https://...
- PR title3: https://...
- PR title4: https://...
</code></pre></div></div><p>This message will be sent to all reviewers specified in the GitHub user list.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
            <span class="s">const userList = [</span>
              <span class="s">'GITHUB_USER_NAME_1',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_4',</span>
            <span class="s">]</span>
<span class="nn">...</span>

</code></pre></div></div><p>The error occurs when passing the message created like this to <code class="language-plaintext highlighter-rouge">Composite Action</code> by <code class="language-plaintext highlighter-rouge">JSON</code>. Therefore, you need to encode it in <code class="language-plaintext highlighter-rouge">base64</code> using <code class="language-plaintext highlighter-rouge">Buffer</code> and save it in <code class="language-plaintext highlighter-rouge">MESSAGES</code> using <code class="language-plaintext highlighter-rouge">core.setOutput</code> to pass it on.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
<span class="nn">...</span>
</code></pre></div></div><p>Lastly, send a <code class="language-plaintext highlighter-rouge">Slack</code> message using the previously created <code class="language-plaintext highlighter-rouge">Composite Action</code>.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Send Slack messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/send_slack_messages</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.SLACK_BOT_TOKEN }}</span>
          <span class="na">MESSAGES</span><span class="pi">:</span> <span class="s">${{ steps.make-slack-messages.outputs.MESSAGES }}</span>
<span class="nn">...</span>

</code></pre></div></div><h2 id="completed">Completed</h2><p>Done! We’ve seen how to send Slack messages using <code class="language-plaintext highlighter-rouge">GitHub Actions</code> when a Reviewer is assigned and how to send a PR list to Reviewers as a Slack message every morning.</p><p>If you have an issue that the review is delayed because the Reviewer assigned is not recognized, please try sending a message to the Reviewer to induce the review using this method.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[Let's see how to send Slack messages when Reviewer is assigned using GitHub Actions and how to send PR list to Reviewer as Slack message every morning.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">[GitHub Actions] Improve Jest test performance in GitHub Actions</title><link href="https://deku.posstree.com/en/github_actions/improve-test-performance/" rel="alternate" type="text/html" title="[GitHub Actions] Improve Jest test performance in GitHub Actions"/><published>2024-10-23T00:00:00+09:00</published><updated>2024-11-11T20:56:07+09:00</updated><id>https://deku.posstree.com/github_actions/improve-test-performance-en</id><content type="html" xml:base="https://deku.posstree.com/github_actions/improve-test-performance/"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#problem">Problem</a></li><li><a href="#performance-improvement">Performance Improvement</a><ul><li><a href="#cache-dependencies">Cache Dependencies</a></li><li><a href="#separate-actions">Separate Actions</a></li><li><a href="#jest-bail-option">Jest bail option</a></li><li><a href="#jest-shard-option">Jest shard option</a></li></ul></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>Recently, the number of test codes has increased in our company, and the Action that checks the code in <code class="language-plaintext highlighter-rouge">GitHub Actions</code> has taken a long time. In this blog post, I would like to share how I improved the performance of the Action that runs <code class="language-plaintext highlighter-rouge">Jest</code>.</p><h2 id="problem">Problem</h2><p>Currently my team uses the following Action to check PR.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">jobs</span><span class="pi">:</span>
  <span class="na">check-code</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Check Code</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Prettier</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn format</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn cspell</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn lint</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn stylelint</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">yarn test:ci</span>
          <span class="s">yarn test:storybook</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">yarn build</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build SCSS</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">yarn typegen:scss</span>

          <span class="s"># Get the changed files</span>
          <span class="s">CHANGED_FILES=$(git diff --name-only HEAD)</span>
          <span class="s"># Check if there are changes in the generated files</span>
          <span class="s">if [ -n "$CHANGED_FILES" ]; then</span>
            <span class="s">echo "Error: There are changes in the following files: $CHANGED_FILES"</span>
            <span class="s">exit 1</span>
          <span class="s">fi</span>
</code></pre></div></div><p>When a <code class="language-plaintext highlighter-rouge">PR</code> is created, the <code class="language-plaintext highlighter-rouge">Prettier</code>, <code class="language-plaintext highlighter-rouge">CSpell</code>, <code class="language-plaintext highlighter-rouge">ESLint</code>, <code class="language-plaintext highlighter-rouge">Stylelint</code>, <code class="language-plaintext highlighter-rouge">Test</code>, <code class="language-plaintext highlighter-rouge">Build</code>, and <code class="language-plaintext highlighter-rouge">Build SCSS</code> are executed. This Action takes about 25 minutes like the following.</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/check-code-actions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/check-code-actions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/check-code-actions.png" alt="GitHub Actions - Improve Jest test performance"/></picture><h2 id="performance-improvement">Performance Improvement</h2><p>GitHub Actions that take 25 minutes every time a PR is created are very inefficient. In this blog post, I will introduce how to improve the performance of the Action that runs <code class="language-plaintext highlighter-rouge">Jest</code>.</p><h3 id="cache-dependencies">Cache Dependencies</h3><p>The first thing I did to improve the performance of the Action that runs <code class="language-plaintext highlighter-rouge">Jest</code> was to cache the <code class="language-plaintext highlighter-rouge">Dependencies</code> installed by running <code class="language-plaintext highlighter-rouge">yarn install</code>. This reduces the time it takes to reinstall <code class="language-plaintext highlighter-rouge">Dependencies</code>.</p><p>This part can be used in other <code class="language-plaintext highlighter-rouge">Actions</code>, so I created a separate <code class="language-plaintext highlighter-rouge">Composite Action</code>. If you want to know more about <code class="language-plaintext highlighter-rouge">Composite Action</code>, please refer to the following link.</p><ul><li><a href="https://deku.posstree.com/en/github_actions/composite-action/" target="_blank">[GitHub Actions] Removing duplication in GitHub Actions using Composite Action</a></li></ul><p>I used <code class="language-plaintext highlighter-rouge">actions/cache</code> to cache the <code class="language-plaintext highlighter-rouge">Dependencies</code>.</p><ul><li><code class="language-plaintext highlighter-rouge">actions/cache</code> official document: <a href="https://github.com/actions/cache" rel="nofollow noreferrer" target="_blank">https://github.com/actions/cache</a></li></ul><p>The <code class="language-plaintext highlighter-rouge">Composite Action</code> that caches <code class="language-plaintext highlighter-rouge">Dependencies</code> using <code class="language-plaintext highlighter-rouge">actions/cache</code> is as follows.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Dependencies'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Dependencies'</span>
<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Get yarn cache directory path</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">yarn-cache-dir-path</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo "dir=$(yarn config get cacheFolder)" &gt;&gt; $GITHUB_OUTPUT</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/cache@v4</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">yarn-cache</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">path</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">node_modules</span>
          <span class="s">**/node_modules</span>
          <span class="s">${{ steps.yarn-cache-dir-path.outputs.dir }}</span>
        <span class="na">key</span><span class="pi">:</span> <span class="s">${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}</span>
        <span class="na">restore-keys</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">${{ runner.os }}-yarn-</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
      <span class="na">if</span><span class="pi">:</span> <span class="s">steps.yarn-cache.outputs.cache-hit != 'true'</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>

</code></pre></div></div><p>Our team uses <code class="language-plaintext highlighter-rouge">Yarn</code> version <code class="language-plaintext highlighter-rouge">3.7.0</code>. So I added <code class="language-plaintext highlighter-rouge">corepack enable</code> and cached the cache folder of <code class="language-plaintext highlighter-rouge">Yarn 3.7.0</code> and <code class="language-plaintext highlighter-rouge">node_modules</code> together.</p><p>Also, since the project is a monorepo, I cached the <code class="language-plaintext highlighter-rouge">node_modules</code> in the subprojects using <code class="language-plaintext highlighter-rouge">**/node_modules</code>.</p><p>If you are not using a monorepo and are not using <code class="language-plaintext highlighter-rouge">Yarn 3.7.0</code>, please refer to the official document and make appropriate settings.</p><ul><li>Official document: <a href="https://github.com/actions/cache?tab=readme-ov-file#implementation-examples" rel="nofollow noreferrer" target="_blank">https://github.com/actions/cache?tab=readme-ov-file#implementation-examples</a></li></ul><p>After caching the <code class="language-plaintext highlighter-rouge">Dependencies</code>, the performance was slightly improved.</p><ul><li>Before: 1m 25s</li></ul><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/before-cache-actions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/before-cache-actions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/before-cache-actions.png" alt="GitHub Actions - Before using actions/cache for dependencies"/></picture><ul><li>After: 9s</li></ul><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/after-cache-actions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/after-cache-actions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/after-cache-actions.png" alt="GitHub Actions - After using actions/cache for dependencies"/></picture><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h3 id="separate-actions">Separate Actions</h3><p>I executed <code class="language-plaintext highlighter-rouge">Prettier</code>, <code class="language-plaintext highlighter-rouge">CSpell</code>, <code class="language-plaintext highlighter-rouge">ESLint</code>, <code class="language-plaintext highlighter-rouge">Stylelint</code>, <code class="language-plaintext highlighter-rouge">Test</code>, <code class="language-plaintext highlighter-rouge">Build</code>, and <code class="language-plaintext highlighter-rouge">Build SCSS</code> in one <code class="language-plaintext highlighter-rouge">Action</code>. Among them, the <code class="language-plaintext highlighter-rouge">Test</code> part took the longest time.</p><p>So I separated the <code class="language-plaintext highlighter-rouge">Actions</code> so that other <code class="language-plaintext highlighter-rouge">Actions</code> can be performed while <code class="language-plaintext highlighter-rouge">Test</code> is running.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">jobs</span><span class="pi">:</span>
  <span class="na">cspell</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn cspell</span>
  <span class="na">remark</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn remark:service_1</span>
  <span class="na">eslint</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn lint:service_1</span>
  <span class="na">stylelint</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn stylelint:service_1</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn build:service_1</span>
  <span class="na">test-service_1</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Test service_1</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn test:ci:service_1</span>
</code></pre></div></div><p>Since we are using a monorepo, <code class="language-plaintext highlighter-rouge">GitHub Actions</code> like this exist for each service, and I used an <code class="language-plaintext highlighter-rouge">if</code> statement to run only the service.</p><p>Before separating the <code class="language-plaintext highlighter-rouge">Actions</code>, this <code class="language-plaintext highlighter-rouge">Action</code> took about 25 minutes.</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/check-code-actions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/check-code-actions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/check-code-actions.png" alt="GitHub Actions - Before sperating actions"/></picture><p>After separating the <code class="language-plaintext highlighter-rouge">Actions</code>, this <code class="language-plaintext highlighter-rouge">Action</code> took about 13 minutes.</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" alt="GitHub Actions - After sperating actions"/></picture><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h3 id="jest-bail-option">Jest bail option</h3><p>By using the <code class="language-plaintext highlighter-rouge">bail</code> option of <code class="language-plaintext highlighter-rouge">Jest</code>, you can stop the test if one of the tests fails.</p><p>By adding this option, you can stop all tests immediately when a test fails, so you can save time.</p><p>To set the <code class="language-plaintext highlighter-rouge">bail</code> option of <code class="language-plaintext highlighter-rouge">Jest</code>, open the <code class="language-plaintext highlighter-rouge">package.json</code> file that contains the command to run <code class="language-plaintext highlighter-rouge">jest</code> and modify it as follows.</p><div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">...</span><span class="w">
    </span><span class="nl">"test:ci"</span><span class="p">:</span><span class="w"> </span><span class="s2">"jest --ci --bail"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="err">...</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div><h3 id="jest-shard-option">Jest shard option</h3><p>By using the <code class="language-plaintext highlighter-rouge">shard</code> option of <code class="language-plaintext highlighter-rouge">Jest</code>, you can run tests in parallel. To run tests in parallel using the <code class="language-plaintext highlighter-rouge">shard</code> option, open the <code class="language-plaintext highlighter-rouge">Action</code> that runs <code class="language-plaintext highlighter-rouge">Jest</code> and modify it as follows.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="s">...</span>
  <span class="s">test-service_1</span><span class="err">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Test service_1</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">strategy</span><span class="pi">:</span>
      <span class="na">matrix</span><span class="pi">:</span>
        <span class="na">shard</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">1</span><span class="pi">,</span> <span class="nv">2</span><span class="pi">,</span> <span class="nv">3</span><span class="pi">,</span> <span class="nv">4</span><span class="pi">,</span> <span class="nv">5</span><span class="pi">,</span> <span class="nv">6</span><span class="pi">,</span> <span class="nv">7</span><span class="pi">,</span> <span class="nv">8</span><span class="pi">,</span> <span class="nv">9</span><span class="pi">,</span> <span class="nv">10</span><span class="pi">]</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn test:ci:service_1 -- --shard=$/10</span>
</code></pre></div></div><p>This project uses <code class="language-plaintext highlighter-rouge">Turborepo</code> to manage the monorepo.</p><ul><li><code class="language-plaintext highlighter-rouge">Turborepo</code> official document: <a href="https://turborepo.com/" rel="nofollow noreferrer">https://turborepo.com/</a></li></ul><p>The <code class="language-plaintext highlighter-rouge">Action</code> that runs <code class="language-plaintext highlighter-rouge">yarn test:ci:service_1</code> in the <code class="language-plaintext highlighter-rouge">Action</code> is executed by running the <code class="language-plaintext highlighter-rouge">turbo test:ci --parallel --filter=service_1</code> command. So I used <code class="language-plaintext highlighter-rouge">--</code> to pass the option to use the <code class="language-plaintext highlighter-rouge">--shard</code> option of <code class="language-plaintext highlighter-rouge">Jest</code>. So, to pass the <code class="language-plaintext highlighter-rouge">shard</code> option, I used <code class="language-plaintext highlighter-rouge">--</code>.</p><p>Before using the <code class="language-plaintext highlighter-rouge">shard</code> option, the test took about 13 minutes.</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" alt="GitHub Actions - After sperating action"/></picture><p>After using the <code class="language-plaintext highlighter-rouge">shard</code> option, the test took about 2~3 minutes.</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/jest-shard-option.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/jest-shard-option.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/jest-shard-option.png" alt="GitHub Actions - Use Jest shard option"/></picture><h2 id="completed">Completed</h2><p>Done! We’ve seen how to improve the performance of the Action that runs <code class="language-plaintext highlighter-rouge">Jest</code>. Before the performance improvement, it took about 25 minutes, but after the performance improvement, it took about 2~3 minutes.</p><p>If you have a similar problem, I hope you can improve the performance of the Action that runs <code class="language-plaintext highlighter-rouge">Jest</code> by caching <code class="language-plaintext highlighter-rouge">Dependencies</code>, separating <code class="language-plaintext highlighter-rouge">Actions</code>, and using the <code class="language-plaintext highlighter-rouge">shard</code> option.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[Let's see how to improve the performance of the Action that runs Jest in GitHub Actions.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">[GitHub Actions] Removing duplication in GitHub Actions using Composite Action</title><link href="https://deku.posstree.com/en/github_actions/composite-action/" rel="alternate" type="text/html" title="[GitHub Actions] Removing duplication in GitHub Actions using Composite Action"/><published>2024-10-22T00:00:00+09:00</published><updated>2024-11-13T18:54:21+09:00</updated><id>https://deku.posstree.com/github_actions/composite-actions-en</id><content type="html" xml:base="https://deku.posstree.com/github_actions/composite-action/"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#outline">Outline</a></li><li><a href="#what-is-composite-action">What is Composite Action</a></li><li><a href="#example-of-github-action-with-duplicate-code">Example of GitHub Action with duplicate code</a></li><li><a href="#creating-composite-action">Creating Composite Action</a></li><li><a href="#using-composite-action">Using Composite Action</a></li><li><a href="#inputs-of-composite-action">inputs of Composite Action</a></li><li><a href="#outputs-of-composite-action">outputs of Composite Action</a></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>When using GitHub Actions for development, there may be parts that are commonly used in multiple Actions. In this case, using Composite Action allows you to consolidate the common parts used in multiple Actions into one Action to increase reusability.</p><p>In this blog post, I will introduce how to use Composite Action to increase the reusability of GitHub Actions.</p><h2 id="what-is-composite-action">What is Composite Action</h2><p>Composite Action is a feature that allows you to use multiple Actions as one Action. By using Composite Action, you can consolidate the common parts used in multiple Actions into one Action to increase reusability.</p><ul><li>Official documentation: <a href="https://docs.github.com/en/actions/sharing-automations/creating-actions/creating-a-composite-action" rel="nofollow noreferrer" target="_blank">Composite Action</a></li></ul><h2 id="example-of-github-action-with-duplicate-code">Example of GitHub Action with duplicate code</h2><p>You can use the following GitHub Actions in a project using React.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Check</span><span class="nv"> </span><span class="s">code'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">cspell</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn cspell</span>
  <span class="na">remark</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn remark</span>
  <span class="na">eslint</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn lint</span>
  <span class="na">stylelint</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn stylelint</span>
  <span class="na">test</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn test</span>
</code></pre></div></div><p>This is a GitHub Actions that runs <code class="language-plaintext highlighter-rouge">CSpell</code>, <code class="language-plaintext highlighter-rouge">Linters</code>, and <code class="language-plaintext highlighter-rouge">Test</code> in a React project. You can see that the part of installing Dependencies is duplicated.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="s">...</span>
      <span class="s">- name</span><span class="err">:</span> <span class="s">Setup node</span>
        <span class="s">uses</span><span class="err">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="s">with</span><span class="err">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="s">...</span>
</code></pre></div></div><p>In the next section, I will introduce how to use Composite Action to consolidate this part and increase reusability.</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="creating-composite-action">Creating Composite Action</h2><p>To create a Composite Action, create the <code class="language-plaintext highlighter-rouge">.github/actions/install-dependencies.yml</code> file and modify it as follows.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Dependencies'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Dependencies'</span>

<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
</code></pre></div></div><p>To use <code class="language-plaintext highlighter-rouge">Composite Action</code>, set <code class="language-plaintext highlighter-rouge">composite</code> to the <code class="language-plaintext highlighter-rouge">using</code> keyword to indicate that it is a Composite Action. Then, write the steps to execute the Composite Action in <code class="language-plaintext highlighter-rouge">steps</code>.</p><p>When executing a command, you need to set <code class="language-plaintext highlighter-rouge">bash</code> to the <code class="language-plaintext highlighter-rouge">shell</code> keyword to use the bash shell.</p><h2 id="using-composite-action">Using Composite Action</h2><p>To use the Composite Action, modify the GitHub Actions as follows.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Check</span><span class="nv"> </span><span class="s">code'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">cspell</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn cspell</span>
  <span class="na">remark</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn remark</span>
  <span class="na">eslint</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn lint</span>
  <span class="na">stylelint</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn stylelint</span>
  <span class="na">test</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn test</span>
</code></pre></div></div><p>I have modified the GitHub Actions to use the Composite Action like following.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="s">...</span>
       <span class="s">- name</span><span class="err">:</span> <span class="s">Checkout code</span>
        <span class="s">uses</span><span class="err">:</span> <span class="s">actions/checkout@v4</span>
        <span class="s">with</span><span class="err">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
<span class="err">      </span><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="s">...</span>
</code></pre></div></div><p>Since the <code class="language-plaintext highlighter-rouge">Composite Action</code> is managed in the <code class="language-plaintext highlighter-rouge">.github</code> folder, you need to check out the code first using <code class="language-plaintext highlighter-rouge">actions/checkout</code>. Then, you can use the Composite Action by writing the path of the Composite Action in the <code class="language-plaintext highlighter-rouge">uses</code> keyword.</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="inputs-of-composite-action">inputs of Composite Action</h2><p>Sometimes, you need to pass a specific value to the Composite Action when using the <code class="language-plaintext highlighter-rouge">Composite Action</code>. In this case, you can use the <code class="language-plaintext highlighter-rouge">inputs</code> of the <code class="language-plaintext highlighter-rouge">Composite Action</code> to pass the value.</p><p>To use the <code class="language-plaintext highlighter-rouge">inputs</code> of the <code class="language-plaintext highlighter-rouge">Composite Action</code>, modify the <code class="language-plaintext highlighter-rouge">Composite Action</code> as follows.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Composite</span><span class="nv"> </span><span class="s">Action</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">inputs'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Composite</span><span class="nv"> </span><span class="s">Action</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">inputs'</span>
<span class="na">inputs</span><span class="pi">:</span>
  <span class="na">variable_name</span><span class="pi">:</span>
    <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Description</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">variable'</span>
    <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">default</span><span class="pi">:</span> <span class="s1">'</span><span class="s">variabel_default_value'</span>
<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print Composite Action inputs variable</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo ${{ inputs.variable_name }}</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>

</code></pre></div></div><p>If you use <code class="language-plaintext highlighter-rouge">inputs</code>, you can make <code class="language-plaintext highlighter-rouge">Composite Action</code> execute differently depending on the condition.</p><p>To use the <code class="language-plaintext highlighter-rouge">inputs</code> of the <code class="language-plaintext highlighter-rouge">Composite Action</code>, modify the <code class="language-plaintext highlighter-rouge">GitHub Actions</code> as follows.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
      <span class="s">...</span>
      <span class="s">- name</span><span class="err">:</span> <span class="s">Checkout code</span>
        <span class="s">uses</span><span class="err">:</span> <span class="s">actions/checkout@v4</span>
        <span class="s">with</span><span class="err">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
<span class="err">      </span><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Composite Action with inputs</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/composite_action</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">variable_name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">test_input_value'</span>
      <span class="s">...</span>

</code></pre></div></div><h2 id="outputs-of-composite-action">outputs of Composite Action</h2><p>Sometimes, you need to receive a specific value from the <code class="language-plaintext highlighter-rouge">Composite Action</code> to execute the Action. In this case, you can use the <code class="language-plaintext highlighter-rouge">outputs</code> of the <code class="language-plaintext highlighter-rouge">Composite Action</code> to pass the value.</p><p>To use the <code class="language-plaintext highlighter-rouge">outputs</code> of the <code class="language-plaintext highlighter-rouge">Composite Action</code>, modify the <code class="language-plaintext highlighter-rouge">Composite Action</code> as follows.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Composite</span><span class="nv"> </span><span class="s">Action</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">outputs'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Composite</span><span class="nv"> </span><span class="s">Action</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">outputs'</span>
<span class="na">outputs</span><span class="pi">:</span>
  <span class="na">variable_name</span><span class="pi">:</span>
    <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">variable</span><span class="nv"> </span><span class="s">description"</span>
    <span class="na">value</span><span class="pi">:</span> <span class="s">${{ steps.output_step.outputs.output_variable_name }}</span>
<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set outputs</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">output_step</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo "output_variable_name=test_output_value" &gt;&gt; $GITHUB_OUTPUT</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>

</code></pre></div></div><p>After making <code class="language-plaintext highlighter-rouge">Composite Action</code> like this, you can use the <code class="language-plaintext highlighter-rouge">outputs</code> of the <code class="language-plaintext highlighter-rouge">Composite Action</code> as follows.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
      <span class="s">...</span>
      <span class="s">- name</span><span class="err">:</span> <span class="s">Checkout code</span>
        <span class="s">uses</span><span class="err">:</span> <span class="s">actions/checkout@v4</span>
        <span class="s">with</span><span class="err">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
<span class="err">      </span><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Composite Action with outputs</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">composite_action</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/composite_action</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print Composite Action outputs variable</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo ${{ steps.composite_action.outputs.variable_name }}</span>
      <span class="s">...</span>

</code></pre></div></div><p>If you use <code class="language-plaintext highlighter-rouge">outputs</code>, you can create an <code class="language-plaintext highlighter-rouge">Action</code> that uses the results of the <code class="language-plaintext highlighter-rouge">Composite Action</code>.</p><h2 id="completed">Completed</h2><p>Done! We’ve seen how to use <code class="language-plaintext highlighter-rouge">Composite Action</code> to remove duplication in GitHub Actions and increase the reusability of Actions.</p><p>If you want to remove duplication and increase the reusability of Actions, try using <code class="language-plaintext highlighter-rouge">Composite Action</code>.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[Let's see how to use Composite Action to remove duplication in GitHub Actions and increase the reusability of Actions.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">Mistakes Management Strategy</title><link href="https://deku.posstree.com/en/essay/mistakes-management/" rel="alternate" type="text/html" title="Mistakes Management Strategy"/><published>2024-10-15T00:00:00+09:00</published><updated>2024-12-03T20:54:19+09:00</updated><id>https://deku.posstree.com/essay/mistakes-management-en</id><content type="html" xml:base="https://deku.posstree.com/essay/mistakes-management/"><![CDATA[<p>Everyone makes mistakes. No matter how careful you are and how many times you check, mistakes happen. Even people we call experts make an average of 3-5 mistakes per hour.</p><p>Companies and teams are made up of people, and people create products and services. Therefore, the bugs and errors occur in products and services, and companies need to solve these problems (mistakes).</p><p>Companies can use strategies called <code class="language-plaintext highlighter-rouge">mistake prevention</code> and <code class="language-plaintext highlighter-rouge">mistake management</code> to deal with these mistakes.</p><ul><li>Mistake prevention: A strategy to prevent mistakes. A strategy that blocks the path to mistakes and demands that mistakes not be made.</li><li>Mistake management: A strategy to quickly detect and resolve mistakes even if they occur.</li></ul><blockquote><p>In a famous hospital in the Midwest, in 2006, there was an incident where babies in the neonatal ward were given heparin 1,000 times the standard dose. Over a week, five nurses administered it to a total of six babies, three of whom died and the other three were seriously injured. What’s even more surprising is that there was a similar incident in the hospital in 2001, and as a result, the hospital was recognized as an excellent hospital because it operated a safety program. However, according to the investigation, this incident occurred because the hospital’s safety process was too reliable. The nurses, who believed that there was no room for error when the pharmacist prepared heparin thanks to the new standard operating procedures, no longer paid attention to what they should check when administering the drug. In fact, the method was effective until the accident occurred.</p></blockquote><p>This example used the <code class="language-plaintext highlighter-rouge">mistake prevention</code> strategy, but another mistake occurred because this strategy was believed too much.</p><p>The nurses believed that the safety process was perfect, so they believed that the pharmacist would not make a mistake in preparing heparin. Nurses who believed in this safety process made a mistake by not paying attention to what they should check when administering the drug, and this problem occurred again.</p><p><code class="language-plaintext highlighter-rouge">Mistake prevention</code> is a strategy to prevent mistakes, but it is impossible to prevent people from making mistakes. Therefore, this strategy is actually impossible to execute.</p><p><code class="language-plaintext highlighter-rouge">Mistake management</code> is a strategy that recognizes that mistakes can occur at any time and instead quickly detects and corrects them before they get worse.</p><p><code class="language-plaintext highlighter-rouge">Mistake prevention</code> often leads to a tendency to hide mistakes because people are often blamed and punished for making mistakes.</p><p><code class="language-plaintext highlighter-rouge">Mistake management</code> often leads to a tendency to share and learn from mistakes because it tries to fix mistakes before they become a bigger problem.</p><p>Even experts make an average of 3-5 mistakes per hour, but the reason why companies do not fail and services continue to operate is that experts detect mistakes early and take quick action. Experts acknowledge that they can make mistakes and make efforts to detect and correct them quickly before they develop into worse situations.</p><p>According to <a href="https://www.researchgate.net/publication/7453312_Organizational_Error_Management_Culture_and_Its_Impact_on_Performance_A_Two-Study_Replication" rel="nofollow noreferrer" target="_blank">Cathy van Dyck, Michael Frese, Markus Baer, &amp; Doris Sonnentag. (2005) Organizational error management culture and its impact on performance: A two-study replication. Journal of Applied Psychology</a>, companies that use mistake management strategies rather than mistake prevention strategies have a higher level of innovation. This study also found that mistake management strategies increase a company’s profitability more than mistake prevention strategies.</p><p>People learn a lot through mistakes. In other words, if you don’t make mistakes, you can’t learn. So, mistake management strategies lead to better learning. If the company tells employees not to make mistakes, it is like telling them not to learn. There are many studies that show that encouraging employees to experience various mistakes, learn from them, and teach them how to deal with mistakes is a more effective educational method. The company doesn’t need to encourage employees to experience mistakes, but it needs to create an environment where they can learn from their mistakes.</p><p>The mistake management strategy can be expanded to <code class="language-plaintext highlighter-rouge">secondary mistake prevention</code>. <code class="language-plaintext highlighter-rouge">Secondary mistake prevention</code> is to learn from the mistakes that have already occurred and plan to act differently next time.</p><p>To take a mistake management strategy, you need to quickly detect mistakes through <code class="language-plaintext highlighter-rouge">monitoring</code>. And you need to <code class="language-plaintext highlighter-rouge">respond</code> quickly. After responding, you need to <code class="language-plaintext highlighter-rouge">learn</code> from the mistake and take <code class="language-plaintext highlighter-rouge">preventive</code> measures to prevent the same mistake from happening again.</p><ul><li>Monitoring &gt; Responding &gt; Learning &gt; Preventing</li></ul><p>In conclusion, everyone makes mistakes. Even experts make an average of 3-5 mistakes per hour. People learn through mistakes. Rather than preventing mistakes, a strategy to manage mistakes increases the level of innovation in companies and increases profitability. Therefore, it is important to recognize that it is impossible to prevent mistakes and make efforts to manage mistakes. The most effective way to manage mistakes is to monitor whether mistakes are occurring, respond quickly when they occur, learn from them, and take preventive measures to prevent the same mistakes from happening again.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="essay"/><summary type="html"><![CDATA[Let's see how organizations manage mistakes and the impact of strategies for mistakes on the team.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/essay/2024/mistakes-management/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/essay/2024/mistakes-management/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">[Flutter] How to use PageView widget</title><link href="https://deku.posstree.com/en/flutter/widgets/page_view/" rel="alternate" type="text/html" title="[Flutter] How to use PageView widget"/><published>2024-10-11T00:00:00+09:00</published><updated>2024-10-21T20:59:58+09:00</updated><id>https://deku.posstree.com/flutter/widgets/widget-page-view-en</id><content type="html" xml:base="https://deku.posstree.com/flutter/widgets/page_view/"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#pageview-widget">PageView widget</a></li><li><a href="#how-to-use-pageview">How to use PageView</a></li><li><a href="#pagecontorller">PageContorller</a></li><li><a href="#scrolldirection-property">scrollDirection property</a></li><li><a href="#onpagechanged-property">onPageChanged property</a></li><li><a href="#pageview-builder">PageView Builder</a></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>When you develop an app with Flutter, sometimes you want to implement a feature that scrolls the entire screen like <code class="language-plaintext highlighter-rouge">TikTok</code>. In this case, you can easily implement it using the <code class="language-plaintext highlighter-rouge">PageView</code> widget provided by Flutter.</p><p>In this blog post, I will introduce how to use the <code class="language-plaintext highlighter-rouge">PageView</code> widget.</p><p>You can see the full source code introduced in this blog post at the link below.</p><ul><li>GitHub: <a href="https://github.com/dev-yakuza/study-flutter/tree/main/widget/page_view" rel="nofollow noreferrer" target="_blank">https://github.com/dev-yakuza/study-flutter/tree/main/widget/page_view</a></li></ul><h2 id="pageview-widget">PageView widget</h2><p>The <code class="language-plaintext highlighter-rouge">PageView</code> widget provided by Flutter allows you to scroll the entire screen. You can set up pages by passing multiple widgets through the <code class="language-plaintext highlighter-rouge">children</code> property.</p><picture><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" type="image/avif"/><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" type="image/webp"/><img src="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" alt="Flutter - PageView widget scroll vertical"/></picture><p>You can see the details of the <code class="language-plaintext highlighter-rouge">PageView</code> widget in the following official document.</p><ul><li>Official document: <a href="https://api.flutter.dev/flutter/widgets/PageView-class.html" rel="nofollow noreferrer" target="_blank">PageView class</a></li></ul><h2 id="how-to-use-pageview">How to use PageView</h2><p>The <code class="language-plaintext highlighter-rouge">PageView</code> widget is basically provided by Flutter, so you can easily use the <code class="language-plaintext highlighter-rouge">PageView</code> widget as follows.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyHomePage</span> <span class="kd">extends</span> <span class="n">StatelessWidget</span> <span class="p">{</span>
  <span class="n">MyHomePage</span><span class="p">({</span><span class="k">super</span><span class="o">.</span><span class="na">key</span><span class="p">});</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">body:</span> <span class="n">PageView</span><span class="p">(</span>
        <span class="nl">children:</span> <span class="p">[</span>
          <span class="n">Container</span><span class="p">(</span>
            <span class="nl">width:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">height:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">red</span><span class="p">,</span>
          <span class="p">),</span>
          <span class="n">Container</span><span class="p">(</span>
            <span class="nl">width:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">height:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">blue</span><span class="p">,</span>
          <span class="p">),</span>
          <span class="n">Container</span><span class="p">(</span>
            <span class="nl">width:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">height:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">green</span><span class="p">,</span>
          <span class="p">),</span>
        <span class="p">],</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div><p>When you set the widgets you want to display on the screen in the <code class="language-plaintext highlighter-rouge">children</code> of the <code class="language-plaintext highlighter-rouge">PageView</code> widget, you can scroll the entire screen to move between pages like the following.</p><picture><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_horizontal.gif" type="image/avif"/><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_horizontal.gif" type="image/webp"/><img src="/assets/images/category/flutter/2024/page_view/page_view_scroll_horizontal.gif" alt="Flutter - PageView widget scroll horizontal"/></picture><p>In here, I use the <code class="language-plaintext highlighter-rouge">Container</code> widget to easily check the implementation.</p><h2 id="pagecontorller">PageContorller</h2><p>You can use the <code class="language-plaintext highlighter-rouge">PageContorller</code> to determine the initial page to display.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyHomePage</span> <span class="kd">extends</span> <span class="n">StatelessWidget</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">pageController</span> <span class="o">=</span> <span class="n">PageController</span><span class="p">(</span>
    <span class="nl">initialPage:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="p">);</span>

  <span class="n">MyHomePage</span><span class="p">({</span><span class="k">super</span><span class="o">.</span><span class="na">key</span><span class="p">});</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">body:</span> <span class="n">PageView</span><span class="p">(</span>
        <span class="nl">controller:</span> <span class="n">pageController</span><span class="p">,</span>
        <span class="nl">children:</span> <span class="p">[</span>
          <span class="p">...</span>
        <span class="p">],</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div><p>You can set the index of the page to be displayed initially in the <code class="language-plaintext highlighter-rouge">initialPage</code> property of the <code class="language-plaintext highlighter-rouge">PageController</code>. After modifying the code like this and running the app again, you can see that the initially displayed page has changed.</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="scrolldirection-property">scrollDirection property</h2><p>You can set the scroll direction using the <code class="language-plaintext highlighter-rouge">scrollDirection</code> property of the <code class="language-plaintext highlighter-rouge">PageView</code> widget. By default, the <code class="language-plaintext highlighter-rouge">scrollDirection</code> property is set to <code class="language-plaintext highlighter-rouge">Axis.horizontal</code>, but you can set it to <code class="language-plaintext highlighter-rouge">Axis.vertical</code> to scroll vertically.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PageView</span><span class="p">(</span>
  <span class="nl">controller:</span> <span class="n">pageController</span><span class="p">,</span>
  <span class="nl">scrollDirection:</span> <span class="n">Axis</span><span class="o">.</span><span class="na">vertical</span><span class="p">,</span>
  <span class="nl">children:</span> <span class="p">[</span>
    <span class="p">...</span>
  <span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div><p>When you modify the code like this, you can scroll vertically like the following.</p><picture><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" type="image/avif"/><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" type="image/webp"/><img src="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" alt="Flutter - PageView widget scroll vertical"/></picture><h2 id="onpagechanged-property">onPageChanged property</h2><p>You can set a callback function that is called when the page is changed using the <code class="language-plaintext highlighter-rouge">onPageChanged</code> property of the <code class="language-plaintext highlighter-rouge">PageView</code> widget. This allows you to perform additional tasks when the page is changed.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PageView</span><span class="p">(</span>
  <span class="nl">controller:</span> <span class="n">pageController</span><span class="p">,</span>
  <span class="nl">onPageChanged:</span> <span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">print</span><span class="p">(</span><span class="s">'Page changed to </span><span class="si">$index</span><span class="s">'</span><span class="p">);</span>
  <span class="p">},</span>
  <span class="nl">children:</span> <span class="p">[</span>
    <span class="p">...</span>
  <span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div><h2 id="pageview-builder">PageView Builder</h2><p>You can dynamically create pages using the <code class="language-plaintext highlighter-rouge">PageView.builder</code> constructor of the <code class="language-plaintext highlighter-rouge">PageView</code> widget. You can pass a function that creates pages through the <code class="language-plaintext highlighter-rouge">itemBuilder</code> property.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PageView</span><span class="o">.</span><span class="na">builder</span><span class="p">(</span>
  <span class="nl">controller:</span> <span class="n">pageController</span><span class="p">,</span>
  <span class="nl">itemCount:</span> <span class="mi">10</span><span class="p">,</span>
  <span class="nl">itemBuilder:</span> <span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Container</span><span class="p">(</span>
      <span class="nl">width:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
      <span class="nl">height:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
      <span class="nl">color:</span> <span class="n">index</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">Colors</span><span class="o">.</span><span class="na">red</span> <span class="o">:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">blue</span><span class="p">,</span>
    <span class="p">);</span>
  <span class="p">},</span>
<span class="p">)</span>
</code></pre></div></div><h2 id="completed">Completed</h2><p>Done! We’ve seen how to scroll the entire page using the <code class="language-plaintext highlighter-rouge">PageView</code> widget provided by Flutter. By using the <code class="language-plaintext highlighter-rouge">PageView</code> widget, you can easily scroll the entire page, and you can set the scroll direction using the <code class="language-plaintext highlighter-rouge">scrollDirection</code> property.</p><p>When you use the <code class="language-plaintext highlighter-rouge">PageView</code> widget, you can easily implement a feature like the <code class="language-plaintext highlighter-rouge">TikTok</code> app. If you need a feature that scrolls the entire screen in the app you are developing, try implementing it using the <code class="language-plaintext highlighter-rouge">PageView</code> widget.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="flutter"/><summary type="html"><![CDATA[Let's see how to use the PageView widget provided by Flutter to scroll the entire page.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/flutter/background.png"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/flutter/background.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">[Flutter] Test Matcher</title><link href="https://deku.posstree.com/en/flutter/test/matcher/" rel="alternate" type="text/html" title="[Flutter] Test Matcher"/><published>2024-10-06T00:00:00+09:00</published><updated>2024-10-09T09:48:41+09:00</updated><id>https://deku.posstree.com/flutter/test/test-matcher-en</id><content type="html" xml:base="https://deku.posstree.com/flutter/test/matcher/"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#matcher">Matcher</a></li><li><a href="#frequently-used-matchers">Frequently Used Matchers</a></li><li><a href="#compoleted">Compoleted</a></li></ul></div><h2 id="outline">Outline</h2><p>When writing test code in Flutter, you can use various of <code class="language-plaintext highlighter-rouge">Matcher</code>. In this blog post, I will introduce the <code class="language-plaintext highlighter-rouge">Matcher</code> available in Flutter’s test code and how to use it.</p><h2 id="matcher">Matcher</h2><p>In test code, Matcher is a verification tool used to verify specific values or conditions. When comparing whether the actual value matches the expected value or state, using Matcher allows you to write more expressive and readable test code.</p><p>In Flutter’s test code, Matcher is mainly used when checking if a value meets the expected condition through the <code class="language-plaintext highlighter-rouge">expect</code> statement. Matcher supports not only simple value comparisons, but also more complex conditions and various types of verification.</p><p>For example:</p><ul><li>equals: You can compare if a value is the same as a specific value.</li><li>isNull: You can check if a value is null.</li><li>contains: You can check if a collection or string contains a specific item.</li><li>throwsException: You can check if a function throws an exception.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">test</span><span class="p">(</span><span class="s">'Example'</span><span class="p">,</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">contains</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">isNotEmpty</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">'Error'</span><span class="p">),</span> <span class="n">throwsException</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div><p>Using Matcher makes the test code more intuitive and readable, improving readability, and allowing you to handle complex conditions or states concisely. Also, you can combine multiple conditions or negate them, making it possible to write more flexible tests.</p><h2 id="frequently-used-matchers">Frequently Used Matchers</h2><p>If you check Flutter’s official documentation, you can see the available Matchers.</p><ul><li>Official document: <a href="https://pub.dev/documentation/matcher/latest/matcher/matcher-library.html" rel="nofollow noreferrer" target="_blank">https://pub.dev/documentation/matcher/latest/matcher/matcher-library.html</a></li></ul><p>Here, I will introduce frequently used Matchers.</p><ul><li>equals(expected): Check if the given value is the same as expected.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">actual</span><span class="p">,</span> <span class="n">equals</span><span class="p">(</span><span class="n">expected</span><span class="p">));</span>
</code></pre></div></div><ul><li>isNot(matcher): Check if the value does not match the given matcher.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">actual</span><span class="p">,</span> <span class="n">isNot</span><span class="p">(</span><span class="n">equals</span><span class="p">(</span><span class="mi">5</span><span class="p">)));</span>
</code></pre></div></div><ul><li>isTrue / isFalse: Check if the value is true or false.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">isTrue</span><span class="p">);</span>
</code></pre></div></div><ul><li>contains(element): Check if a specific element is included in the collection or string.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="n">contains</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</code></pre></div></div><ul><li>isNull / isNotNull: Check if the value is null or not null.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">isNull</span><span class="p">);</span>
<span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">isNotNull</span><span class="p">);</span>
</code></pre></div></div><ul><li>greaterThan(value) / lessThan(value): Check if the value is greater than or less than the given value.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">greaterThan</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
</code></pre></div></div><ul><li>startsWith(prefix) / endsWith(suffix): Check if the string starts or ends with a specific string.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="s">'Flutter'</span><span class="p">,</span> <span class="n">startsWith</span><span class="p">(</span><span class="s">'Fl'</span><span class="p">));</span>
</code></pre></div></div><ul><li>throwsException / throwsA(matcher): Check if a specific exception occurs.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">someFunction</span><span class="p">(),</span> <span class="n">throwsException</span><span class="p">);</span>
</code></pre></div></div><ul><li>allOf(matcher1, matcher2, …): Check if all the given matchers match.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">allOf</span><span class="p">(</span><span class="n">startsWith</span><span class="p">(</span><span class="s">'Fl'</span><span class="p">),</span> <span class="n">contains</span><span class="p">(</span><span class="s">'utt'</span><span class="p">)));</span>
</code></pre></div></div><ul><li>anyOf(matcher1, matcher2, …): Check if any of the given matchers match.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">anyOf</span><span class="p">(</span><span class="n">equals</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">equals</span><span class="p">(</span><span class="mi">2</span><span class="p">)));</span>
</code></pre></div></div><ul><li>isA<T>(): Check if the value is a specific type.</T></li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">isA</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;());</span>
</code></pre></div></div><h2 id="compoleted">Compoleted</h2><p>Done! We’ve seen the Matchers available in Flutter’s test code. By using Matcher, you can write test code more intuitively and readably, and verify various conditions and states.</p><p>In my case, I’ve often used the following code in Flutter’s widget tests.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">titleContainer</span><span class="o">.</span><span class="na">child</span><span class="o">.</span><span class="na">runtimeType</span><span class="p">,</span> <span class="n">Container</span><span class="p">);</span>
</code></pre></div></div><p>If using the <code class="language-plaintext highlighter-rouge">isA&lt;T&gt;()</code> Matcher, you can express it more clearly as follows.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">titleContainer</span><span class="o">.</span><span class="na">child</span><span class="p">,</span> <span class="n">isA</span><span class="p">&lt;</span><span class="n">Container</span><span class="p">&gt;());</span>
</code></pre></div></div><p>I hope you can use Matcher to write test code more efficiently and readably.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="flutter"/><summary type="html"><![CDATA[Let's see the Matchers available in Flutter test code and how to use them.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/flutter/background.png"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/flutter/background.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">[GitHub] How to use multiple GitHub accounts on one machine</title><link href="https://deku.posstree.com/en/git/user-multiple-github-users/" rel="alternate" type="text/html" title="[GitHub] How to use multiple GitHub accounts on one machine"/><published>2024-09-25T00:00:00+09:00</published><updated>2024-10-05T20:48:48+09:00</updated><id>https://deku.posstree.com/git/use-multiple-github-users-en</id><content type="html" xml:base="https://deku.posstree.com/git/user-multiple-github-users/"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#create-ssh-key">Create SSH key</a></li><li><a href="#register-ssh-key-on-github">Register SSH key on GitHub</a></li><li><a href="#modify-config-file">Modify config file</a></li><li><a href="#clone">Clone</a></li><li><a href="#git-user-settings">Git user settings</a></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>Sometimes you may want to use both your company’s GitHub account and your personal GitHub account on one machine (PC). In this blog post, I will introduce how to set up multiple GitHub accounts on one machine.</p><h2 id="create-ssh-key">Create SSH key</h2><p>To use multiple GitHub accounts, you need to create an SSH key. I use <code class="language-plaintext highlighter-rouge">macOS</code>, so I will explain based on <code class="language-plaintext highlighter-rouge">macOS</code>.</p><p>First, go to the <code class="language-plaintext highlighter-rouge">.ssh</code> directory.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/.ssh
</code></pre></div></div><p>Next, use the <code class="language-plaintext highlighter-rouge">ssh-keygen</code> command to create an SSH key. First, create an SSH key for your personal account.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"GITHUB_PERSONAL_ACCOUNT_EMAIL"</span>
</code></pre></div></div><p>Then, you will be asked what name to save the key as.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Enter file <span class="k">in </span>which to save the key <span class="o">(</span>/Users/user_name/.ssh/id_rsa<span class="o">)</span>:
</code></pre></div></div><p>In my case, I saved it as <code class="language-plaintext highlighter-rouge">id_rsa_personal</code> for easy distinction. Next, create an SSH key for your company account.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"GITHUB_COMPANY_ACCOUNT_EMAIL"</span>
</code></pre></div></div><p>Again, you will be asked what name to save the key as.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Enter file <span class="k">in </span>which to save the key <span class="o">(</span>/Users/user_name/.ssh/id_rsa<span class="o">)</span>:
</code></pre></div></div><p>In my case, I saved it as <code class="language-plaintext highlighter-rouge">id_rsa_work</code> for easy distinction.</p><h2 id="register-ssh-key-on-github">Register SSH key on GitHub</h2><p>You need to register the generated SSH key on GitHub. First, let’s register the SSH key for the personal account.</p><p>Run the following command to check the SSH key.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> ~/.ssh/id_rsa_personal.pub
</code></pre></div></div><p>Copy the displayed SSH key and go to the GitHub website. Click <code class="language-plaintext highlighter-rouge">Settings</code> -&gt; <code class="language-plaintext highlighter-rouge">SSH and GPG keys</code> -&gt; <code class="language-plaintext highlighter-rouge">New SSH key</code> to register the SSH key. You need to be logged in with your personal account on the GitHub website.</p><picture><source srcset="/assets/images/category/git/2024/user-multiple-github-users/github_register_new_ssh_key.avif" type="image/avif"/><source srcset="/assets/images/category/git/2024/user-multiple-github-users/github_register_new_ssh_key.webp" type="image/webp"/><img src="/assets/images/category/git/2024/user-multiple-github-users/github_register_new_ssh_key.png" alt="Use multiple GitHub users in local machine: Register new SSH key"/></picture><p>Register the SSH key on the GitHub website in the same way for the company account. You need to be logged in with your company account on the GitHub website.</p><h2 id="modify-config-file">Modify config file</h2><p>To distinguish between GitHub accounts using the SSH key you set up, modify the <code class="language-plaintext highlighter-rouge">~/.ssh/config</code> file as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># personal</span>

Host personal
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa_personal

<span class="c"># work</span>

Host github.com
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa_work
</code></pre></div></div><p>Then, execute the following command to check if the SSH key is registered.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-T</span> git@personal
</code></pre></div></div><p>If the following message appears, the SSH key has been successfully registered.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hi GITHUB_PERSONAL_ACCOUNT! You<span class="s1">'ve successfully authenticated, but GitHub does not provide shell access.
</span></code></pre></div></div><p>In the same way, execute the following command to check if the SSH key is registered for the company account.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-T</span> git@github.com
</code></pre></div></div><p>If the following message appears, the SSH key has been successfully registered.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hi GITHUB_COMPANY_ACCOUNT! You<span class="s1">'ve successfully authenticated, but GitHub does not provide shell access.
</span></code></pre></div></div><h2 id="clone">Clone</h2><p>Now, when you clone a project from GitHub, you can distinguish between your personal account and your company account as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Personal account</span>
git clone git@personal:GITHUB_PERSONAL_ACCOUNT/REPOSITORY.git
<span class="c"># Company account</span>
git clone git@github.com:GITHUB_COMPANY_ACCOUNT/REPOSITORY.git
</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="git-user-settings">Git user settings</h2><p>When you execute the following command, you can check the <code class="language-plaintext highlighter-rouge">user.name</code> and <code class="language-plaintext highlighter-rouge">user.email</code> set in <code class="language-plaintext highlighter-rouge">Git</code>.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check user name</span>
git config user.name
<span class="c"># Check user email</span>
git config user.email
</code></pre></div></div><p>If you have not registered user information in the <code class="language-plaintext highlighter-rouge">Global</code> settings of <code class="language-plaintext highlighter-rouge">Git</code>, nothing will appear when you execute the command.</p><p>You can set the <code class="language-plaintext highlighter-rouge">Global</code> user and set the user to use in specific folders by modifying the <code class="language-plaintext highlighter-rouge">.gitconfig</code> file.</p><p>First, create the <code class="language-plaintext highlighter-rouge">~/.gitconfig-work</code> file and the <code class="language-plaintext highlighter-rouge">~/.gitconfig-personal</code> file and modify them as follows.</p><ul><li><code class="language-plaintext highlighter-rouge">~/.gitconfig-work</code></li></ul><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># code ~/.gitconfig-work</span>
<span class="o">[</span>user]
	name <span class="o">=</span> <span class="s2">"GITHUB_COMPANY_ACCOUNT_USER_NAME"</span>
	email <span class="o">=</span> GITHUB_COMPANY_ACCOUNT_EMAIL
</code></pre></div></div><ul><li><code class="language-plaintext highlighter-rouge">~/.gitconfig-personal</code></li></ul><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># code ~/.gitconfig-personal</span>
<span class="o">[</span>user]
    name <span class="o">=</span> <span class="s2">"GITHUB_PERSONAL_ACCOUNT_USER_NAME"</span>
    email <span class="o">=</span> GITHUB_PERSONAL_ACCOUNT_EMAIL
</code></pre></div></div><p>Then, modify the <code class="language-plaintext highlighter-rouge">.gitconfig</code> file as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># code ~/.gitconfig</span>

<span class="c"># This is for Global settings</span>
<span class="o">[</span>user]
	name <span class="o">=</span> <span class="s2">"GITHUB_COMPANY_ACCOUNT_USER_NAME"</span>
	email <span class="o">=</span> GITHUB_COMPANY_ACCOUNT_EMAIL
<span class="c"># For company account</span>
<span class="o">[</span>includeIf <span class="s2">"gitdir:~/WORK/"</span><span class="o">]</span>
    path <span class="o">=</span> ~/.gitconfig-work
<span class="c"># For personal account</span>
<span class="o">[</span>includeIf <span class="s2">"gitdir:~/PERSONAL/"</span><span class="o">]</span>
    path <span class="o">=</span> ~/.gitconfig-personal
</code></pre></div></div><p>In this setting, the user information for the company account is set as the <code class="language-plaintext highlighter-rouge">Global</code> user of <code class="language-plaintext highlighter-rouge">Git</code>. In the <code class="language-plaintext highlighter-rouge">WORK</code> folder, the company account is used, and in the <code class="language-plaintext highlighter-rouge">PERSONAL</code> folder, the personal account is used.</p><p>To check if the settings are correct, go to the <code class="language-plaintext highlighter-rouge">PERSONAL</code> folder. Then, execute the following command to check the user information.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/PERSONAL
git config user.name
git config user.email
</code></pre></div></div><p>Then, the <code class="language-plaintext highlighter-rouge">Global</code> user information of <code class="language-plaintext highlighter-rouge">Git</code> will be displayed as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># git config user.name</span>
GITHUB_COMPANY_ACCOUNT_USER_NAME
<span class="c"># git config user.email</span>
GITHUB_COMPANY_ACCOUNT_EMAIL
</code></pre></div></div><p>This is because there is no <code class="language-plaintext highlighter-rouge">Git</code> project in the current folder (<code class="language-plaintext highlighter-rouge">PERSONAL</code>) at the moment. So, the <code class="language-plaintext highlighter-rouge">Global</code> user information of <code class="language-plaintext highlighter-rouge">Git</code> is displayed.</p><p>Next, let’s create an actual <code class="language-plaintext highlighter-rouge">Git</code> project and check the user information of <code class="language-plaintext highlighter-rouge">Git</code>.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> ~/PERSONAL/temp
<span class="nb">cd</span> ~/PERSONAL/temp
git init
git config user.name
git config user.email
</code></pre></div></div><p>Then, then personal account user information of <code class="language-plaintext highlighter-rouge">Git</code> will be displayed as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GITHUB_PERSONAL_ACCOUNT_USER_NAME
GITHUB_COMPANY_ACCOUNT_EMAIL
</code></pre></div></div><p>This is because we have set the personal account user information in the <code class="language-plaintext highlighter-rouge">.gitconfig</code> file as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>includeIf <span class="s2">"gitdir:~/PERSONAL/"</span><span class="o">]</span>
    path <span class="o">=</span> ~/.gitconfig-personal
</code></pre></div></div><h2 id="completed">Completed</h2><p>Done! We’ve seen how to use multiple GitHub accounts on one machine. Now you can manage projects without any inconvenience using multiple GitHub accounts on one machine.</p><p>Also, we’ve seen how to set the user to use in specific folders using the <code class="language-plaintext highlighter-rouge">.gitconfig</code> file. You can now easily change the user information of <code class="language-plaintext highlighter-rouge">Git</code>.</p><p>If you need to use multiple <code class="language-plaintext highlighter-rouge">GitHub</code> accounts, I hope you can refer to this blog post and set up and use multiple <code class="language-plaintext highlighter-rouge">GitHub</code> accounts.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="git"/><summary type="html"><![CDATA[Let's see how to set up and use multiple GitHub accounts on one machine (PC).]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/git/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/git/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">The Learning Method of Programmers</title><link href="https://deku.posstree.com/en/essay/studying-way-for-programmer/" rel="alternate" type="text/html" title="The Learning Method of Programmers"/><published>2024-09-18T00:00:00+09:00</published><updated>2024-10-10T09:01:07+09:00</updated><id>https://deku.posstree.com/essay/studying-way-for-programmer-en</id><content type="html" xml:base="https://deku.posstree.com/essay/studying-way-for-programmer/"><![CDATA[<p>The following is a good way for programmers to learn a new language.</p><h2 id="think-about-what-to-make-while-reading-the-tutorial">Think about what to make while reading the tutorial</h2><p>When reading a tutorial for a new language, read it while thinking about a specific program, and if you think you can write the program, stop reading and write the program. When you complete the part that you can write with the current tutorial, go back to where you stopped reading and read it again. Of course, read while keeping in mind the next part of the program you are going to write.</p><p>For example, you read the tutorial with a specific program in mind, such as ‘Create a task list’ or ‘Count the number of words’. By setting a goal like this and reading the tutorial, you will actively read with questions like ‘How can I write a loop in this language?’ and ‘How can I output?’.</p><p>This way of reading is called <code class="language-plaintext highlighter-rouge">active reading</code>. Active reading refers to reading with specific questions or purposes. In education, it is said that actively reading has a positive effect on understanding and memory compared to passively reading.</p><h3 id="sq3r-reading-method">SQ3R Reading Method</h3><p>Among these active reading methods, the most representative method is the <code class="language-plaintext highlighter-rouge">SQ3R (Survey, Question, Read, Recite, Review) Reading Method</code>. SQ3R is a method first introduced by American educational psychologist Robinson (Francis P. Robinson) in Effective Study (1946).</p><p>The SQ3R reading method progresses through the following stages.</p><ol><li>Survey</li></ol><p>Surveying is to quickly look over the entire book and the contents of each chapter before reading the book, and to grasp the relationship between the main concepts. Surveying is progressed in the following way.</p><ul><li>Remember the main title of the chapter you are going to study.</li><li>Quickly read the introduction, overview, and learning objectives of that chapter.</li><li>Pay attention to the subheadings and the titles of the figures.</li><li>Look for clues that show important concepts, such as bold text, italic text, and underlined parts.</li><li>Read the chapter summary by section.</li><li>Look at the list of key concepts.</li></ul><ol><li>Question</li></ol><p>Questioning is to ask questions based on the overview of the chapter. The method of questioning is as follows.</p><ul><li>Ask questions about the definition of the concept mentioned in the title: What is ⚪︎⚪︎?</li><li>Ask questions about the characteristics of the concept: What are the characteristics of ⚪︎⚪︎?</li><li>Ask questions about the relationship between concepts: What is the relationship between ⚪︎⚪︎ and △△?</li><li>Ask questions using the expression of the title: Title - The necessity of ⚪︎⚪︎ → Question - What is the necessity of ⚪︎⚪︎?</li><li>Ask questions about your background knowledge: How much do I know about ⚪︎⚪︎?</li></ul><p>Questioning is to ask questions while reading the book. It is also a good idea to write down the questions you asked while reading the book and check them during the study.</p><ol><li>Read</li></ol><p>Reading is the process of reading the text based on steps 1 and 2 to find answers to the questions you asked. By reading the book to find answers to the questions, you can remember the content longer after reading the book, which is very helpful for memorizing the content more accurately, especially for exam preparation.</p><ol><li>Recite</li></ol><p>Reciting is an important process to prevent forgetting the content you read. Reciting is a way to check how well you understand the content by writing it down yourself. Reciting is progressed in the following way.</p><ul><li>Look at the questions you made yourself.</li><li>Recite or write down your answer to the question without looking at the book.</li><li>Write the answer as completely as possible, and you can write it in the form of an overview, diagram, figure, or formula to help understanding.</li><li>Compare the answer with the book or notes.</li></ul><ol><li>Review</li></ol><p>Reviewing is to regularly and occasionally memorize what you have learned. Reviewing is a very effective method, especially for preparing for exams. Reviewing is progressed in the following way.</p><ul><li>Read the text and notes you have written again.</li><li>Memorize the difficult parts by making flashcards or other methods.</li><li>Test the reviewed content to check how well you memorized it.</li><li>Make an index and concept map of what you have learned.</li></ul><h2 id="read-the-source-code-of-the-standard-library-when-studying">Read the source code of the standard library when studying</h2><p>To write good code, you need to read good code. The standard library is usually written by the person who invented the language or people who follow the style of the language. Therefore, the standard library is composed of the most language-specific codes, and you can learn the culture and style of the language through these codes.</p><p>Following this culture and style may not bring any functional differences to the program, but it can reduce the cost of writing and maintaining the program.</p><h2 id="add-the-function-you-need-to-other-peoples-code-while-studying">Add the function you need to other people’s code while studying</h2><p>You can try to add the function you need to the open-source code written in the language you are studying. By modifying the code you are using, you can get feedback from people who are good at the language and interact with the open-source community.</p><h2 id="become-an-expert-by-effectively-extracting-expertise">Become an expert by effectively extracting expertise</h2><p>You can learn from experts and do what they do. You can quickly improve your expertise by extracting the expertise of the experts around you and applying it. When asking experts for expertise, you should <code class="language-plaintext highlighter-rouge">induce them to talk about specific events</code>. If you ask experts, ‘What is the secret to learning a programming language quickly?’, you will not get a very useful answer. Experts tend to give general answers or theoretical answers that are different from their actual behavior.</p><p>At this time, using cognitive task analysis can extract the expertise of experts.</p><ul><li><a href="https://deku.posstree.com/en/essay/cognitibe-task-analysis/" target="\_blank">Extracting Expertise from Experts through Cognitive Task Analysis</a></li></ul><p>When using cognitive task analysis to ask experts for their expertise, you should <code class="language-plaintext highlighter-rouge">get them to talk about specific events</code> - what was the last language they learned, what they did differently during their time to learn that language, etc. - to identify their implicit decision-making and situational judgments.</p><p>If you want to be good at something, observing and interviewing someone who is already good at it will be a great help.</p><h2 id="completed">Completed</h2><p>Done! We’ve seen the learning methods that programmers can use. If you are learning a new language or trying to become a programmer, please refer to this post and study.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="essay"/><summary type="html"><![CDATA[Let's see what learning methods programmers can use when learning a new language.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/essay/2024/studying-way-for-programmer/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/essay/2024/studying-way-for-programmer/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">[Flutter] Use MultipartRequest in http package to upload files</title><link href="https://deku.posstree.com/en/flutter/http_multipartrequest/" rel="alternate" type="text/html" title="[Flutter] Use MultipartRequest in http package to upload files"/><published>2024-09-17T00:00:00+09:00</published><updated>2024-10-06T11:17:37+09:00</updated><id>https://deku.posstree.com/flutter/http-multipartrequest-en</id><content type="html" xml:base="https://deku.posstree.com/flutter/http_multipartrequest/"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#multipartrequest-to-upload-files">MultipartRequest to upload files</a></li><li><a href="#test-code">Test code</a></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>Sometimes, you need to upload files using the http package in Flutter. In this case, you can upload files using <code class="language-plaintext highlighter-rouge">MultipartRequest</code> in the http package. In this blog post, I will introduce how to upload files using <code class="language-plaintext highlighter-rouge">MultipartRequest</code> and how to test it.</p><h2 id="multipartrequest-to-upload-files">MultipartRequest to upload files</h2><p>The following is an example of uploading files using the <code class="language-plaintext highlighter-rouge">MultipartRequest</code> in the http package.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ExampleAPI</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">token</span><span class="p">;</span>
  <span class="kd">final</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span> <span class="n">httpClient</span><span class="p">;</span>

  <span class="n">ExampleAPI</span><span class="p">({</span>
    <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">token</span><span class="p">,</span>
    <span class="nd">@visibleForTesting</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="o">?</span> <span class="n">mockClient</span><span class="p">,</span>
  <span class="p">})</span> <span class="o">:</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="n">mockClient</span> <span class="o">??</span>
            <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">(</span>
              <span class="s">"POST"</span><span class="p">,</span>
              <span class="kt">Uri</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'</span><span class="si">${ENV.apiServer}</span><span class="s">/api/app'</span><span class="p">),</span>
            <span class="p">);</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="n">InfoData</span><span class="p">&gt;</span> <span class="n">sendData</span><span class="p">({</span>
    <span class="kd">required</span> <span class="n">DateTime</span> <span class="n">date</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">int</span> <span class="n">status</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">int</span> <span class="n">docType</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">note</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">passportImage</span><span class="p">,</span>
    <span class="kt">String</span><span class="o">?</span> <span class="n">certificationImage</span><span class="p">,</span>
    <span class="kt">List</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">&gt;</span><span class="o">?</span> <span class="n">receiptImages</span><span class="p">,</span>
  <span class="p">})</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="n">data</span><span class="p">[</span><span class="s">'date'</span><span class="p">]</span> <span class="o">=</span> <span class="n">dateFormatForSearch</span><span class="p">(</span><span class="n">date</span><span class="p">);</span>
    <span class="n">data</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="si">$status</span><span class="s">'</span><span class="p">;</span>
    <span class="n">data</span><span class="p">[</span><span class="s">'doc_type'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="si">$docType</span><span class="s">'</span><span class="p">;</span>
    <span class="n">data</span><span class="p">[</span><span class="s">'note'</span><span class="p">]</span> <span class="o">=</span> <span class="n">note</span><span class="p">;</span>

    <span class="kt">List</span><span class="p">&lt;</span><span class="n">MultipartFile</span><span class="p">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'passport_image'</span><span class="p">,</span> <span class="n">passportImage</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">jpnCertImg</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">jpnCertImg</span> <span class="o">!=</span> <span class="s">''</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'cert_img'</span><span class="p">,</span> <span class="n">certificationImage</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">receiptImages</span><span class="o">?.</span><span class="na">isNotEmpty</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="n">image</span> <span class="k">in</span> <span class="n">receiptImages</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">image</span> <span class="o">==</span> <span class="s">''</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
        <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'receipt_img[]'</span><span class="p">,</span> <span class="n">image</span><span class="p">));</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">httpClient</span><span class="o">.</span><span class="na">headers</span><span class="o">.</span><span class="na">addAll</span><span class="p">({</span><span class="s">'Authorization'</span><span class="o">:</span> <span class="s">'Bearer </span><span class="si">$token</span><span class="s">'</span><span class="p">});</span>
    <span class="n">httpClient</span><span class="o">.</span><span class="na">fields</span><span class="o">.</span><span class="na">addAll</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
    <span class="n">httpClient</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">addAll</span><span class="p">(</span><span class="n">files</span><span class="p">);</span>

    <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="k">await</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">send</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">Response</span><span class="o">.</span><span class="na">fromStream</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span><span class="o">.</span><span class="na">then</span><span class="p">((</span><span class="n">response</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">final</span> <span class="n">data</span> <span class="o">=</span> <span class="n">jsonDecode</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">decode</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="na">bodyBytes</span><span class="p">));</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'success'</span><span class="p">]</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">InfoData</span><span class="o">.</span><span class="na">fromJson</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'data'</span><span class="p">]);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">'Unknown response'</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div><p>Let’s take a closer look at the part of uploading files using the <code class="language-plaintext highlighter-rouge">MultipartRequest</code> in the http package.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ExampleAPI</span><span class="p">({</span>
  <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">token</span><span class="p">,</span>
  <span class="nd">@visibleForTesting</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="o">?</span> <span class="n">mockClient</span><span class="p">,</span>
<span class="p">})</span> <span class="o">:</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="n">mockClient</span> <span class="o">??</span>
          <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">(</span>
            <span class="s">"POST"</span><span class="p">,</span>
            <span class="kt">Uri</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'</span><span class="si">${ENV.apiServer}</span><span class="s">/api/app'</span><span class="p">),</span>
          <span class="p">);</span>
</code></pre></div></div><p>To upload files using the <code class="language-plaintext highlighter-rouge">MultipartRequest</code>, you first need to create an instance of <code class="language-plaintext highlighter-rouge">http.MultipartRequest</code>.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="p">{};</span>
<span class="n">data</span><span class="p">[</span><span class="s">'date'</span><span class="p">]</span> <span class="o">=</span> <span class="n">dateFormatForSearch</span><span class="p">(</span><span class="n">date</span><span class="p">);</span>
<span class="n">data</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="si">$status</span><span class="s">'</span><span class="p">;</span>
<span class="n">data</span><span class="p">[</span><span class="s">'doc_type'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="si">$docType</span><span class="s">'</span><span class="p">;</span>
<span class="n">data</span><span class="p">[</span><span class="s">'note'</span><span class="p">]</span> <span class="o">=</span> <span class="n">note</span><span class="p">;</span>
</code></pre></div></div><p>The <code class="language-plaintext highlighter-rouge">MultipartRequest</code> can send not only files but also other information. So, I prepared other information to send together.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">List</span><span class="p">&lt;</span><span class="n">MultipartFile</span><span class="p">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="p">[];</span>
<span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'passport_image'</span><span class="p">,</span> <span class="n">passportImage</span><span class="p">));</span>
<span class="k">if</span> <span class="p">(</span><span class="n">jpnCertImg</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">jpnCertImg</span> <span class="o">!=</span> <span class="s">''</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'cert_img'</span><span class="p">,</span> <span class="n">certificationImage</span><span class="p">));</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="n">receiptImages</span><span class="o">?.</span><span class="na">isNotEmpty</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="n">image</span> <span class="k">in</span> <span class="n">receiptImages</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">image</span> <span class="o">==</span> <span class="s">''</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
    <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'receipt_img[]'</span><span class="p">,</span> <span class="n">image</span><span class="p">));</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div><p>The function, which sets the file to upload, receives the path of the file to upload. The path of the file to upload is converted to <code class="language-plaintext highlighter-rouge">MultipartFile</code> using <code class="language-plaintext highlighter-rouge">http.MultipartFile.fromPath</code>.</p><p>When uploading multiple files, you can send them as an array by using <code class="language-plaintext highlighter-rouge">[]</code> like <code class="language-plaintext highlighter-rouge">receipt_img[]</code>.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">httpClient</span><span class="o">.</span><span class="na">headers</span><span class="o">.</span><span class="na">addAll</span><span class="p">({</span><span class="s">'Authorization'</span><span class="o">:</span> <span class="s">'Bearer </span><span class="si">$token</span><span class="s">'</span><span class="p">});</span>
<span class="n">httpClient</span><span class="o">.</span><span class="na">fields</span><span class="o">.</span><span class="na">addAll</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
<span class="n">httpClient</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">addAll</span><span class="p">(</span><span class="n">files</span><span class="p">);</span>
</code></pre></div></div><p>Now, set the <code class="language-plaintext highlighter-rouge">Bearer</code> token in the header to upload the file and add the prepared data to <code class="language-plaintext highlighter-rouge">fields</code>. And add the prepared file to <code class="language-plaintext highlighter-rouge">files</code>.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="k">await</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">send</span><span class="p">();</span>
<span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">Response</span><span class="o">.</span><span class="na">fromStream</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span><span class="o">.</span><span class="na">then</span><span class="p">((</span><span class="n">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">data</span> <span class="o">=</span> <span class="n">jsonDecode</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">decode</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="na">bodyBytes</span><span class="p">));</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'success'</span><span class="p">]</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">InfoData</span><span class="o">.</span><span class="na">fromJson</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'data'</span><span class="p">]);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">'Unknown response'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div><p>Finally, send the data and receive the response. Process the received response according to your app.</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="test-code">Test code</h2><p>Next, let’s see how to test the function that uploads files using the <code class="language-plaintext highlighter-rouge">MultipartRequest</code> in the http package.</p><p>First, the full code is as follows.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nd">@GenerateMocks</span><span class="p">([</span><span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">])</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">mockHttpMultipartRequest</span> <span class="o">=</span> <span class="n">CustomMockMultipartRequest</span><span class="p">();</span>
  <span class="n">setUp</span><span class="p">(()</span> <span class="p">{</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">headers</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">fields</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">when</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">send</span><span class="p">())</span><span class="o">.</span><span class="na">thenAnswer</span><span class="p">(</span>
      <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="kd">final</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">jsonEncode</span><span class="p">({</span>
          <span class="s">'success'</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
          <span class="s">'data'</span><span class="o">:</span> <span class="p">{</span>
            <span class="s">'amount'</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
            <span class="s">'commission'</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
          <span class="p">}</span>
        <span class="p">});</span>
        <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">value</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">encode</span><span class="p">(</span><span class="n">responseBody</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">StreamedResponse</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>
  <span class="p">});</span>

  <span class="n">test</span><span class="p">(</span><span class="s">'Success'</span><span class="p">,</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">TaxRefundAPI</span><span class="p">(</span>
      <span class="nl">token:</span> <span class="s">'test_token'</span><span class="p">,</span>
      <span class="nl">client:</span> <span class="n">mockHttpMultipartRequest</span><span class="p">,</span>
    <span class="p">)</span><span class="o">.</span><span class="na">sendData</span><span class="p">(</span>
      <span class="nl">permitDate:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'2022-01-01 01:04'</span><span class="p">),</span>
      <span class="nl">status:</span> <span class="mi">91</span><span class="p">,</span>
      <span class="nl">docType:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="nl">note:</span> <span class="s">''</span><span class="p">,</span>
      <span class="nl">passportImg:</span> <span class="s">'assets/images/passport_sample.jpg'</span><span class="p">,</span>
      <span class="nl">certificationImage:</span> <span class="s">'assets/images/placeholder.png'</span><span class="p">,</span>
      <span class="nl">receiptImages:</span> <span class="p">[</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
      <span class="p">],</span>
    <span class="p">);</span>

    <span class="c1">// Request parameters</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">headers</span><span class="p">,</span>
      <span class="p">{</span><span class="s">'Authorization'</span><span class="o">:</span> <span class="s">'Bearer test_token'</span><span class="p">},</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">fields</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="s">'date'</span><span class="o">:</span> <span class="s">'2022-01-01'</span><span class="p">,</span>
        <span class="s">'status'</span><span class="o">:</span> <span class="s">'91'</span><span class="p">,</span>
        <span class="s">'doc_type'</span><span class="o">:</span> <span class="s">'2'</span><span class="p">,</span>
        <span class="s">'note'</span><span class="o">:</span> <span class="s">''</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">length</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'passport_image'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span> <span class="s">'passport_sample.jpg'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'cert_img'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span> <span class="s">'placeholder.png'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>

    <span class="c1">// Response</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">isA</span><span class="p">&lt;</span><span class="n">InfoData</span><span class="p">&gt;());</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="na">toMap</span><span class="p">(),</span> <span class="p">{</span>
      <span class="s">'amount'</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
      <span class="s">'commission'</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
    <span class="p">});</span>
  <span class="p">});</span>

  <span class="n">test</span><span class="p">(</span><span class="s">'Throw error when response is failed'</span><span class="p">,</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">when</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">send</span><span class="p">())</span><span class="o">.</span><span class="na">thenAnswer</span><span class="p">(</span>
      <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="kd">final</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">jsonEncode</span><span class="p">({</span>
          <span class="s">'success'</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="p">});</span>
        <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">value</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">encode</span><span class="p">(</span><span class="n">responseBody</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">StreamedResponse</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>

    <span class="k">try</span> <span class="p">{</span>
      <span class="k">await</span> <span class="n">TaxRefundAPI</span><span class="p">(</span>
        <span class="nl">token:</span> <span class="s">'test_token'</span><span class="p">,</span>
        <span class="nl">client:</span> <span class="n">mockHttpMultipartRequest</span><span class="p">,</span>
      <span class="p">)</span><span class="o">.</span><span class="na">sendData</span><span class="p">(</span>
        <span class="nl">permitDate:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'2022-01-01 01:04'</span><span class="p">),</span>
        <span class="nl">status:</span> <span class="mi">91</span><span class="p">,</span>
        <span class="nl">docType:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nl">note:</span> <span class="s">''</span><span class="p">,</span>
        <span class="nl">passportImg:</span> <span class="s">'assets/images/passport_sample.jpg'</span><span class="p">,</span>
        <span class="nl">certificationImage:</span> <span class="s">'assets/images/placeholder.png'</span><span class="p">,</span>
        <span class="nl">receiptImages:</span> <span class="p">[</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="p">],</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="p">(),</span> <span class="s">'Exception: Unknown response'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">CustomMockMultipartRequest</span> <span class="kd">extends</span> <span class="n">MockMultipartRequest</span> <span class="p">{</span>
  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">List</span><span class="p">&lt;</span><span class="n">MultipartFile</span><span class="p">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="p">[];</span>
<span class="p">}</span>
</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><p>Let’s take a closer look at the test code.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nd">@GenerateMocks</span><span class="p">([</span><span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">])</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">mockHttpMultipartRequest</span> <span class="o">=</span> <span class="n">CustomMockMultipartRequest</span><span class="p">();</span>
  <span class="n">setUp</span><span class="p">(()</span> <span class="p">{</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">headers</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">fields</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">when</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">send</span><span class="p">())</span><span class="o">.</span><span class="na">thenAnswer</span><span class="p">(</span>
      <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="kd">final</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">jsonEncode</span><span class="p">({</span>
          <span class="s">'success'</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
          <span class="s">'data'</span><span class="o">:</span> <span class="p">{</span>
            <span class="s">'amount'</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
            <span class="s">'commission'</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
          <span class="p">}</span>
        <span class="p">});</span>
        <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">value</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">encode</span><span class="p">(</span><span class="n">responseBody</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">StreamedResponse</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>
  <span class="p">});</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">CustomMockMultipartRequest</span> <span class="kd">extends</span> <span class="n">MockMultipartRequest</span> <span class="p">{</span>
  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">List</span><span class="p">&lt;</span><span class="n">MultipartFile</span><span class="p">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="p">[];</span>
<span class="p">}</span>
</code></pre></div></div><p>I used <code class="language-plaintext highlighter-rouge">DI(Dependency Injec)</code>, so I created a <code class="language-plaintext highlighter-rouge">Mock</code> object for testing and initialized the <code class="language-plaintext highlighter-rouge">Mock</code> object using the <code class="language-plaintext highlighter-rouge">setUp</code> function.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nd">@GenerateMocks</span><span class="p">([</span><span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">])</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">mockHttpMultipartRequest</span> <span class="o">=</span> <span class="n">CustomMockMultipartRequest</span><span class="p">();</span>
  <span class="p">...</span>
  <span class="n">test</span><span class="p">(</span><span class="s">'Success'</span><span class="p">,</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">TaxRefundAPI</span><span class="p">(</span>
      <span class="nl">token:</span> <span class="s">'test_token'</span><span class="p">,</span>
      <span class="nl">client:</span> <span class="n">mockHttpMultipartRequest</span><span class="p">,</span>
    <span class="p">)</span><span class="o">.</span><span class="na">sendData</span><span class="p">(</span>
      <span class="nl">permitDate:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'2022-01-01 01:04'</span><span class="p">),</span>
      <span class="nl">status:</span> <span class="mi">91</span><span class="p">,</span>
      <span class="nl">docType:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="nl">note:</span> <span class="s">''</span><span class="p">,</span>
      <span class="nl">passportImg:</span> <span class="s">'assets/images/passport_sample.jpg'</span><span class="p">,</span>
      <span class="nl">certificationImage:</span> <span class="s">'assets/images/placeholder.png'</span><span class="p">,</span>
      <span class="nl">receiptImages:</span> <span class="p">[</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
      <span class="p">],</span>
    <span class="p">);</span>

    <span class="c1">// Request parameters</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">headers</span><span class="p">,</span>
      <span class="p">{</span><span class="s">'Authorization'</span><span class="o">:</span> <span class="s">'Bearer test_token'</span><span class="p">},</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">fields</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="s">'date'</span><span class="o">:</span> <span class="s">'2022-01-01'</span><span class="p">,</span>
        <span class="s">'status'</span><span class="o">:</span> <span class="s">'91'</span><span class="p">,</span>
        <span class="s">'doc_type'</span><span class="o">:</span> <span class="s">'2'</span><span class="p">,</span>
        <span class="s">'note'</span><span class="o">:</span> <span class="s">''</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">length</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'passport_image'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span> <span class="s">'passport_sample.jpg'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'cert_img'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span> <span class="s">'placeholder.png'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>

    <span class="c1">// Response</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">isA</span><span class="p">&lt;</span><span class="n">InfoData</span><span class="p">&gt;());</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="na">toMap</span><span class="p">(),</span> <span class="p">{</span>
      <span class="s">'amount'</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
      <span class="s">'commission'</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
    <span class="p">});</span>
  <span class="p">});</span>
  <span class="p">...</span>
<span class="p">}</span>
<span class="p">...</span>
</code></pre></div></div><p>By using the <code class="language-plaintext highlighter-rouge">Mock</code> object created earlier, I tested the case where the request was successfully processed.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nd">@GenerateMocks</span><span class="p">([</span><span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">])</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">mockHttpMultipartRequest</span> <span class="o">=</span> <span class="n">CustomMockMultipartRequest</span><span class="p">();</span>
  <span class="p">...</span>
  <span class="n">test</span><span class="p">(</span><span class="s">'Throw error when response is failed'</span><span class="p">,</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">when</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">send</span><span class="p">())</span><span class="o">.</span><span class="na">thenAnswer</span><span class="p">(</span>
      <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="kd">final</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">jsonEncode</span><span class="p">({</span>
          <span class="s">'success'</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="p">});</span>
        <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">value</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">encode</span><span class="p">(</span><span class="n">responseBody</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">StreamedResponse</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>

    <span class="k">try</span> <span class="p">{</span>
      <span class="k">await</span> <span class="n">TaxRefundAPI</span><span class="p">(</span>
        <span class="nl">token:</span> <span class="s">'test_token'</span><span class="p">,</span>
        <span class="nl">client:</span> <span class="n">mockHttpMultipartRequest</span><span class="p">,</span>
      <span class="p">)</span><span class="o">.</span><span class="na">sendData</span><span class="p">(</span>
        <span class="nl">permitDate:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'2022-01-01 01:04'</span><span class="p">),</span>
        <span class="nl">status:</span> <span class="mi">91</span><span class="p">,</span>
        <span class="nl">docType:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nl">note:</span> <span class="s">''</span><span class="p">,</span>
        <span class="nl">passportImg:</span> <span class="s">'assets/images/passport_sample.jpg'</span><span class="p">,</span>
        <span class="nl">certificationImage:</span> <span class="s">'assets/images/placeholder.png'</span><span class="p">,</span>
        <span class="nl">receiptImages:</span> <span class="p">[</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="p">],</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="p">(),</span> <span class="s">'Exception: Unknown response'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>
<span class="p">...</span>
</code></pre></div></div><p>Lastly, I tested the case where the response failed.</p><h2 id="completed">Completed</h2><p>Done! We’ve seen how to upload files using <code class="language-plaintext highlighter-rouge">MultipartRequest</code> in the http package in Flutter and how to test it.</p><p>If you are implementing a file upload feature in Flutter, refer to this blog post and try implementing it and writing test code.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="flutter"/><summary type="html"><![CDATA[Let's see how to upload files using MultipartRequest in the http package in Flutter and how to test it.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/flutter/background.png"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/flutter/background.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry></feed>