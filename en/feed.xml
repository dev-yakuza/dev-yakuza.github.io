<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://deku.posstree.com/en/feed.xml" rel="self" type="application/atom+xml"/><link href="https://deku.posstree.com/en/" rel="alternate" type="text/html"/><updated>2024-09-16T19:46:48+09:00</updated><id>https://deku.posstree.com/feed.xml</id><title type="html">Deku</title><subtitle>『Programming Artist, DeKu』</subtitle><author><name>dev.yakuza@gmail.com</name></author><entry xml:lang="en"><title type="html">[GitHub Actions] How to execute GitHub Actions manually</title><link href="https://deku.posstree.com/en/github_actions/execute-github-actions-manually/" rel="alternate" type="text/html" title="[GitHub Actions] How to execute GitHub Actions manually"/><published>2024-09-13T00:00:00+09:00</published><updated>2024-09-16T16:56:41+09:00</updated><id>https://deku.posstree.com/github_actions/execute-github-actions-manually-en</id><content type="html" xml:base="https://deku.posstree.com/github_actions/execute-github-actions-manually/"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#workflow_dispatch">workflow_dispatch</a></li><li><a href="#inputs-type">inputs type</a></li><li><a href="#example">Example</a><ul><li><a href="#boolean">boolean</a></li><li><a href="#choice">choice</a></li><li><a href="#number">number</a></li><li><a href="#string">string</a></li><li><a href="#environment">environment</a></li></ul></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>When using GitHub Actions, sometimes you need to run GitHub Actions manually. In this blog post, I’ll introduce how to run GitHub Actions manually.</p><h2 id="workflow_dispatch">workflow_dispatch</h2><p>To run GitHub Actions manually, you need to use <code class="language-plaintext highlighter-rouge">workflow_dispatch</code>.</p><ul><li>Official document: <a href="https://docs.github.com/ko/actions/writing-workflows/workflow-syntax-for-github-actions#onworkflow_dispatch" rel="nofollow noreferrer" target="_blank">https://docs.github.com/ko/actions/writing-workflows/workflow-syntax-for-github-actions#onworkflow_dispatch</a></li></ul><p>At this time, you can pass parameters through <code class="language-plaintext highlighter-rouge">inputs</code> of <code class="language-plaintext highlighter-rouge">workflow_dispatch</code>.</p><p>You can set <code class="language-plaintext highlighter-rouge">workflow_dispatch</code> as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
</code></pre></div></div><h2 id="inputs-type">inputs type</h2><p>You can use the following types in <code class="language-plaintext highlighter-rouge">inputs</code> of <code class="language-plaintext highlighter-rouge">workflow_dispatch</code>.</p><ul><li><code class="language-plaintext highlighter-rouge">boolean</code>: true or false</li><li><code class="language-plaintext highlighter-rouge">choice</code>: SelectBox that can select one of the predefined options</li><li><code class="language-plaintext highlighter-rouge">number</code>: number</li><li><code class="language-plaintext highlighter-rouge">string</code>: string</li><li><code class="language-plaintext highlighter-rouge">environment</code>: Use environment variables set in GitHub</li></ul><p>You can check the <code class="language-plaintext highlighter-rouge">inputs</code> type that can be used in the official document.</p><ul><li>Official document: <a href="https://docs.github.com/ko/actions/writing-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputsinput_idtype" rel="nofollow noreferrer" target="_blank">https://docs.github.com/ko/actions/writing-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputsinput_idtype</a></li></ul><p>Yon can set <code class="language-plaintext highlighter-rouge">inputs</code> of <code class="language-plaintext highlighter-rouge">workflow_dispatch</code> as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_boolean</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">boolean</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="no">false</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">boolean</span>
</code></pre></div></div><p>You can set the <code class="language-plaintext highlighter-rouge">description</code>, <code class="language-plaintext highlighter-rouge">required</code>, <code class="language-plaintext highlighter-rouge">default</code> in addition to the <code class="language-plaintext highlighter-rouge">type</code> in <code class="language-plaintext highlighter-rouge">inputs</code> of <code class="language-plaintext highlighter-rouge">workflow_dispatch</code>. Except for <code class="language-plaintext highlighter-rouge">type</code>, all are optional.</p><h2 id="example">Example</h2><p>Then, let’s see an example about how to run GitHub Actions manually using <code class="language-plaintext highlighter-rouge">workflow_dispatch</code>.</p><h3 id="boolean">boolean</h3><p>To create GitHub Actions that run manually, create a <code class="language-plaintext highlighter-rouge">.github/workflows/manual_test.yml</code> file and modify it as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_boolean</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">boolean</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="no">false</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">boolean</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy-to-staging</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print the input</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>
</code></pre></div></div><p>After committing and pushing the file you wrote like this, you can see the following screen when you go to the <code class="language-plaintext highlighter-rouge">Actions</code> tab of <code class="language-plaintext highlighter-rouge">GitHub</code>.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input.png" alt="Execute GitHub Actions manually - Boolean input"/></picture><p>When you click the <code class="language-plaintext highlighter-rouge">Run workflow</code> displayed on the right side, you can see the <code class="language-plaintext highlighter-rouge">inputs</code> of the <code class="language-plaintext highlighter-rouge">boolean</code> type we’ve set. If you run this, you can get the following result.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input_result.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input_result.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input_result.png" alt="Execute GitHub Actions manually - Boolean input result"/></picture><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h3 id="choice">choice</h3><p>To create GitHub Actions that run manually, create a <code class="language-plaintext highlighter-rouge">.github/workflows/manual_test.yml</code> file and modify it as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_choice</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">choice</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="s1">'</span><span class="s">warning'</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">choice</span>
        <span class="na">options</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s">info</span>
          <span class="pi">-</span> <span class="s">warning</span>
          <span class="pi">-</span> <span class="s">debug</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy-to-staging</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print the input</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>
</code></pre></div></div><p>After committing and pushing the file you wrote like this, you can see the following screen when you go to the <code class="language-plaintext highlighter-rouge">Actions</code> tab of <code class="language-plaintext highlighter-rouge">GitHub</code>.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/choice_input.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/choice_input.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/choice_input.png" alt="Execute GitHub Actions manually - Choice input"/></picture><p>When you click the <code class="language-plaintext highlighter-rouge">Run workflow</code> displayed on the right side, you can see the <code class="language-plaintext highlighter-rouge">inputs</code> of the <code class="language-plaintext highlighter-rouge">choice</code> type we’ve set. If you run this, you can get the following result.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/choice_input_result.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/choice_input_result.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/choice_input_result.png" alt="Execute GitHub Actions manually - Choice input result"/></picture><h3 id="number">number</h3><p>To create GitHub Actions that run manually, create a <code class="language-plaintext highlighter-rouge">.github/workflows/manual_test.yml</code> file and modify it as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_number</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">number</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="m">20</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">number</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy-to-staging</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print the input</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>
</code></pre></div></div><p>After committing and pushing the file you wrote like this, you can see the following screen when you go to the <code class="language-plaintext highlighter-rouge">Actions</code> tab of <code class="language-plaintext highlighter-rouge">GitHub</code>.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/number_input.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/number_input.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/number_input.png" alt="Execute GitHub Actions manually - Number input"/></picture><p>When you click the <code class="language-plaintext highlighter-rouge">Run workflow</code> displayed on the right side, you can see the <code class="language-plaintext highlighter-rouge">inputs</code> of the <code class="language-plaintext highlighter-rouge">number</code> type we’ve set. If you run this, you can get the following result.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/number_input_result.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/number_input_result.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/number_input_result.png" alt="Execute GitHub Actions manually - Number input result"/></picture><h3 id="string">string</h3><p>To create GitHub Actions that run manually, create a <code class="language-plaintext highlighter-rouge">.github/workflows/manual_test.yml</code> file and modify it as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_string</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">string</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Hello,</span><span class="nv"> </span><span class="s">World!'</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy-to-staging</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print the input</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>
</code></pre></div></div><p>After committing and pushing the file you wrote like this, you can see the following screen when you go to the <code class="language-plaintext highlighter-rouge">Actions</code> tab of <code class="language-plaintext highlighter-rouge">GitHub</code>.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/string_input.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/string_input.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/string_input.png" alt="Execute GitHub Actions manually - String input"/></picture><p>When you click the <code class="language-plaintext highlighter-rouge">Run workflow</code> displayed on the right side, you can see the <code class="language-plaintext highlighter-rouge">inputs</code> of the <code class="language-plaintext highlighter-rouge">string</code> type we’ve set. If you run this, you can get the following result.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/string_input_result.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/string_input_result.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/string_input_result.png" alt="Execute GitHub Actions manually - String input result"/></picture><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h3 id="environment">environment</h3><p>To use the <code class="language-plaintext highlighter-rouge">environment</code> type in <code class="language-plaintext highlighter-rouge">workflow_dispatch</code>, you need to set <code class="language-plaintext highlighter-rouge">Environment</code> in <code class="language-plaintext highlighter-rouge">GitHub</code>’s <code class="language-plaintext highlighter-rouge">Settings</code>.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environments.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environments.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/environments.png" alt="Execute GitHub Actions manually - Environments"/></picture><p>Click <code class="language-plaintext highlighter-rouge">New environment</code> and enter <code class="language-plaintext highlighter-rouge">dev</code> in the <code class="language-plaintext highlighter-rouge">Name</code> as follows, and click <code class="language-plaintext highlighter-rouge">Configure environment</code>.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment.png" alt="Execute GitHub Actions manually - New Dev Environment"/></picture><p>Then click the <code class="language-plaintext highlighter-rouge">Add environment variable</code> button in <code class="language-plaintext highlighter-rouge">Environment variables</code> and add the <code class="language-plaintext highlighter-rouge">Variable</code> as follows.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment_variable.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment_variable.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment_variable.png" alt="Execute GitHub Actions manually - Dev environment variable"/></picture><p>In the same way, add the same variable to the <code class="language-plaintext highlighter-rouge">prod</code> environment.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/prod_environment_variable.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/prod_environment_variable.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/prod_environment_variable.png" alt="Execute GitHub Actions manually - Prod environment variable"/></picture><p>Now, create a <code class="language-plaintext highlighter-rouge">.github/workflows/manual_test.yml</code> file to run GitHub Actions manually and modify it as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_environment</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">environment</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">environment</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy-to-staging</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">environment</span><span class="pi">:</span> <span class="s">$</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print the input</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>
</code></pre></div></div><p>After committing and pushing the file you wrote like this, you can see the following screen when you go to the <code class="language-plaintext highlighter-rouge">Actions</code> tab of <code class="language-plaintext highlighter-rouge">GitHub</code>.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/environment_input.png" alt="Execute GitHub Actions manually - Environment input"/></picture><p>When you click the <code class="language-plaintext highlighter-rouge">Run workflow</code> displayed on the right side, you can see the <code class="language-plaintext highlighter-rouge">Environment</code> that we’ve set in <code class="language-plaintext highlighter-rouge">GitHub</code>’s <code class="language-plaintext highlighter-rouge">Settings</code>. If you run this, you can get the following result.</p><ul><li>dev environment</li></ul><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_dev.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_dev.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_dev.png" alt="Execute GitHub Actions manually - Environment input result dev"/></picture><ul><li>prod environment</li></ul><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_prod.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_prod.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_prod.png" alt="Execute GitHub Actions manually - Environment input result prod"/></picture><h2 id="completed">Completed</h2><p>Done! We’ve seen how to run GitHub Actions manually. We also learned about the <code class="language-plaintext highlighter-rouge">inputs</code> type that can be set.</p><p>If you need to run GitHub Actions manually, try using <code class="language-plaintext highlighter-rouge">workflow_dispatch</code> and various types of <code class="language-plaintext highlighter-rouge">inputs</code> to run GitHub Actions manually.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[Let's see how to execute GitHub Actions manually.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">[GitHub Actions] How to check PR title with GitHub Actions in monorepo environment</title><link href="https://deku.posstree.com/en/github_actions/action-check-pr-title/" rel="alternate" type="text/html" title="[GitHub Actions] How to check PR title with GitHub Actions in monorepo environment"/><published>2024-09-10T00:00:00+09:00</published><updated>2024-09-12T09:15:14+09:00</updated><id>https://deku.posstree.com/github_actions/action-check-pr-title-en</id><content type="html" xml:base="https://deku.posstree.com/github_actions/action-check-pr-title/"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#action-check-pr-title">action-check-pr-title</a></li><li><a href="#create-github-actions">Create GitHub Actions</a></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>I am automating GitHub’s Release Note using <code class="language-plaintext highlighter-rouge">Release Drafter</code>.</p><ul><li><a href="https://deku.posstree.com/en/share/github-actions/release-drafter/" target="\_blank">[GitHub Actions] Automate Release notes</a></li></ul><p>This <code class="language-plaintext highlighter-rouge">Release Drafter</code> is based on the Label of GitHub’s PR. <code class="language-plaintext highlighter-rouge">Release Drafter</code> provides a feature to automatically create Labels, and it uses the title of the PR. So, the PR title is important.</p><p>Previously, when checking the title of a PR, I used <a href="https://github.com/aslafy-z/conventional-pr-title-action/tree/v3/" rel="nofollow noreferrer" target="\_blank">Conventional PR Title Action</a>.</p><ul><li><a href="https://deku.posstree.com/en/share/github-actions/pr-title-checker/" target="\_blank">[GitHub Actions] Check Pull request title</a></li></ul><p>However, in the current monorepo project, the <code class="language-plaintext highlighter-rouge">Conventional PR Title Action</code> was not enough, so I ended up using other GitHub Actions.</p><ul><li><a href="https://deku.posstree.com/en/environment/repository_strategy/" target="\_blank">[Project Management] Repository Strategy</a></li></ul><p>In this blog post, I will introduce how to check the title of a PR when creating a PR using <code class="language-plaintext highlighter-rouge">action-check-pr-title</code>.</p><h2 id="action-check-pr-title">action-check-pr-title</h2><p><code class="language-plaintext highlighter-rouge">action-check-pr-title</code> is a GitHub Actions that checks the title of a PR using regular expressions.</p><ul><li><a href="https://github.com/Slashgear/action-check-pr-title" rel="nofollow noreferrer" target="\_blank">action-check-pr-title</a></li></ul><h2 id="create-github-actions">Create GitHub Actions</h2><p>To create GitHub Actions that check the title of a PR using <code class="language-plaintext highlighter-rouge">action-check-pr-title</code>, create a <code class="language-plaintext highlighter-rouge">.github/workflows/check_pr_title.yml</code> file and modify it as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Check PR Title</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">opened</span>
      <span class="pi">-</span> <span class="s">reopened</span>
      <span class="pi">-</span> <span class="s">edited</span>
      <span class="pi">-</span> <span class="s">synchronize</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">check-pr-title</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout Repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Check PR Title</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">Slashgear/action-check-pr-title@v4.3.0</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">regexp</span><span class="pi">:</span> <span class="s1">'</span><span class="s">(feat|fix|chore|docs|style|refactor|test|build|ci)\((SERVICE1|SERVICE2|template|components|config|common)\):</span><span class="nv"> </span><span class="s">.+'</span>
          <span class="na">helpMessage</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Example:</span><span class="nv"> </span><span class="s">'feat(SERVICE1):</span><span class="nv"> </span><span class="s">example</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">title'"</span>
</code></pre></div></div><p>Let’s take a closer look at the part that checks the title of the PR.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Check PR Title</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">Slashgear/action-check-pr-title@v4.3.0</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">regexp</span><span class="pi">:</span> <span class="s1">'</span><span class="s">(feat|fix|chore|docs|style|refactor|test|build|ci)\((SERVICE1|SERVICE2|template|components|config|common)\):</span><span class="nv"> </span><span class="s">.+'</span>
          <span class="na">helpMessage</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Example:</span><span class="nv"> </span><span class="s">'feat(SERVICE1):</span><span class="nv"> </span><span class="s">example</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">title'"</span>
</code></pre></div></div><p>Here, we use the <code class="language-plaintext highlighter-rouge">regexp</code> option provided by <code class="language-plaintext highlighter-rouge">action-check-pr-title</code> to check the title of the <code class="language-plaintext highlighter-rouge">PR</code>. The regular expression used here allows the following PR titles.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>feat<span class="o">(</span>SERVICE1<span class="o">)</span>: Add new feature
fix<span class="o">(</span>SERVICE2<span class="o">)</span>: Fix bug
refactor<span class="o">(</span>common<span class="o">)</span>: Refactor code
...
</code></pre></div></div><p>I developed a monorepo projet, so I set the service name in the <code class="language-plaintext highlighter-rouge">Scope</code> area of <code class="language-plaintext highlighter-rouge">Conventional Commits</code> and set it to check.</p><ul><li><a href="https://www.conventionalcommits.org/en/v1.0.0/" rel="nofollow noreferrer" target="\_blank">Conventional Commits</a></li></ul><h2 id="completed">Completed</h2><p>Done! We’ve seen how to check the title of a PR using <code class="language-plaintext highlighter-rouge">action-check-pr-title</code> when creating a PR. Previously, I used <a href="https://github.com/aslafy-z/conventional-pr-title-action/tree/v3/" rel="nofollow noreferrer" target="\_blank">Conventional PR Title Action</a> and it also supports regular expression checks, but the settings are not easy, so I decided to use <code class="language-plaintext highlighter-rouge">action-check-pr-title</code>.</p><p>So, if you want to check the PR title with regular expressions simply, try using <code class="language-plaintext highlighter-rouge">action-check-pr-title</code>.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[In a monorepo environment, let's see how to check the title of a PR (Pull Request) using GitHub Actions.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">[GitHub Actions] How to check branch name with GitHub Actions</title><link href="https://deku.posstree.com/en/github_actions/check-branch-name" rel="alternate" type="text/html" title="[GitHub Actions] How to check branch name with GitHub Actions"/><published>2024-09-02T00:00:00+09:00</published><updated>2024-09-09T09:52:51+09:00</updated><id>https://deku.posstree.com/github_actions/check-branch-name-en</id><content type="html" xml:base="https://deku.posstree.com/github_actions/check-branch-name"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#github-actions">GitHub Actions</a></li><li><a href="#change-branch-name">Change Branch Name</a></li><li><a href="#git-hooks">Git hooks</a><ul><li><a href="#create-script-to-check-branch-name">Create script to check branch name</a></li><li><a href="#configure-husky">Configure Husky</a></li><li><a href="#configure-lefthook">Configure Lefthook</a></li></ul></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>When developing a project using Git, you will use a branch strategy as shown in the following link.</p><ul><li><a href="https://deku.posstree.com/en/environment/branch-strategy/" target="\_blank">Branch Strategy for Software Development</a></li></ul><p>At this time, sometimes you need to manage whether you are creating branches according to the branch strategy.</p><p>In this blog post, I will learn how to check the branch name when creating a PR using GitHub Actions.</p><h2 id="github-actions">GitHub Actions</h2><p>To create GitHub Actions that check the branch name, create the <code class="language-plaintext highlighter-rouge">.github/workflows/check-branch-name.yml</code> file and modify it as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Check Branch Name</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">check-branch-name</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout Repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Extract branch and service name</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">extract_branch_and_service_name</span>
        <span class="na">run </span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">FULL_BRANCH_NAME=$</span>

          <span class="s">BRANCH_NAME=""</span>
          <span class="s">SERVICE_NAME=""</span>

          <span class="s">if [[ $FULL_BRANCH_NAME == "main" || $FULL_BRANCH_NAME == "develop" ]]; then</span>
            <span class="s">BRANCH_NAME="$FULL_BRANCH_NAME"</span>
            <span class="s">SERVICE_NAME="$FULL_BRANCH_NAME"</span>
          <span class="s">else</span>
            <span class="s"># Split the branch name by "/"</span>
            <span class="s">IFS='/' read -ra BRANCH_PARTS &lt;&lt;&lt; "$FULL_BRANCH_NAME"</span>

            <span class="s"># Check if the length of the array is greater than 1</span>
            <span class="s">if [ "${#BRANCH_PARTS[@]}" -gt 1 ]; then</span>
              <span class="s"># Assign the second part as the service name</span>
              <span class="s">BRANCH_NAME=${BRANCH_PARTS[0]}</span>
              <span class="s">SERVICE_NAME=${BRANCH_PARTS[1]}</span>
            <span class="s">else</span>
              <span class="s"># If the length is 1, raise an error</span>
              <span class="s">echo "[Error] Branch name does not contain a valid service name."</span>
              <span class="s">echo "Please check the branch name and try again."</span>
              <span class="s">echo "You can change the branch name by running the following command:"</span>
              <span class="s">echo "git branch -m &lt;new-branch-name&gt;"</span>
              <span class="s">exit 1</span>
            <span class="s">fi</span>
          <span class="s">fi</span>

          <span class="s">echo "BRANCH_NAME=$BRANCH_NAME" &gt;&gt; $GITHUB_ENV</span>
          <span class="s">echo "SERVICE_NAME=$SERVICE_NAME" &gt;&gt; $GITHUB_ENV</span>
          <span class="s">echo "FULL_BRANCH_NAME=$FULL_BRANCH_NAME" &gt;&gt; $GITHUB_ENV</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Check Branch Name</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">BRANCH_NAMES=("dependabot" "hotfix" "release" "review" "feature" "fix" "sub-feature")</span>
          <span class="s">SERVICE_NAMES=("npm_and_yarn" "github_actions" "SERVICE_1" "SERVICE_2" "template" "components" "config" "common")</span>

          <span class="s">if [[ $BRANCH_NAME == "main" || $BRANCH_NAME == "develop" ]]; then</span>
            <span class="s">echo "Branch name is valid."</span>
          <span class="s">elif printf '%s\n' "${BRANCH_NAMES[@]}" | grep -qx "${BRANCH_NAME}" &amp;&amp; printf '%s\n' "${SERVICE_NAMES[@]}" | grep -qx "${SERVICE_NAME}"; then</span>
            <span class="s">echo "Branch name is valid."</span>
          <span class="s">else</span>
            <span class="s">echo "[Error] Branch name must contain valid branch names and service names."</span>
            <span class="s">echo "- Current branch: $BRANCH_NAME"</span>
            <span class="s">echo "- Branch names: main develop ${BRANCH_NAMES[@]}"</span>
            <span class="s">echo "- Service names: ${SERVICE_NAMES[@]}"</span>
            <span class="s">exit 1</span>
          <span class="s">fi</span>
</code></pre></div></div><p>Let’s take a closer look at this GitHub Actions.</p><p>In my case, I manage the project with a monorepo.</p><ul><li><a href="https://deku.posstree.com/en/environment/repository_strategy/" target="\_blank">[Project Management] Repository Strategy</a></li></ul><p>So I use the following branch names.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>feature/:SERVICE_NAME/:BRANCH_NAME
release/:SERVICE_NAME/:BRANCH_NAME
fix/:SERVICE_NAME/:BRANCH_NAME
...
</code></pre></div></div><p>I need to check whether the branch name is started with <code class="language-plaintext highlighter-rouge">dependabot</code>, <code class="language-plaintext highlighter-rouge">hotfix</code>, <code class="language-plaintext highlighter-rouge">release</code>, <code class="language-plaintext highlighter-rouge">review</code>, <code class="language-plaintext highlighter-rouge">feature</code>, <code class="language-plaintext highlighter-rouge">fix</code>, <code class="language-plaintext highlighter-rouge">sub-feature</code>, etc., and I need to extract the <code class="language-plaintext highlighter-rouge">SERVICE_NAME</code> and check if it is using the predefined name.</p><p>So I extracted the service name and branch name in advance and stored them in environment variables as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Extract branch and service name</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">extract_branch_and_service_name</span>
        <span class="na">run </span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">FULL_BRANCH_NAME=$</span>

          <span class="s">BRANCH_NAME=""</span>
          <span class="s">SERVICE_NAME=""</span>

          <span class="s">if [[ $FULL_BRANCH_NAME == "main" || $FULL_BRANCH_NAME == "develop" ]]; then</span>
            <span class="s">BRANCH_NAME="$FULL_BRANCH_NAME"</span>
            <span class="s">SERVICE_NAME="$FULL_BRANCH_NAME"</span>
          <span class="s">else</span>
            <span class="s"># Split the branch name by "/"</span>
            <span class="s">IFS='/' read -ra BRANCH_PARTS &lt;&lt;&lt; "$FULL_BRANCH_NAME"</span>

            <span class="s"># Check if the length of the array is greater than 1</span>
            <span class="s">if [ "${#BRANCH_PARTS[@]}" -gt 1 ]; then</span>
              <span class="s"># Assign the second part as the service name</span>
              <span class="s">BRANCH_NAME=${BRANCH_PARTS[0]}</span>
              <span class="s">SERVICE_NAME=${BRANCH_PARTS[1]}</span>
            <span class="s">else</span>
              <span class="s"># If the length is 1, raise an error</span>
              <span class="s">echo "[Error] Branch name does not contain a valid service name."</span>
              <span class="s">echo "Please check the branch name and try again."</span>
              <span class="s">echo "You can change the branch name by running the following command:"</span>
              <span class="s">echo "git branch -m &lt;new-branch-name&gt;"</span>
              <span class="s">exit 1</span>
            <span class="s">fi</span>
          <span class="s">fi</span>

          <span class="s">echo "BRANCH_NAME=$BRANCH_NAME" &gt;&gt; $GITHUB_ENV</span>
          <span class="s">echo "SERVICE_NAME=$SERVICE_NAME" &gt;&gt; $GITHUB_ENV</span>
          <span class="s">echo "FULL_BRANCH_NAME=$FULL_BRANCH_NAME" &gt;&gt; $GITHUB_ENV</span>
<span class="s">...</span>
</code></pre></div></div><p>The branch name and service name that I extracted in advance are compared with the predefined values to check if the branch name and service name are valid.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Check Branch Name</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">BRANCH_NAMES=("dependabot" "hotfix" "release" "review" "feature" "fix" "sub-feature")</span>
          <span class="s">SERVICE_NAMES=("npm_and_yarn" "github_actions" "SERVICE_1" "SERVICE_2" "template" "components" "config" "common")</span>

          <span class="s">if [[ $BRANCH_NAME == "main" || $BRANCH_NAME == "develop" ]]; then</span>
            <span class="s">echo "Branch name is valid."</span>
          <span class="s">elif printf '%s\n' "${BRANCH_NAMES[@]}" | grep -qx "${BRANCH_NAME}" &amp;&amp; printf '%s\n' "${SERVICE_NAMES[@]}" | grep -qx "${SERVICE_NAME}"; then</span>
            <span class="s">echo "Branch name is valid."</span>
          <span class="s">else</span>
            <span class="s">echo "[Error] Branch name must contain valid branch names and service names."</span>
            <span class="s">echo "- Current branch: $BRANCH_NAME"</span>
            <span class="s">echo "- Branch names: main develop ${BRANCH_NAMES[@]}"</span>
            <span class="s">echo "- Service names: ${SERVICE_NAMES[@]}"</span>
            <span class="s">exit 1</span>
          <span class="s">fi</span>
<span class="s">...</span>
</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="change-branch-name">Change Branch Name</h2><p>If you create a PR with a branch name that does not match the predefined rules using GitHub Actions, an error will occur. In this case, you can change the branch name as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout &lt;current-branch-name&gt;
git branch <span class="nt">-m</span> &lt;new-branch-name&gt;
</code></pre></div></div><p>Also, you can change the branch name as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch <span class="nt">-m</span> &lt;current-branch-name&gt; &lt;new-branch-name&gt;
</code></pre></div></div><p>If you change the branch name like this, you can create a new PR and close the existing PR.</p><h2 id="git-hooks">Git hooks</h2><p>If you use the wrong branch name, you can check it with this GitHub Actions, but you cannot check it without creating a PR. Also, if you use the wrong branch name, you need to close the existing PR and create a new PR.</p><p>In this case, you can reduce unnecessary work by using Git hooks to check the branch name before creating a PR.</p><h3 id="create-script-to-check-branch-name">Create script to check branch name</h3><p>To create a script that checks the branch name, create the <code class="language-plaintext highlighter-rouge">scripts/check-branch-name.sh</code> file and modify it as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env sh</span>

<span class="nv">pattern</span><span class="o">=</span><span class="s1">'^(dependabot|hotfix|release|review|feature|fix|sub-feature)/(npm_and_yarn|github_actions|SERVICE_1|SERVICE_2|template|components|config|common)/.*'</span>
<span class="nv">errorMessage</span><span class="o">=</span><span class="s1">'Invalid branch name. Please follow the correct naming convention.'</span>

<span class="k">if</span> <span class="o">!</span> git rev-parse <span class="nt">--is-inside-work-tree</span> <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"Error: Not inside Git working tree."</span>
  <span class="nb">exit </span>1
<span class="k">fi

</span><span class="nv">branches</span><span class="o">=</span><span class="si">$(</span>git branch | <span class="nb">grep</span> <span class="s1">'^\*'</span> | <span class="nb">sed</span> <span class="s1">'s/^\* //'</span><span class="si">)</span>

<span class="k">if </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$branches</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="nt">-Eq</span> <span class="s2">"</span><span class="nv">$pattern</span><span class="s2">"</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">printf</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[32mPassed</span><span class="se">\n</span><span class="s2">Branch Name: %s</span><span class="se">\n</span><span class="s2">Pattern: %s</span><span class="se">\0</span><span class="s2">33[0m</span><span class="se">\n</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$branches</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$pattern</span><span class="s2">"</span>
<span class="k">else
  </span><span class="nb">printf</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[31mResult: failed</span><span class="se">\n</span><span class="s2">Error Msg: %s</span><span class="se">\n</span><span class="s2">Branch Name: %s</span><span class="se">\n</span><span class="s2">Pattern: %s</span><span class="se">\0</span><span class="s2">33[0m</span><span class="se">\n</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$errorMessage</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$branches</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$pattern</span><span class="s2">"</span>
  <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$errorMessage</span><span class="s2">"</span>
  <span class="nb">exit </span>1
<span class="k">fi</span>
</code></pre></div></div><h3 id="configure-husky">Configure Husky</h3><p>To set up Git hooks using Husky, modify the <code class="language-plaintext highlighter-rouge">.husky/pre-commit</code> file as follows.</p><div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span><span class="w"> </span><span class="err">Run</span><span class="w"> </span><span class="err">validation</span><span class="w"> </span><span class="err">branch</span><span class="w"> </span><span class="err">name</span><span class="w">
</span><span class="err">.</span><span class="w"> </span><span class="s2">"$(dirname -- "</span><span class="err">$</span><span class="mi">0</span><span class="s2">")/scripts/validateBranchName.sh"</span><span class="w">

</span><span class="err">#</span><span class="w"> </span><span class="err">Run</span><span class="w"> </span><span class="err">lint-staged</span><span class="w">
</span><span class="err">yarn</span><span class="w"> </span><span class="err">lint-staged</span><span class="w">
</span></code></pre></div></div><p>And then, you need to move the <code class="language-plaintext highlighter-rouge">check-branch-name.sh</code> file you created earlier to <code class="language-plaintext highlighter-rouge">.husky/scripts/validateBranchName.sh</code>.</p><h3 id="configure-lefthook">Configure Lefthook</h3><p>To set up Git hooks using Lefthook, modify the <code class="language-plaintext highlighter-rouge">.lefthook.yml</code> file as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">pre-push</span><span class="pi">:</span>
  <span class="na">scripts</span><span class="pi">:</span>
    <span class="s2">"</span><span class="s">validateBranchName.sh"</span><span class="err">:</span>
      <span class="na">runner</span><span class="pi">:</span> <span class="s">bash</span>
</code></pre></div></div><p>And then, you need to move the <code class="language-plaintext highlighter-rouge">check-branch-name.sh</code> file you created earlier to <code class="language-plaintext highlighter-rouge">.lefthook/pre-commit/validateBranchName.sh</code>.</p><h2 id="completed">Completed</h2><p>Done! We’ve seen how to check the branch name when creating a PR using GitHub Actions. We also learned how to check the branch name using Git hooks before creating a PR.</p><p>If the branch name plays an important role in the project like me, try checking the branch name using GitHub Actions and Git Hooks.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[Let's see how to check the branch name when creating a PR using GitHub Actions.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">[GitHub Actions] Automatically Assign Assignees to PR</title><link href="https://deku.posstree.com/en/github_actions/auto-assing-assigness" rel="alternate" type="text/html" title="[GitHub Actions] Automatically Assign Assignees to PR"/><published>2024-08-28T00:00:00+09:00</published><updated>2024-08-30T09:57:08+09:00</updated><id>https://deku.posstree.com/github_actions/auto-assing-assigness-en</id><content type="html" xml:base="https://deku.posstree.com/github_actions/auto-assing-assigness"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#create-github-actions">Create GitHub Actions</a></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>After completing the development, the developer in charge of the development creates a PR(Pull Request) on GitHub and adds himself to the <code class="language-plaintext highlighter-rouge">Assignees</code>. However, it is cumbersome to add yourself to the <code class="language-plaintext highlighter-rouge">Assignees</code> every time you create a PR.</p><p>In this blog post, I will introduce how to automatically add the developer who created the PR to the <code class="language-plaintext highlighter-rouge">Assignees</code> using GitHub Actions.</p><h2 id="create-github-actions">Create GitHub Actions</h2><p>To create a GitHub Actions that automatically adds <code class="language-plaintext highlighter-rouge">Assignees</code> to PRs, create a <code class="language-plaintext highlighter-rouge">.github/workflows/auto-assign-assignees.yml</code> file and modify it as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Assign assignees</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">opened</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">assign</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Set assignees</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">github.event.pull_request.user.login != 'dependabot[bot]'</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set assignees</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github-token</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">const { owner, repo } = context.repo</span>
            <span class="s">const prNumber = context.payload.pull_request.number</span>

            <span class="s">const response = await github.rest.issues.get({</span>
              <span class="s">owner,</span>
              <span class="s">repo,</span>
              <span class="s">issue_number: prNumber,</span>
            <span class="s">})</span>
            <span class="s">const { assignees } = response.data</span>

            <span class="s">if (assignees.length === 0) {</span>
              <span class="s">await github.rest.issues.addAssignees({</span>
                <span class="s">owner: owner,</span>
                <span class="s">repo: repo,</span>
                <span class="s">issue_number: prNumber,</span>
                <span class="s">assignees: [context.actor]</span>
              <span class="s">})</span>
            <span class="s">}</span>
</code></pre></div></div><p>Let’s take a closer look at this GitHub Actions.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">opened</span>
<span class="nn">...</span>
</code></pre></div></div><p>This GitHub Actions runs when a PR is created.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">assign</span><span class="pi">:</span>
    <span class="s">...</span>
    <span class="s">if</span><span class="err">:</span> <span class="s">github.event.pull_request.user.login != 'dependabot[bot]'</span>
    <span class="s">...</span>
</code></pre></div></div><p>In my case, I use Dependabot on GitHub. Since Dependabot cannot be added to the Assignees of the PR created by Dependabot, I set it not to add Assignees to the PR created by Dependabot.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">assign</span><span class="pi">:</span>
    <span class="s">...</span>
    <span class="s">steps</span><span class="err">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set assignees</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github-token</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">const { owner, repo } = context.repo</span>
            <span class="s">const prNumber = context.payload.pull_request.number</span>

            <span class="s">const response = await github.rest.issues.get({</span>
              <span class="s">owner,</span>
              <span class="s">repo,</span>
              <span class="s">issue_number: prNumber,</span>
            <span class="s">})</span>
            <span class="s">const { assignees } = response.data</span>

            <span class="s">if (assignees.length === 0) {</span>
              <span class="s">await github.rest.issues.addAssignees({</span>
                <span class="s">owner: owner,</span>
                <span class="s">repo: repo,</span>
                <span class="s">issue_number: prNumber,</span>
                <span class="s">assignees: [context.actor]</span>
              <span class="s">})</span>
            <span class="s">}</span>
</code></pre></div></div><p>I used the GitHub Actions provided by GitHub to write code that adds the developer(<code class="language-plaintext highlighter-rouge">context.actor</code>) who creates a PR to the <code class="language-plaintext highlighter-rouge">Assignees</code> by using JavaScript code.</p><h2 id="completed">Completed</h2><p>Done! We’ve seen how to create a GitHub Actions that automatically adds the developer who created the PR to the <code class="language-plaintext highlighter-rouge">Assignees</code> every time a PR is created. If you set the Assignees manually, try using this GitHub Actions to set the Assignees automatically.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[Let's see how to automatically add the developer who created the PR to the Assignees using GitHub Actions.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">ESLint Configuration for Monorepo in VSCode</title><link href="https://deku.posstree.com/en/environment/vscode/eslint-configuration-for-monorepo" rel="alternate" type="text/html" title="ESLint Configuration for Monorepo in VSCode"/><published>2024-08-22T00:00:00+09:00</published><updated>2024-08-27T20:01:47+09:00</updated><id>https://deku.posstree.com/environment/vscode/vscode-eslint-configuration-for-monorepo-en</id><content type="html" xml:base="https://deku.posstree.com/environment/vscode/eslint-configuration-for-monorepo"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#current-working-directory-in-vscode">Current working directory in VSCode</a></li><li><a href="#modify-vscodesettingsjson-file">Modify .vscode/settings.json file</a></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>Because multiple packages are managed in a single repository in a Monorepo environment, each package sometimes requires a separate ESLint configuratoin. At this time, It is important to determine which directory ESLint is based on.</p><p>In this blog post, I will introduce how to set the Current Working Directory(CWD) of ESLint in Visual Studio Code(VSCode) when developing Monorepo projects.</p><h2 id="current-working-directory-in-vscode">Current working directory in VSCode</h2><p>If you configure nothing special in VSCode, ESLint will work based on the ESLint configuration file in the root folder. However, in Monorepo projects, each project may have its own ESLint configuration file.</p><p>In this case, if you set the Current Working Directory(CWD) of ESLint in VSCode, ESLint will work based on that directory.</p><h2 id="modify-vscodesettingsjson-file">Modify .vscode/settings.json file</h2><p>The following is how to set the Current Working Directory(CWD) of ESLint in VSCode.</p><ol><li>Configure the mode</li></ol><div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="nl">"eslint.workingDirectories"</span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="w"> </span><span class="nl">"mode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"auto"</span><span class="w"> </span><span class="p">}]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div><p>If you set it like this, VSCode will automatically find the directory with the ESLint configuration file and set it as the CWD.</p><ol><li>Configure the pattern</li></ol><div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="nl">"eslint.workingDirectories"</span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="w"> </span><span class="nl">"pattern"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./packages/*/"</span><span class="w"> </span><span class="p">}]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div><p>You can also set the directory to be the CWD with a <code class="language-plaintext highlighter-rouge">Glob</code> pattern.</p><ol><li>Configure the directories</li></ol><div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="nl">"eslint.workingDirectories"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"./packages/package1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"./packages/package2"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div><p>You can also specify specific directories as an array like this.</p><h2 id="completed">Completed</h2><p>Done! We’ve seen how to set the Current Working Directory(CWD) of ESLint in VSCode when developing Monorepo projects.</p><p>In my case, I’m using <code class="language-plaintext highlighter-rouge">"mode": "auto"</code>. If there are no special problems, I recommend using this setting.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="environment"/><summary type="html"><![CDATA[Let's see how to configure ESLint in VSCode when developing Monorepo projects.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/environment/2024/eslint-configuration-for-monorepo/background.png"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/environment/2024/eslint-configuration-for-monorepo/background.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">Hide VSCode Incoming/Outgoing changes graph</title><link href="https://deku.posstree.com/en/environment/vscode/incoming-outgoing-changes-graph" rel="alternate" type="text/html" title="Hide VSCode Incoming/Outgoing changes graph"/><published>2024-08-16T00:00:00+09:00</published><updated>2024-08-16T10:52:53+09:00</updated><id>https://deku.posstree.com/environment/vscode/vscode-incoming-outgoing-changes-graph-en</id><content type="html" xml:base="https://deku.posstree.com/environment/vscode/incoming-outgoing-changes-graph"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#incomingoutgoing-changes-graph">Incoming/Outgoing changes graph</a></li><li><a href="#hide-incomingoutgoing-changes-graph">Hide Incoming/Outgoing changes graph</a></li><li><a href="#confirmation">Confirmation</a></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>One of the Git features of Visual Studio Code (VSCode) updated in July 2024, <code class="language-plaintext highlighter-rouge">Incoming/Outgoing changes graph</code>, is a feature that displays Git history in a graph.</p><ul><li><a href="https://code.visualstudio.com/updates/v1_92#_incomingoutgoing-changes-graph" rel="nofollow noreferrer" target="_blank">https://code.visualstudio.com/updates/v1_92#_incomingoutgoing-changes-graph</a></li></ul><p>After this feature was added, when opening the <code class="language-plaintext highlighter-rouge">Source Control</code> panel, the <code class="language-plaintext highlighter-rouge">Source Control</code> panel was displayed slowly.</p><p>In this blog post, I will introduce how to hide the <code class="language-plaintext highlighter-rouge">Incoming/Outgoing changes graph</code> of VSCode to solve the problem of the <code class="language-plaintext highlighter-rouge">Source Control</code> panel being displayed slowly.</p><h2 id="incomingoutgoing-changes-graph">Incoming/Outgoing changes graph</h2><p>When you open the <code class="language-plaintext highlighter-rouge">Source Control</code> panel in VSCode, you will see the <code class="language-plaintext highlighter-rouge">Incoming/Outgoing changes graph</code> as shown like below.</p><picture><source srcset="/assets/images/category/environment/2024/incoming-outgoing-changes-graph/incoming-outgoing-changes-graph.avif" type="image/avif"/><source srcset="/assets/images/category/environment/2024/incoming-outgoing-changes-graph/incoming-outgoing-changes-graph.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/incoming-outgoing-changes-graph/incoming-outgoing-changes-graph.png" alt="VSCode source control - incoming outgoing changes graph"/></picture><p>After this feature was added, the problem occurred that the <code class="language-plaintext highlighter-rouge">Source Control</code> panel was displayed slowly when opening the <code class="language-plaintext highlighter-rouge">Source Control</code> panel.</p><h2 id="hide-incomingoutgoing-changes-graph">Hide Incoming/Outgoing changes graph</h2><p>Fortunately, there is a setting in VSCode that allows you to hide the <code class="language-plaintext highlighter-rouge">Incoming/Outgoing changes graph</code>.</p><p>When you search for <code class="language-plaintext highlighter-rouge">scm.showHistoryGraph</code> in the VSCode settings, you can find <code class="language-plaintext highlighter-rouge">SCM: Show History Graph</code> as shown like below.</p><picture><source srcset="/assets/images/category/environment/2024/incoming-outgoing-changes-graph/show-history-graph-setting.avif" type="image/avif"/><source srcset="/assets/images/category/environment/2024/incoming-outgoing-changes-graph/show-history-graph-setting.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/incoming-outgoing-changes-graph/show-history-graph-setting.png" alt="VSCode source control - show history graph setting"/></picture><p>You can hide the <code class="language-plaintext highlighter-rouge">Incoming/Outgoing changes graph</code> by unchecking this setting.</p><h2 id="confirmation">Confirmation</h2><p>If you uncheck this setting and open the <code class="language-plaintext highlighter-rouge">Source Control</code> panel again, you can confirm that the <code class="language-plaintext highlighter-rouge">Incoming/Outgoing changes graph</code> is hidden.</p><picture><source srcset="/assets/images/category/environment/2024/incoming-outgoing-changes-graph/hide-incoming-outgoing-changes-graph.avif" type="image/avif"/><source srcset="/assets/images/category/environment/2024/incoming-outgoing-changes-graph/hide-incoming-outgoing-changes-graph.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/incoming-outgoing-changes-graph/hide-incoming-outgoing-changes-graph.png" alt="VSCode source control - hide incoming outgoing changes graph"/></picture><h2 id="completed">Completed</h2><p>Done! We’ve seen how to hide the <code class="language-plaintext highlighter-rouge">Incoming/Outgoing changes graph</code> of VSCode. If you have a problem that the <code class="language-plaintext highlighter-rouge">Source Control</code> panel being slow like me, try this to solve the problem.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="environment"/><summary type="html"><![CDATA[Let's see how to hide the Git Incoming/Outgoing changes graph feature newly added to VSCode in July 2024.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/environment/2024/incoming-outgoing-changes-graph/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/environment/2024/incoming-outgoing-changes-graph/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">[Essay] Learning methods to survive in the AI era</title><link href="https://deku.posstree.com/en/essay/how-to-survive-in-ai-era/" rel="alternate" type="text/html" title="[Essay] Learning methods to survive in the AI era"/><published>2024-08-16T00:00:00+09:00</published><updated>2024-08-25T20:50:59+09:00</updated><id>https://deku.posstree.com/essay/how-to-survive-in-ai-era-en</id><content type="html" xml:base="https://deku.posstree.com/essay/how-to-survive-in-ai-era/"><![CDATA[<p>The following conditions are easy for AI to learn.</p><ol><li>The goal is clear, objective, and static.</li><li>The number of actions and choices that can be made at each moment is finite.</li><li>At each moment, you can know how close you are to the goal by your choice.</li><li>It is a closed system with little influence from unexpected external factors.</li><li>There is a lot of data on choices and results for achieving the goal.</li></ol><p>This situation is a good condition for learning not only AI but also humans.</p><p>According to a study published by James Shanteau, <a href="https://www.researchgate.net/publication/4815960_Competence_in_Experts_The_Role_of_Task_Characteristics" rel="nofollow noreferrer" target="_blank">Competence in Experts: The Role of Task Characteristics</a>, professionalism is well demonstrated in the profession when feedback is given, work is repeated, and objective analysis is possible.</p><p>However, it can be said that jobs with this expertise now have good conditions for AI to learn.</p><p>An environment that is easy for humans to learn is an environment that is easy for AI to learn, so this may have to give way to AI someday. Therefore, in order to survive in the AI era, you must choose a topic that is difficult to learn in an environment that is difficult to learn.</p><p>The conditions that are difficult to learn are as follows.</p><ol><li>The goal is ambiguous, subjective, and dynamic.</li><li>At each moment, there are infinite actions and choices that can be made.</li><li>At each moment, you cannot know how close you are to the goal by your choice.</li><li>It is an open system that is largely influenced by unexpected external factors.</li><li>There is a lack of data on choices and results for achieving the goal.</li></ol><p>These conditions are difficult for humans to learn, and especially difficult for AI to learn.</p><p>In addition, AI is difficult to replace high-level jobs that require things such as originality, social sensitivity, negotiation, persuasion, and helping and caring for others.</p><ul><li>Originality: To come up with unusual or original ideas for a given topic or situation, or to create creative ways to solve problems.</li><li>Social preceptiveness: Recognizing the reactions of others and understanding why they react like that.</li><li>Negotiation: trying to reconcile people and reconcile the differences between each other.</li><li>Persuasion: Convincing others to change their minds or behaviors.</li><li>Assisting and caring for others: providing personal assistance, treatment, emotional support, or other personal assistance to others, such as colleagues, customers, and patients.</li></ul><p>I am a developer. At the developer field, computer programmers are jobs that AI can easily replace, and software developers are jobs that AI can hardly replace. The difference between these two is in originality, negotiation, and persuasion ability.</p><ul><li>Computer programmer: The main task is to develop according to the specifications given by others, and the process does not require much negotiation or persuasion.</li><li>Software developer: When creating software, it involves thinking about and designing what to make, and there are many tasks that interact with others in the process.</li></ul><p>In addition, the lower the wage now, the more likely AI is to replace that job.</p><p>When creating your own career, you need to check whether AI is replaceable. If AI is a replaceable career, it is not competitive and maybe the job itself can be lost. In order to survive in the AI era, it is necessary to try to learn and grow the parts that AI cannot replace.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="essay"/><summary type="html"><![CDATA[Let's see what learning methods are needed to create a career that AI cannot replace in the AI era.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/essay/2024/how-to-survive-in-ai-era/background.png"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/essay/2024/how-to-survive-in-ai-era/background.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">Web Cache and AWS S3, CloudFront</title><link href="https://deku.posstree.com/en/environment/web/cache-and-aws-s3-cloudfront" rel="alternate" type="text/html" title="Web Cache and AWS S3, CloudFront"/><published>2024-08-15T00:00:00+09:00</published><updated>2024-08-21T12:10:16+09:00</updated><id>https://deku.posstree.com/environment/web/cache-and-aws-s3-cloudfront-en</id><content type="html" xml:base="https://deku.posstree.com/environment/web/cache-and-aws-s3-cloudfront"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#background-of-web-cache">Background of Web Cache</a></li><li><a href="#web-cache">Web Cache</a><ul><li><a href="#cdncontents-delivery-network">CDNContents Delivery Network</a></li><li><a href="#browser-cache">Browser cache</a></li></ul></li><li><a href="#how-web-cache-works">How web cache works</a></li><li><a href="#web-cache-configuration">Web cache configuration</a></li><li><a href="#aws-s3-and-cloudfront">AWS S3 and CloudFront</a></li><li><a href="#aws-s3-cache-settings">AWS S3 Cache Settings</a></li><li><a href="#github-actions">GitHub Actions</a></li><li><a href="#stale-while-revalidate-for-no-downtime-deployment">stale-while-revalidate for no downtime deployment</a></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>In web development, cache plays an important role. By using cache, you can improve the performance of web services and enhance user experience. In this blog post, I will introduce what cache is in web development and how to apply cache when providing web services with static files using AWS S3.</p><h2 id="background-of-web-cache">Background of Web Cache</h2><p>To get data from the server, clients (PCs, smartphones) use the Internet.</p><picture><source srcset="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/server-client-internet.avif" type="image/avif"/><source srcset="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/server-client-internet.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/server-client-internet.png" alt="Web cache and S3 - server and client with internet"/></picture><p>The Internet that connects clients and servers is physically connected, and the global Internet is connected by submarine cables.</p><picture><source srcset="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/submarine-cable.avif" type="image/avif"/><source srcset="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/submarine-cable.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/submarine-cable.jpg" alt="Web cache and S3 - internet submarine cable"/></picture><p>Clients and servers are physically connected, so it takes time to send and receive data as the distance increases.</p><h2 id="web-cache">Web Cache</h2><p>Web cache is a technology that reduces data transmission delays by copying and placing content, that changes less frequently (static content: HTML, CSS, JS, Image, Video, etc.), from a server that is physically far away to a server that is physically close.</p><picture><source srcset="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/web-cache.webp" type="image/avif"/><source srcset="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/web-cache.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/web-cache.webp" alt="Web cache and S3 - web cache"/></picture><p>In web development, there are three main caches.</p><ol><li>CDN(Contents Delivery Network)</li><li>Browser cache</li><li>Database cache</li></ol><picture><source srcset="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/web-cache-with-browser.avif" type="image/avif"/><source srcset="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/web-cache-with-browser.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/web-cache-with-browser.png" alt="Web cache and S3 - web cache with browser"/></picture><p>In this blog post, I will introduce CDN and browser cache.</p><h3 id="cdncontents-delivery-network">CDN(Contents Delivery Network)</h3><p>CDN is a service that provides content by copying less frequently changing content to servers in various parts of the world.</p><p>This reduces the distance between the client and the server, reducing the data transmission and reception delay.</p><p>For example, the world-famous CDN service <code class="language-plaintext highlighter-rouge">Cloudflare</code> has servers around the world as follows.</p><picture><source srcset="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/cloudflare-server-list.avif" type="image/avif"/><source srcset="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/cloudflare-server-list.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/cloudflare-server-list.png" alt="Web cache and S3 - cloudflare server list"/></picture><p>If you use <code class="language-plaintext highlighter-rouge">Cloudflare</code>, you can copy static files to the server provided by <code class="language-plaintext highlighter-rouge">Cloudflare</code> and provide content from a server close to the client.</p><h3 id="browser-cache">Browser cache</h3><p>On the client’s side, the nearest server is the client itself. The browser provides a browser cache that stores some content in client storage from a site once accessed and allows this stored content to be used when reaccessed.</p><p>The Chrome browser caches content in the following locations.</p><ul><li>Windows: <code class="language-plaintext highlighter-rouge">C:\Users\&lt;User Name&gt;\AppData\Local\Google\Chrome\User Data\Default\Cache</code></li><li>macOS: <code class="language-plaintext highlighter-rouge">/Users/&lt;User Name&gt;/Library/Caches/Google/Chrome/Default/Cache</code></li></ul><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="how-web-cache-works">How web cache works</h2><p>Let’s take a look at how web cache works.</p><picture><source srcset="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/web-cache-with-browser.avif" type="image/avif"/><source srcset="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/web-cache-with-browser.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/web-cache-with-browser.png" alt="Web cache and S3 - web cache process"/></picture><ol><li>The user accesses the service from the browser.</li><li>The browser checks if there is anything cached in the browser and displays it if there is a cache.</li><li>If there is no cache in the browser, check if there is a cache in the CDN. If there is a cache in the CDN, use it.</li><li>If there is no cache in the CDN, get the content from the actual server.</li><li>At this time, the CDN checks if it needs to cache and caches it if it can.</li><li>If the browser can cache, it caches the content.</li><li>From the next time the user accesses the same content, the browser and CDN use the cached content.</li></ol><h2 id="web-cache-configuration">Web cache configuration</h2><p>How do browsers and CDNs set caches? Browsers and CDNs determine whether to cache based on <code class="language-plaintext highlighter-rouge">Expires</code>, <code class="language-plaintext highlighter-rouge">Cache-Control</code>, <code class="language-plaintext highlighter-rouge">Etag</code>, <code class="language-plaintext highlighter-rouge">Last-Modified</code>, etc. in the HTTP response headers.</p><p>You can set the cache in the HTTP response header as follows.</p><ul><li>Nginx configuration</li></ul><div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
    listen 80;
    server_name example.com;

    location / {
        # Set Cache-Control
        add_header Cache-Control "max-age=3600, public";

        # Set Expires
        expires 1h;
    }
}
</code></pre></div></div><ul><li>Web server configuration(NodeJS’s Express example)</li></ul><div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// Set Cache-Control</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="dl">'</span><span class="s1">Cache-Control</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">max-age=3600, public</span><span class="dl">'</span><span class="p">);</span>

    <span class="c1">// Set Expires</span>
    <span class="kd">const</span> <span class="nx">maxAgeInSeconds</span> <span class="o">=</span> <span class="mi">3600</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
    <span class="nx">date</span><span class="p">.</span><span class="nx">setSeconds</span><span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">getSeconds</span><span class="p">()</span> <span class="o">+</span> <span class="nx">seconds</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">expiryDate</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nx">toUTCString</span><span class="p">()</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="dl">'</span><span class="s1">Expires</span><span class="dl">'</span><span class="p">,</span> <span class="nx">expiryDate</span><span class="p">);</span>

    <span class="nx">next</span><span class="p">();</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello World!</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Server is running on port 3000</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div><p>If you set the HTTP response header like this, the CDN and the browser will set the cache.</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="aws-s3-and-cloudfront">AWS S3 and CloudFront</h2><p>You can provide a static website using AWS’s S3 and CloudFront.</p><ul><li>S3(Simple Storage Service): A storage service for storing static files</li><li>CloudFront: CDN service</li></ul><p>AWS S3 is a storage service, but it also provides server functions that can serve web services with static files.</p><p>Typically, static web pages developed with HTML, CSS, JavaScript or web applications developed with frontend frameworks such as React, Vue, Angular, etc., are uploaded to S3 and served through CloudFront.</p><picture><source srcset="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/aws-s3-cloudfront-cache.avif" type="image/avif"/><source srcset="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/aws-s3-cloudfront-cache.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/aws-s3-cloudfront-cache.png" alt="Web cache and S3 - AWS S3 and CloudFront cache"/></picture><p>At this time, you can configure the uploaded files settings to set browser cache and CDN(CloudFront) cache.</p><h2 id="aws-s3-cache-settings">AWS S3 Cache Settings</h2><p>The cache is set by setting <code class="language-plaintext highlighter-rouge">Expires</code> or <code class="language-plaintext highlighter-rouge">Cache-Control</code> in the HTTP response header, so basically, it cannot be set on the frontend side.</p><p>In the case of <code class="language-plaintext highlighter-rouge">CloudFront + S3</code>, since there is no server, you cannot add server code to set HTTP headers.</p><p>However, <code class="language-plaintext highlighter-rouge">S3</code> has server functions, so you can configure the cache by changing the S3 settings.</p><p>When uploading files to S3 using the CLI tool provided by AWS, you can use the following command. In this case, you can set the cache using the <code class="language-plaintext highlighter-rouge">--cache-control</code> option.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws s3 <span class="nb">cp</span> &lt;Target directory&gt; s3://&lt;S3 Bucket name&gt; <span class="nt">--recursive</span> <span class="nt">--exclude</span> <span class="s2">"assets/*"</span> <span class="nt">--cache-control</span> <span class="s1">'public,max-age=60,stale-while-revalidate=2592000’
</span></code></pre></div></div><ul><li><code class="language-plaintext highlighter-rouge">Target directory</code>: Local folder path where the build result to be uploaded to S3 is located</li><li><code class="language-plaintext highlighter-rouge">S3 Bucket name</code>: S3’s Bucket name where the file will be uploaded</li><li><code class="language-plaintext highlighter-rouge">--recursive</code> option: <code class="language-plaintext highlighter-rouge">aws s3 cp</code> is a command that copies a single file by default, so use the <code class="language-plaintext highlighter-rouge">--recursive</code> option to upload all files in the specified directory</li><li><code class="language-plaintext highlighter-rouge">--exclude "assets/*"</code>: Set the upload exclusion target</li><li><code class="language-plaintext highlighter-rouge">--cache-control 'public,max-age=60,stale-while-revalidate=2592000'</code>: Cache settings</li><li><code class="language-plaintext highlighter-rouge">max-age=60</code>: Cache for 60 seconds</li><li><code class="language-plaintext highlighter-rouge">stale-while-revalidate</code>: If the cache is expired by <code class="language-plaintext highlighter-rouge">max-age</code>, while revalidating the content in the background, provide the expired cache for up to 30 days</li></ul><h2 id="github-actions">GitHub Actions</h2><p>The following is the code to upload files to S3 using <code class="language-plaintext highlighter-rouge">GitHub Actions</code>.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Configure AWS credentials</span>
  <span class="na">uses</span><span class="pi">:</span> <span class="s">aws-actions/configure-aws-credentials@v4</span>
  <span class="na">with</span><span class="pi">:</span>
    <span class="na">role-to-assume</span><span class="pi">:</span> <span class="s">$</span>
    <span class="na">aws-region</span><span class="pi">:</span> <span class="s">ap-northeast-1</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Upload file to S3</span>
  <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">aws s3 rm s3://$ --recursive</span>
    <span class="s">aws s3 cp apps/dist s3://$ --recursive --exclude "assets/*" --cache-control 'public,max-age=60,stale-while-revalidate=2592000'</span>
    <span class="s">aws s3 sync apps/dist/assets s3://$/assets --cache-control 'public,max-age=60,immutable'</span>
</code></pre></div></div><p>After deleting all files using <code class="language-plaintext highlighter-rouge">aws s3 rm</code>, upload files using <code class="language-plaintext highlighter-rouge">aws s3 cp</code>. Finally, upload the <code class="language-plaintext highlighter-rouge">assets</code> folder using <code class="language-plaintext highlighter-rouge">aws s3 sync</code>.</p><h2 id="stale-while-revalidate-for-no-downtime-deployment">stale-while-revalidate for no downtime deployment</h2><p>AWS introduced the usage of <code class="language-plaintext highlighter-rouge">stale-while-revalidate</code> in the following blog post.</p><ul><li><a href="https://aws.amazon.com/jp/blogs/news/networking-and-content-delivery-host-single-page-applications-spa-with-tiered-ttls-on-cloudfront-and-s3/" rel="nofollow noreferrer" target="_blank">https://aws.amazon.com/jp/blogs/news/networking-and-content-delivery-host-single-page-applications-spa-with-tiered-ttls-on-cloudfront-and-s3/</a></li></ul><p>You can update the service version without interruption by using <code class="language-plaintext highlighter-rouge">stale-while-revalidate</code>.</p><picture><source srcset="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/stale-while-revalidate.avif" type="image/avif"/><source srcset="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/stale-while-revalidate.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/stale-while-revalidate.png" alt="Web cache and S3 - stale-while-revalidate option for no downtime deployment"/></picture><ol><li>The user runs the service in the browser.</li><li>If the user is already using the service in V1 and has a cache of V1 with stale-while-revalidate in the browser, it will be used first.</li><li>The browser requests content that has expired(max-age) from CloudFront(CDN) in the background.</li><li>If there is a cache updated to V2 in CloudFront, it will be provided to the browser.</li><li>The browser caches the content received from CloudFront and uses it from the next time.</li><li>If CloudFront’s cache also needs to be updated(max-age), first provide the cache of V1 with stale-while-revalidate to the browser, and then update the cache by fetching content from the actual server in the background.</li></ol><h2 id="completed">Completed</h2><p>Done! We’ve seen what web cache is and how to apply cache when providing web services with static files using AWS S3 and CloudFront.</p><p>I hope this blog post helps you understand web cache and how to apply cache in AWS.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="environment"/><summary type="html"><![CDATA[Let's see what cache is in web development and how to apply cache when providing web services with static files using AWS S3 and CloudFront.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/environment/2024/cache-and-aws-s3-cloudfront/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">Software Development Deployment Strategy</title><link href="https://deku.posstree.com/en/environment/deployment-strategy/" rel="alternate" type="text/html" title="Software Development Deployment Strategy"/><published>2024-08-07T00:00:00+09:00</published><updated>2024-08-09T14:33:57+09:00</updated><id>https://deku.posstree.com/environment/deployment-strategy-en</id><content type="html" xml:base="https://deku.posstree.com/environment/deployment-strategy/"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#in-place-deployment">In-place deployment</a></li><li><a href="#rolling-update-deployment">Rolling-update deployment</a></li><li><a href="#blue-green-deployment">Blue-green deployment</a></li><li><a href="#canary-deployment">Canary deployment</a></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>In software development, deployment strategies are a way to keep services running reliably. There are many different types of deployment strategies, and you should select and use the appropriate deployment strategy based on each feature. In this blog post, I will introduce the types and usage of deployment strategies.</p><h2 id="in-place-deployment">In-place deployment</h2><p>In-place deployment is a structure that notifies users, like financial institutions or game updates, and stops and updates services at that time.</p><picture><source srcset="/assets/images/category/environment/2024/deployment-strategy/in-place.webp" type="image/avif"/><source srcset="/assets/images/category/environment/2024/deployment-strategy/in-place.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/deployment-strategy/in-place.webp" alt="Deployment strategy - in place deployment"/></picture><ol><li>Stop the running server.</li><li>Deploy a new application.</li><li>Restart the stopped server.</li></ol><p>In-place deployment has the following advantages and disadvantages.</p><p>Advantages</p><ul><li>All users always use the same version of the application.</li><li>There is no need to consider compatibility because old and new versions do not exist at the same time, and there is no possibility of problems due to lack of compatibility.</li><li>There is no need for infrastructure configuration for deployment, and deployment is simple, so it is cost-effective.</li></ul><p>Disadvantages</p><ul><li>The service must be stopped.</li><li>After deployment, if there is a problem and you need to roll back, it is difficult to roll back because you need to stop the service.</li><li>If a problem occurs during deployment, the service downtime may be long.</li></ul><p>In-place deployment is used for services that become important issues (financial issues) if problems occur between old and new versions, or services like games that cannot use new items, maps, and game systems without using the new version.</p><h2 id="rolling-update-deployment">Rolling-update deployment</h2><p>Rolling-update deployment is a method used when you have a limited number of servers that can operate, and when you need to deploy uninterrupted, unlike in-place deployments.</p><picture><source srcset="/assets/images/category/environment/2024/deployment-strategy/rolling-update.webp" type="image/avif"/><source srcset="/assets/images/category/environment/2024/deployment-strategy/rolling-update.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/deployment-strategy/rolling-update.webp" alt="Deployment strategy - rolling update deployment"/></picture><ol><li>Make one of the currently running servers inaccessible from the outside (users).</li><li>Check for no access.</li><li>Deploy a new application to the server where access is stopped.</li><li>Make the deployed server accessible from the outside.</li><li>Check if the new server can be accessed from the outside.</li><li>Repeat 1-5 until all servers become a new version of the application.</li></ol><p>Rolling-update deployment has the following advantages and disadvantages.</p><p>Advantages</p><ul><li>You can deploy without interruption.</li><li>You can use multiple servers to deploy, so you can stop deploying or roll back if there is a problem.</li><li>Deploying to multiple servers maximizes the use of new versions of the application, so the load is distributed.</li></ul><p>Disadvantages</p><ul><li>Because the number of servers is limited, stopping one server for deployment may cause temporary load problems on other servers.</li><li>Deploying occurs one by one, so it takes time to deploy to all servers.</li><li>Because old and new versions are running at the same time, you need to develop and deploy compatible applications.</li></ul><p>This deployment method is used when there are restrictions on operating funds and you cannot increase the number of servers, and when you want to operate services without interruption.</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="blue-green-deployment">Blue-green deployment</h2><p>Blue/Green Deployment is a common method if you have no server limitations and want to deploy services uninterrupted. You can also use this method if you want to test a new version of the application in a production environment.</p><picture><source srcset="/assets/images/category/environment/2024/deployment-strategy/blue-green.webp" type="image/avif"/><source srcset="/assets/images/category/environment/2024/deployment-strategy/blue-green.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/deployment-strategy/blue-green.webp" alt="Deployment strategy - Blue green deployment"/></picture><ol><li>Create a server (Green) to deploy a new version.</li><li>Deploy a new application to the new server.</li><li>Direct new access to the new server and prevent new access to the existing server (Blue).</li><li>When accessing a new server or when a problem occurs in a new application, direct new access to the existing server to roll back.</li><li>If there is no problem with the new server’s access, delete the existing server.</li></ol><p>Blue-green deployment has the following advantages and disadvantages.</p><p>Advantages</p><ul><li>You can deploy without interruption.</li><li>When deploying a new version, the previous version of the server is still alive, so if there is a problem, you can roll back quickly.</li></ul><p>Disadvantages</p><ul><li>You need to prepare servers for new and old versions, so the temporary cost is doubled.</li><li>Check the new version for problems and delete the old version, so it takes time to complete the deployment.</li><li>After deploying and deleting the old version server, you cannot roll back. In this case, you need to redeploy the previous version to roll back.</li></ul><p>Blue/Green deployment is used by services that have no problem if new and old versions exist at the same time, and it is used by services that manage user access using Session or Socket because existing access is not forcibly disconnected during deployment.</p><h2 id="canary-deployment">Canary deployment</h2><p>Canary deployment is a deployment method that can be used when you need feedback on A/B testing, new version features, want to carefully update services, or want to test features under development in a production environment.</p><picture><source srcset="/assets/images/category/environment/2024/deployment-strategy/canary.webp" type="image/avif"/><source srcset="/assets/images/category/environment/2024/deployment-strategy/canary.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/deployment-strategy/canary.webp" alt="Deployment strategy - Canary deployment"/></picture><ol><li>Prepare a server to deploy a new version.</li><li>Gradually increase the access to the new version.</li><li>If you determine that the new version is good, gradually increase the user’s access.</li><li>If it is determined that the new version is not good, return the user’s access to the previous version.</li><li>When all access directs to the new version of the server, delete the previous version of the server.</li></ol><p>Canary deployment has the following advantages and disadvantages.</p><p>Advantages</p><ul><li>You can observe the reaction of A/B testing or new features and decide whether to introduce new features.</li><li>Rollback is easy.</li><li>You can deploy while monitoring, so you can deploy more safely.</li></ul><p>Disadvantages</p><ul><li>You need to prepare servers for the new version and the previous version, so the temporary cost is doubled.</li><li>Check the new version for problems and delete the old version, so it takes time to complete the deployment.</li><li>Depending on the person using the service, the screen may be different or new features may not be available, causing a UX mismatch problem.</li></ul><p>If you want to observe the reaction of A/B testing or new features, want to carefully update services, or want to test features under development in a production environment, you can use this deployment method.</p><h2 id="completed">Completed</h2><p>Done! we’ve seen the types and usage of service deployment strategies in software development. I hope this blog post helps you choose the appropriate deployment strategy for the services and resources you are currently operating.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="environment"/><summary type="html"><![CDATA[Let's see the types and usage of service deployment strategies in software development.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/environment/2024/deployment-strategy/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/environment/2024/deployment-strategy/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">Branch Strategy for Software Development</title><link href="https://deku.posstree.com/en/environment/branch-strategy/" rel="alternate" type="text/html" title="Branch Strategy for Software Development"/><published>2024-08-04T00:00:00+09:00</published><updated>2024-08-08T20:53:30+09:00</updated><id>https://deku.posstree.com/environment/branch-strategy-en</id><content type="html" xml:base="https://deku.posstree.com/environment/branch-strategy/"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#git-flow-strategy">git-flow strategy</a></li><li><a href="#github-flow-strategy">GitHub flow strategy</a></li><li><a href="#gitlab-flow-strategy">GitLab flow strategy</a></li><li><a href="#trunk-based-development-strategy">Trunk-Based Development strategy</a></li><li><a href="#scaled-trunk-based-development-strategy">Scaled Trunk-Based Development strategy</a></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>The branch strategy is a way to efficiently manage code when multiple developers collaborate. There are various types of branch strategies, and you need to choose and use the appropriate branch strategy according to the characteristics of each. In this blog post, I will introduce the types and usage of branch strategies.</p><h2 id="git-flow-strategy">git-flow strategy</h2><p>The <code class="language-plaintext highlighter-rouge">git-flow</code> branch strategy is a branch strategy proposed by Vincent Driessen. It is the most famous branch strategy among branch strategies, and many companies use it.</p><ul><li><a href="https://nvie.com/posts/a-successful-git-branching-model/" rel="nofollow noreferrer" target="_blank">https://nvie.com/posts/a-successful-git-branching-model/</a></li></ul><p>The <code class="language-plaintext highlighter-rouge">git-flow</code> branch strategy consists of <code class="language-plaintext highlighter-rouge">master</code>, <code class="language-plaintext highlighter-rouge">develop</code>, <code class="language-plaintext highlighter-rouge">feature</code>, <code class="language-plaintext highlighter-rouge">release</code>, and <code class="language-plaintext highlighter-rouge">hotfix</code> branches.</p><picture><source srcset="/assets/images/category/environment/2024/branch_strategy/git-flow.avif" type="image/avif"/><source srcset="/assets/images/category/environment/2024/branch_strategy/git-flow.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/branch_strategy/git-flow.png" alt="Branch strategy - git-flow"/></picture><ul><li>master branch <ul><li>The master branch is used to maintain stable code that can always be released as a product.</li><li>The releasable version is managed as a Tag on this branch.</li></ul></li><li>develop branch <ul><li>The develop branch contains the code for the next release.</li><li>Branches for new features and bug fixes are created here.</li></ul></li><li>feature branch <ul><li>A branch for developing new features, created from develop.</li><li>Each feature is developed in a separate branch, and when development is complete, it is merged into the develop branch.</li></ul></li><li>release branch <ul><li>A branch used in the preparation stage for a release, created from the develop branch.</li><li>After preparing for deployment (updating version numbers, documents, etc.) and testing, it is merged into the master and develop branches.</li></ul></li><li>hotfix branch <ul><li>A branch for urgent bug fixes, created from the master branch.</li><li>After the fix is complete, it is merged into the master and develop branches.</li></ul></li></ul><p>In git-flow, when the release branch is merged into the master, and the hotfix branch is merged into the master, it is released. Then, the release point is managed using Git tags.</p><h2 id="github-flow-strategy">GitHub flow strategy</h2><p>The <code class="language-plaintext highlighter-rouge">GitHub flow</code> is one of the easy and intuitive Git branch strategies proposed by GitHub. This strategy mainly provides a simple workflow for release management in web development.</p><ul><li><a href="https://docs.github.com/get-started/using-github/github-flow" rel="nofollow noreferrer" target="_blank">https://docs.github.com/get-started/using-github/github-flow</a></li></ul><p>The <code class="language-plaintext highlighter-rouge">GitHub flow</code> branch strategy consists of <code class="language-plaintext highlighter-rouge">master</code> and <code class="language-plaintext highlighter-rouge">feature</code> branches.</p><picture><source srcset="/assets/images/category/environment/2024/branch_strategy/github-flow.avif" type="image/avif"/><source srcset="/assets/images/category/environment/2024/branch_strategy/github-flow.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/branch_strategy/github-flow.png" alt="Branch strategy - GitHub flow"/></picture><ul><li>master branch <ul><li>The master branch is always used to maintain stable code that can be released as a product.</li></ul></li><li>feature branch <ul><li>A branch for developing new features, created from the master.</li><li>Modify and commit the code to this branch.</li></ul></li><li>Pull Request (PR) <ul><li>When the feature is complete, the developer creates a Pull Request to merge it into the master branch.</li><li>It cannot be merged if it does not pass code review or tests.</li></ul></li><li>Code review and test <ul><li>Another developer reviews the Pull Request.</li><li>If automated tests pass, the code is considered safe.</li></ul></li><li>Merge <ul><li>When the Pull Request meets all conditions, it is merged into the master.</li></ul></li></ul><p>In GitHub flow, when the feature branch is merged into the master, it is released. In GitHub flow, it is essential to release frequently to provide new features and bug fixes to users quickly.</p><h2 id="gitlab-flow-strategy">GitLab flow strategy</h2><p>The <code class="language-plaintext highlighter-rouge">GitLab flow</code> is a branch strategy proposed by GitLab. The GitLab flow is the same as the basic GitHub flow. However, it is a strategy that can be used when there is a release timing (such as app review for iOS app deployment and services that are regularly deployed).</p><ul><li><a href="https://docs.gitlab.co.jp/ee/topics/gitlab_flow.html" rel="nofollow noreferrer" target="_blank">https://docs.gitlab.co.jp/ee/topics/gitlab_flow.html</a></li></ul><p>The <code class="language-plaintext highlighter-rouge">GitLab flow</code> branch strategy consists of <code class="language-plaintext highlighter-rouge">master</code>, <code class="language-plaintext highlighter-rouge">feature</code> branches, and branches for deployment (production, staging, etc.).</p><picture><source srcset="/assets/images/category/environment/2024/branch_strategy/gitlab-flow.avif" type="image/avif"/><source srcset="/assets/images/category/environment/2024/branch_strategy/gitlab-flow.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/branch_strategy/gitlab-flow.png" alt="Branch strategy - GitLab flow"/></picture><ul><li>master branch <ul><li>The master branch is always used to maintain stable code that can be released as a product.</li></ul></li><li>feature branch <ul><li>A branch for developers to develop new features, created from the master.</li><li>Modify and commit the code to this branch.</li></ul></li><li>Merge Request <ul><li>When the feature is complete, the developer creates a Merge Request to merge it into the master branch.</li><li>It can be merged if it passes code review or tests.</li></ul></li><li>Code review and test <ul><li>Another developer reviews the Merge Request.</li><li>If automated tests pass, it is considered safe.</li></ul></li><li>production(stable, staging) branch <ul><li>A branch that has stable code that can be deployed to the production (stable, staging) environment.</li><li>A branch created for deployment, created from the master branch.</li></ul></li><li>hotfix branch <ul><li>There is no hotfix branch in the GitLab flow. If there is a problem, create a branch from the master branch and merge it into the master branch. Then, use the cherry-pick feature of Git to merge it into the production branch.</li></ul></li></ul><p>The GitLab flow is a branching strategy that can be used when there is a release timing. The developed content (feature branch) is merged into the master branch, and when the release is needed, a production (stable, staging) branch is created from the master branch and released.</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="trunk-based-development-strategy">Trunk-Based Development strategy</h2><p>The <code class="language-plaintext highlighter-rouge">Trunk-Based Development(TBD)</code> strategy is a simple and effective Git branch strategy aimed at rapid software releases and high collaboration. The TBD strategy emphasizes continuous integration (CI) and continuous deployment (CD).</p><ul><li><a href="https://trunkbaseddevelopment.com/" rel="nofollow noreferrer" target="_blank">https://trunkbaseddevelopment.com/</a></li></ul><p>The <code class="language-plaintext highlighter-rouge">TBD</code> branch strategy consists of single branch (trunk, master, main).</p><picture><source srcset="/assets/images/category/environment/2024/branch_strategy/trunk-based-development.avif" type="image/avif"/><source srcset="/assets/images/category/environment/2024/branch_strategy/trunk-based-development.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/branch_strategy/trunk-based-development.png" alt="Branch strategy - Trunk-Based Development"/></picture><ul><li>Single branch (trunk, master, main) <ul><li>TBD mainly uses the master (main) branch. The master branch is used to maintain stable code that can always be released as a product.</li></ul></li><li>Frequent commits <ul><li>Developers mainly commit to the master branch. This makes changes shared to the code quickly to avoid cross-branch conflicts.</li></ul></li><li>Direct commit and code review instead of Pull Request <ul><li>Instead of creating a Pull Request for small changes, developers commit directly to the master branch for code review. This can minimize conflicts between branches.</li></ul></li><li>Release <ul><li>Since only the master branch is managed, releases are made at a specific timing.</li></ul></li></ul><p>TBD requires all members to commit within 24 hours. In other words, it is important to frequently write small chunks of code that can be committed within 24 hours.</p><p>TBD is famous for being used by Google.</p><ul><li><a href="https://www.youtube.com/watch?v=W71BTkUbdqE&amp;t=869s" rel="nofollow noreferrer" target="_blank">https://www.youtube.com/watch?v=W71BTkUbdqE&amp;t=869s</a></li><li><a href="https://trunkbaseddevelopment.com/game-changers/#google-revealing-their-monorepo-trunk-2016" rel="nofollow noreferrer" target="_blank">https://trunkbaseddevelopment.com/game-changers/#google-revealing-their-monorepo-trunk-2016</a></li></ul><h2 id="scaled-trunk-based-development-strategy">Scaled Trunk-Based Development strategy</h2><p>The <code class="language-plaintext highlighter-rouge">Scaled Trunk-Based Development(STBD)</code> strategy is the same as the Trunk-Based Development strategy, but it creates a feature branch and commits to the feature branch. After that, the feature branch is merged into the master branch.</p><ul><li><a href="https://trunkbaseddevelopment.com/" rel="nofollow noreferrer" target="_blank">https://trunkbaseddevelopment.com/</a></li></ul><p>The <code class="language-plaintext highlighter-rouge">STBD</code> branch strategy is the same as <code class="language-plaintext highlighter-rouge">TBD</code>, consisting of single branch (trunk, master, main) and a feature branch.</p><picture><source srcset="/assets/images/category/environment/2024/branch_strategy/trunk-based-development.avif" type="image/avif"/><source srcset="/assets/images/category/environment/2024/branch_strategy/trunk-based-development.webp" type="image/webp"/><img src="/assets/images/category/environment/2024/branch_strategy/trunk-based-development.png" alt="Branch strategy - Trunk-Based Development"/></picture><ul><li>Single branch (trunk, master, main) <ul><li>STBD mainly uses the master (main) branch. The master branch is used to maintain stable code that can always be released as a product.</li></ul></li><li>feature branch <ul><li>It is a branch with a short life cycle for small commits.</li></ul></li><li>Release <ul><li>Since the master branch is directly committed, releases are made at a specific timing.</li></ul></li></ul><p>TBD needs its own development system by committing directly to the master branch and reviewing the code. STBD is a branch strategy that takes advantage of TBD and can be used in situations where it is difficult to construct its own TBD development system.</p><h2 id="completed">Completed</h2><p>Done! We’ve seen the types and usage of branch strategies for software development. If you want to know more about each branch strategy, please check the link provided.</p><p>The branch strategy is a way to efficiently manage code when multiple developers collaborate. There are many different kinds of branch strategies, and there is no best or worst strategy. You can choose and use a branch strategy for each project and team, or to create and use your own branch strategy based on this branch strategy.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="environment"/><summary type="html"><![CDATA[Let's see the types and usage of branch strategies for software development.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/environment/2024/monorepo/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/environment/2024/monorepo/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry></feed>