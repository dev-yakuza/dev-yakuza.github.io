<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://deku.posstree.com/en/feed.xml" rel="self" type="application/atom+xml"/><link href="https://deku.posstree.com/en/" rel="alternate" type="text/html"/><updated>2024-10-09T07:12:30+09:00</updated><id>https://deku.posstree.com/feed.xml</id><title type="html">Deku</title><subtitle>『Programming Artist, DeKu』</subtitle><author><name>dev.yakuza@gmail.com</name></author><entry xml:lang="en"><title type="html">[GitHub] How to use multiple GitHub accounts on one machine</title><link href="https://deku.posstree.com/en/git/user-multiple-github-users/" rel="alternate" type="text/html" title="[GitHub] How to use multiple GitHub accounts on one machine"/><published>2024-09-25T00:00:00+09:00</published><updated>2024-10-05T20:48:48+09:00</updated><id>https://deku.posstree.com/git/use-multiple-github-users-en</id><content type="html" xml:base="https://deku.posstree.com/git/user-multiple-github-users/"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#create-ssh-key">Create SSH key</a></li><li><a href="#register-ssh-key-on-github">Register SSH key on GitHub</a></li><li><a href="#modify-config-file">Modify config file</a></li><li><a href="#clone">Clone</a></li><li><a href="#git-user-settings">Git user settings</a></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>Sometimes you may want to use both your company’s GitHub account and your personal GitHub account on one machine (PC). In this blog post, I will introduce how to set up multiple GitHub accounts on one machine.</p><h2 id="create-ssh-key">Create SSH key</h2><p>To use multiple GitHub accounts, you need to create an SSH key. I use <code class="language-plaintext highlighter-rouge">macOS</code>, so I will explain based on <code class="language-plaintext highlighter-rouge">macOS</code>.</p><p>First, go to the <code class="language-plaintext highlighter-rouge">.ssh</code> directory.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/.ssh
</code></pre></div></div><p>Next, use the <code class="language-plaintext highlighter-rouge">ssh-keygen</code> command to create an SSH key. First, create an SSH key for your personal account.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"GITHUB_PERSONAL_ACCOUNT_EMAIL"</span>
</code></pre></div></div><p>Then, you will be asked what name to save the key as.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Enter file <span class="k">in </span>which to save the key <span class="o">(</span>/Users/user_name/.ssh/id_rsa<span class="o">)</span>:
</code></pre></div></div><p>In my case, I saved it as <code class="language-plaintext highlighter-rouge">id_rsa_personal</code> for easy distinction. Next, create an SSH key for your company account.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"GITHUB_COMPANY_ACCOUNT_EMAIL"</span>
</code></pre></div></div><p>Again, you will be asked what name to save the key as.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Enter file <span class="k">in </span>which to save the key <span class="o">(</span>/Users/user_name/.ssh/id_rsa<span class="o">)</span>:
</code></pre></div></div><p>In my case, I saved it as <code class="language-plaintext highlighter-rouge">id_rsa_work</code> for easy distinction.</p><h2 id="register-ssh-key-on-github">Register SSH key on GitHub</h2><p>You need to register the generated SSH key on GitHub. First, let’s register the SSH key for the personal account.</p><p>Run the following command to check the SSH key.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> ~/.ssh/id_rsa_personal.pub
</code></pre></div></div><p>Copy the displayed SSH key and go to the GitHub website. Click <code class="language-plaintext highlighter-rouge">Settings</code> -&gt; <code class="language-plaintext highlighter-rouge">SSH and GPG keys</code> -&gt; <code class="language-plaintext highlighter-rouge">New SSH key</code> to register the SSH key. You need to be logged in with your personal account on the GitHub website.</p><picture><source srcset="/assets/images/category/git/2024/user-multiple-github-users/github_register_new_ssh_key.avif" type="image/avif"/><source srcset="/assets/images/category/git/2024/user-multiple-github-users/github_register_new_ssh_key.webp" type="image/webp"/><img src="/assets/images/category/git/2024/user-multiple-github-users/github_register_new_ssh_key.png" alt="Use multiple GitHub users in local machine: Register new SSH key"/></picture><p>Register the SSH key on the GitHub website in the same way for the company account. You need to be logged in with your company account on the GitHub website.</p><h2 id="modify-config-file">Modify config file</h2><p>To distinguish between GitHub accounts using the SSH key you set up, modify the <code class="language-plaintext highlighter-rouge">~/.ssh/config</code> file as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># personal</span>

Host personal
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa_personal

<span class="c"># work</span>

Host github.com
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa_work
</code></pre></div></div><p>Then, execute the following command to check if the SSH key is registered.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-T</span> git@personal
</code></pre></div></div><p>If the following message appears, the SSH key has been successfully registered.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hi GITHUB_PERSONAL_ACCOUNT! You<span class="s1">'ve successfully authenticated, but GitHub does not provide shell access.
</span></code></pre></div></div><p>In the same way, execute the following command to check if the SSH key is registered for the company account.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-T</span> git@github.com
</code></pre></div></div><p>If the following message appears, the SSH key has been successfully registered.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hi GITHUB_COMPANY_ACCOUNT! You<span class="s1">'ve successfully authenticated, but GitHub does not provide shell access.
</span></code></pre></div></div><h2 id="clone">Clone</h2><p>Now, when you clone a project from GitHub, you can distinguish between your personal account and your company account as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Personal account</span>
git clone git@personal:GITHUB_PERSONAL_ACCOUNT/REPOSITORY.git
<span class="c"># Company account</span>
git clone git@github.com:GITHUB_COMPANY_ACCOUNT/REPOSITORY.git
</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="git-user-settings">Git user settings</h2><p>When you execute the following command, you can check the <code class="language-plaintext highlighter-rouge">user.name</code> and <code class="language-plaintext highlighter-rouge">user.email</code> set in <code class="language-plaintext highlighter-rouge">Git</code>.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check user name</span>
git config user.name
<span class="c"># Check user email</span>
git config user.email
</code></pre></div></div><p>If you have not registered user information in the <code class="language-plaintext highlighter-rouge">Global</code> settings of <code class="language-plaintext highlighter-rouge">Git</code>, nothing will appear when you execute the command.</p><p>You can set the <code class="language-plaintext highlighter-rouge">Global</code> user and set the user to use in specific folders by modifying the <code class="language-plaintext highlighter-rouge">.gitconfig</code> file.</p><p>First, create the <code class="language-plaintext highlighter-rouge">~/.gitconfig-work</code> file and the <code class="language-plaintext highlighter-rouge">~/.gitconfig-personal</code> file and modify them as follows.</p><ul><li><code class="language-plaintext highlighter-rouge">~/.gitconfig-work</code></li></ul><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># code ~/.gitconfig-work</span>
<span class="o">[</span>user]
	name <span class="o">=</span> <span class="s2">"GITHUB_COMPANY_ACCOUNT_USER_NAME"</span>
	email <span class="o">=</span> GITHUB_COMPANY_ACCOUNT_EMAIL
</code></pre></div></div><ul><li><code class="language-plaintext highlighter-rouge">~/.gitconfig-personal</code></li></ul><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># code ~/.gitconfig-personal</span>
<span class="o">[</span>user]
    name <span class="o">=</span> <span class="s2">"GITHUB_PERSONAL_ACCOUNT_USER_NAME"</span>
    email <span class="o">=</span> GITHUB_PERSONAL_ACCOUNT_EMAIL
</code></pre></div></div><p>Then, modify the <code class="language-plaintext highlighter-rouge">.gitconfig</code> file as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># code ~/.gitconfig</span>

<span class="c"># This is for Global settings</span>
<span class="o">[</span>user]
	name <span class="o">=</span> <span class="s2">"GITHUB_COMPANY_ACCOUNT_USER_NAME"</span>
	email <span class="o">=</span> GITHUB_COMPANY_ACCOUNT_EMAIL
<span class="c"># For company account</span>
<span class="o">[</span>includeIf <span class="s2">"gitdir:~/WORK/"</span><span class="o">]</span>
    path <span class="o">=</span> ~/.gitconfig-work
<span class="c"># For personal account</span>
<span class="o">[</span>includeIf <span class="s2">"gitdir:~/PERSONAL/"</span><span class="o">]</span>
    path <span class="o">=</span> ~/.gitconfig-personal
</code></pre></div></div><p>In this setting, the user information for the company account is set as the <code class="language-plaintext highlighter-rouge">Global</code> user of <code class="language-plaintext highlighter-rouge">Git</code>. In the <code class="language-plaintext highlighter-rouge">WORK</code> folder, the company account is used, and in the <code class="language-plaintext highlighter-rouge">PERSONAL</code> folder, the personal account is used.</p><p>To check if the settings are correct, go to the <code class="language-plaintext highlighter-rouge">PERSONAL</code> folder. Then, execute the following command to check the user information.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/PERSONAL
git config user.name
git config user.email
</code></pre></div></div><p>Then, the <code class="language-plaintext highlighter-rouge">Global</code> user information of <code class="language-plaintext highlighter-rouge">Git</code> will be displayed as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># git config user.name</span>
GITHUB_COMPANY_ACCOUNT_USER_NAME
<span class="c"># git config user.email</span>
GITHUB_COMPANY_ACCOUNT_EMAIL
</code></pre></div></div><p>This is because there is no <code class="language-plaintext highlighter-rouge">Git</code> project in the current folder (<code class="language-plaintext highlighter-rouge">PERSONAL</code>) at the moment. So, the <code class="language-plaintext highlighter-rouge">Global</code> user information of <code class="language-plaintext highlighter-rouge">Git</code> is displayed.</p><p>Next, let’s create an actual <code class="language-plaintext highlighter-rouge">Git</code> project and check the user information of <code class="language-plaintext highlighter-rouge">Git</code>.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> ~/PERSONAL/temp
<span class="nb">cd</span> ~/PERSONAL/temp
git init
git config user.name
git config user.email
</code></pre></div></div><p>Then, then personal account user information of <code class="language-plaintext highlighter-rouge">Git</code> will be displayed as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GITHUB_PERSONAL_ACCOUNT_USER_NAME
GITHUB_COMPANY_ACCOUNT_EMAIL
</code></pre></div></div><p>This is because we have set the personal account user information in the <code class="language-plaintext highlighter-rouge">.gitconfig</code> file as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>includeIf <span class="s2">"gitdir:~/PERSONAL/"</span><span class="o">]</span>
    path <span class="o">=</span> ~/.gitconfig-personal
</code></pre></div></div><h2 id="completed">Completed</h2><p>Done! We’ve seen how to use multiple GitHub accounts on one machine. Now you can manage projects without any inconvenience using multiple GitHub accounts on one machine.</p><p>Also, we’ve seen how to set the user to use in specific folders using the <code class="language-plaintext highlighter-rouge">.gitconfig</code> file. You can now easily change the user information of <code class="language-plaintext highlighter-rouge">Git</code>.</p><p>If you need to use multiple <code class="language-plaintext highlighter-rouge">GitHub</code> accounts, I hope you can refer to this blog post and set up and use multiple <code class="language-plaintext highlighter-rouge">GitHub</code> accounts.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="git"/><summary type="html"><![CDATA[Let's see how to set up and use multiple GitHub accounts on one machine (PC).]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/git/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/git/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">Extracting Expertise from Experts through Cognitive Task Analysis</title><link href="https://deku.posstree.com/en/essay/cognitibe-task-analysis/" rel="alternate" type="text/html" title="Extracting Expertise from Experts through Cognitive Task Analysis"/><published>2024-09-17T00:00:00+09:00</published><updated>2024-10-04T20:24:08+09:00</updated><id>https://deku.posstree.com/essay/cognitibe-task-analysis-en</id><content type="html" xml:base="https://deku.posstree.com/essay/cognitibe-task-analysis/"><![CDATA[<p>Most experts often fail to explain their professional skills properly.</p><blockquote><p>The US Army was trying to cancel a mine detection system that had been developed for 9 years and cost $40 million. The prototype had a very low mine detection rate in actual tests. According to the test, it showed a miserable result of failing to detect 96% of low-metal anti-personnel mines. Carnegie Mellon University psychology professor James Staszewski went in search of so-called outliers (outstanding people who far exceed the average) in mine detection. One of them was Floyd Rocky Rockwell. He could find low-metal mines with new equipment. However, like most other experts, Floyd could not explain how he could find mines.</p></blockquote><p>At this time, <code class="language-plaintext highlighter-rouge">Cognitive Task Analysis</code> can extract expertise from experts.</p><blockquote><p>Professor Staszewski used cognitive task analysis developed over decades to extract his expertise. Floyd did not use the equipment as instructed in the manual. He was not just reacting to sound, but was detecting sound patterns, moving slower than the speed suggested in the manual, using the detector at a lower height than written in the manual, and continuously adjusting the sensitivity switch of the detector. Professor Staszewski conducted an experiment to teach this secret, which Floyd himself was not aware of, to other soldiers for 5 days and measure its effect. Surprisingly, the detection rate, which was in the 10% range before training, exceeded 90% after training.</p></blockquote><p>Using cognitive task analysis, not only programmers and managers but also anyone who wants to become an expert can benefit. The US Navy’s research found that teachers and students who learn this method and use it cooperatively increase the educational effect. Therefore, this method is used in their education.</p><h2 id="cognitive-task-analysis">Cognitive Task Analysis</h2><p>Cognitive task analysis is a method of analyzing and explaining complex cognitive processes performed by experts or skilled individuals. It is used in tasks where cognitive aspects such as problem-solving, decision-making, memory, and inference are important. This analysis method focuses on systematically understanding how experts process information and make decisions.</p><p>Cognitive task analysis is mainly used in the following situations.</p><ul><li>Development of education and training programs: By analyzing how experts perform tasks, effective training programs can be designed for beginners or trainees. For example, in fields such as medicine, aviation, and the military, cognitive task analysis is used to deliver the cognitive strategies used by experts to learners.</li><li>Technology and system design: Cognitive task analysis can be used in human-computer interaction (HCI) or human-centered design to design user interfaces or automation systems in line with the cognitive processes used by experts when designing complex systems.</li><li>Improvement of work procedures: By analyzing the cognitive strategies used by experts, work processes can be improved or optimized. This can increase efficiency and reduce errors.</li></ul><p>You can perform cognitive task analysis by following these steps.</p><ul><li>Define the process: Define the goals of the task and the cognitive processes required.</li><li>Task decomposition: Divide the task into small steps and analyze the cognitive processes required in each step.</li><li>Expert interviews and observations: Collect data on how experts actually perform tasks through interviews or observations.</li><li>Cognitive requirements analysis: Analyze how information is processed, attention strategies, memory strategies, etc.</li><li>Apply the results: Apply the analyzed results to education programs, technology design, work procedure improvements, etc.</li></ul><p>Cognitive task analysis is a tool that clarifies the unconscious and implicit cognitive processes used by experts in complex tasks, and plays an important role in learning, design, and system optimization.</p><h2 id="the-process-of-cognitive-task-analysis">The Process of Cognitive Task Analysis</h2><p>Let’s take a closer look at the process of performing cognitive task analysis.</p><h3 id="1-goal-setting">1. Goal Setting</h3><p>This is the step of clearly defining the reasons and goals for performing cognitive task analysis. Cognitive task analysis is mainly used when analyzing tasks that require complex and cognitive aspects, so it is important to clearly define what tasks to analyze and how this analysis can help in education, system design, work improvement, etc.</p><h3 id="2-task-definition-and-analysis">2. Task Definition and Analysis</h3><p>This is the step of defining and analyzing the task in detail. Here, you can follow the following procedure.</p><ul><li>Task selection: Select the task (or work) to be analyzed. Tasks that are complex and require cognitive processing are suitable.</li><li>Task decomposition: Divide the entire task into small steps. Identify the actions performed by experts at each step and confirm what cognitive processes (decision-making, memory, inference, etc.) are used.</li></ul><h3 id="3-expert-interviews-and-observations">3. Expert Interviews and Observations</h3><p>This is the step of observing or interviewing experts to see how they actually perform tasks. This allows you to better understand the implicit knowledge and cognitive processes that occur during task execution. Normally, the following methods are used.</p><ul><li>In-depth interviews: Experts are asked to explain specific work steps and decision-making processes, and their thinking strategies are identified.</li><li>Think-aloud technique: Experts are encouraged to speak out what they are thinking while performing tasks to reveal cognitive processes to the outside.</li><li>Task observation: Directly observe how experts perform tasks and record them. This allows you to clearly identify the task flow and cognitive requirements.</li></ul><h3 id="4-cognitive-requirements-analysis">4. Cognitive Requirements Analysis</h3><p>In this step, you analyze what elements are important in the cognitive processes of experts. Here, you clearly identify the information processing strategy, decision-making process, problem-solving strategies, attention strategies, etc.</p><ul><li>Information processing strategy: Analyze how experts process information.</li><li>Decision-making process: Analyze how experts make decisions and what criteria they use.</li><li>Problem-solving strategies: Analyze how experts solve unexpected problems.</li></ul><h3 id="5-task-modeling">5. Task Modeling</h3><p>Based on the data collected in the previous step, you create a model that explains the cognitive processes and behaviors of experts. In this step, you describe the task step by step and specify the cognitive requirements that occur at each step. This allows you to formalize the unconscious skills and knowledge used by experts.</p><h3 id="6-results-application">6. Results Application</h3><p>This is the step of applying the analyzed results to actual work improvement, system design, education program development, etc. Based on the analyzed cognitive processes, you can create educational materials to help beginners become more proficient faster, or use them to improve user interfaces in system design.</p><h3 id="7-verification-and-feedback">7. Verification and Feedback</h3><p>Finally, this is the step of verifying whether the results of cognitive task analysis are actually useful and receiving feedback to improve them. You can evaluate whether the analysis derived from cognitive task analysis is effectively applied to education or system improvement, and if necessary, reanalyze or supplement it.</p><h2 id="conclusion">Conclusion</h2><p>As seen above, cognitive task analysis is a useful method for clearly understanding the cognitive strategies used by experts and applying them to education, system design, work improvement, etc. In particular, cognitive task analysis can formalize the unconscious knowledge and skills of experts in complex and cognitive-demanding tasks, and use them to convey them to others.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="essay"/><summary type="html"><![CDATA[Let's see how to extract expertise from experts through cognitive task analysis.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/essay/2024/cognitibe-task-analysis/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/essay/2024/cognitibe-task-analysis/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">[Flutter] Use MultipartRequest in http package to upload files</title><link href="https://deku.posstree.com/en/flutter/http_multipartrequest/" rel="alternate" type="text/html" title="[Flutter] Use MultipartRequest in http package to upload files"/><published>2024-09-17T00:00:00+09:00</published><updated>2024-10-06T11:17:37+09:00</updated><id>https://deku.posstree.com/flutter/http-multipartrequest-en</id><content type="html" xml:base="https://deku.posstree.com/flutter/http_multipartrequest/"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#multipartrequest-to-upload-files">MultipartRequest to upload files</a></li><li><a href="#test-code">Test code</a></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>Sometimes, you need to upload files using the http package in Flutter. In this case, you can upload files using <code class="language-plaintext highlighter-rouge">MultipartRequest</code> in the http package. In this blog post, I will introduce how to upload files using <code class="language-plaintext highlighter-rouge">MultipartRequest</code> and how to test it.</p><h2 id="multipartrequest-to-upload-files">MultipartRequest to upload files</h2><p>The following is an example of uploading files using the <code class="language-plaintext highlighter-rouge">MultipartRequest</code> in the http package.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ExampleAPI</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">token</span><span class="p">;</span>
  <span class="kd">final</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span> <span class="n">httpClient</span><span class="p">;</span>

  <span class="n">ExampleAPI</span><span class="p">({</span>
    <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">token</span><span class="p">,</span>
    <span class="nd">@visibleForTesting</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="o">?</span> <span class="n">mockClient</span><span class="p">,</span>
  <span class="p">})</span> <span class="o">:</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="n">mockClient</span> <span class="o">??</span>
            <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">(</span>
              <span class="s">"POST"</span><span class="p">,</span>
              <span class="kt">Uri</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'</span><span class="si">${ENV.apiServer}</span><span class="s">/api/app'</span><span class="p">),</span>
            <span class="p">);</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="n">InfoData</span><span class="p">&gt;</span> <span class="n">sendData</span><span class="p">({</span>
    <span class="kd">required</span> <span class="n">DateTime</span> <span class="n">date</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">int</span> <span class="n">status</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">int</span> <span class="n">docType</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">note</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">passportImage</span><span class="p">,</span>
    <span class="kt">String</span><span class="o">?</span> <span class="n">certificationImage</span><span class="p">,</span>
    <span class="kt">List</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">&gt;</span><span class="o">?</span> <span class="n">receiptImages</span><span class="p">,</span>
  <span class="p">})</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="n">data</span><span class="p">[</span><span class="s">'date'</span><span class="p">]</span> <span class="o">=</span> <span class="n">dateFormatForSearch</span><span class="p">(</span><span class="n">date</span><span class="p">);</span>
    <span class="n">data</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="si">$status</span><span class="s">'</span><span class="p">;</span>
    <span class="n">data</span><span class="p">[</span><span class="s">'doc_type'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="si">$docType</span><span class="s">'</span><span class="p">;</span>
    <span class="n">data</span><span class="p">[</span><span class="s">'note'</span><span class="p">]</span> <span class="o">=</span> <span class="n">note</span><span class="p">;</span>

    <span class="kt">List</span><span class="p">&lt;</span><span class="n">MultipartFile</span><span class="p">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'passport_image'</span><span class="p">,</span> <span class="n">passportImage</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">jpnCertImg</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">jpnCertImg</span> <span class="o">!=</span> <span class="s">''</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'cert_img'</span><span class="p">,</span> <span class="n">certificationImage</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">receiptImages</span><span class="o">?.</span><span class="na">isNotEmpty</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="n">image</span> <span class="k">in</span> <span class="n">receiptImages</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">image</span> <span class="o">==</span> <span class="s">''</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
        <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'receipt_img[]'</span><span class="p">,</span> <span class="n">image</span><span class="p">));</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">httpClient</span><span class="o">.</span><span class="na">headers</span><span class="o">.</span><span class="na">addAll</span><span class="p">({</span><span class="s">'Authorization'</span><span class="o">:</span> <span class="s">'Bearer </span><span class="si">$token</span><span class="s">'</span><span class="p">});</span>
    <span class="n">httpClient</span><span class="o">.</span><span class="na">fields</span><span class="o">.</span><span class="na">addAll</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
    <span class="n">httpClient</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">addAll</span><span class="p">(</span><span class="n">files</span><span class="p">);</span>

    <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="k">await</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">send</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">Response</span><span class="o">.</span><span class="na">fromStream</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span><span class="o">.</span><span class="na">then</span><span class="p">((</span><span class="n">response</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">final</span> <span class="n">data</span> <span class="o">=</span> <span class="n">jsonDecode</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">decode</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="na">bodyBytes</span><span class="p">));</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'success'</span><span class="p">]</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">InfoData</span><span class="o">.</span><span class="na">fromJson</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'data'</span><span class="p">]);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">'Unknown response'</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div><p>Let’s take a closer look at the part of uploading files using the <code class="language-plaintext highlighter-rouge">MultipartRequest</code> in the http package.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ExampleAPI</span><span class="p">({</span>
  <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">token</span><span class="p">,</span>
  <span class="nd">@visibleForTesting</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="o">?</span> <span class="n">mockClient</span><span class="p">,</span>
<span class="p">})</span> <span class="o">:</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="n">mockClient</span> <span class="o">??</span>
          <span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">(</span>
            <span class="s">"POST"</span><span class="p">,</span>
            <span class="kt">Uri</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'</span><span class="si">${ENV.apiServer}</span><span class="s">/api/app'</span><span class="p">),</span>
          <span class="p">);</span>
</code></pre></div></div><p>To upload files using the <code class="language-plaintext highlighter-rouge">MultipartRequest</code>, you first need to create an instance of <code class="language-plaintext highlighter-rouge">http.MultipartRequest</code>.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="p">{};</span>
<span class="n">data</span><span class="p">[</span><span class="s">'date'</span><span class="p">]</span> <span class="o">=</span> <span class="n">dateFormatForSearch</span><span class="p">(</span><span class="n">date</span><span class="p">);</span>
<span class="n">data</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="si">$status</span><span class="s">'</span><span class="p">;</span>
<span class="n">data</span><span class="p">[</span><span class="s">'doc_type'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="si">$docType</span><span class="s">'</span><span class="p">;</span>
<span class="n">data</span><span class="p">[</span><span class="s">'note'</span><span class="p">]</span> <span class="o">=</span> <span class="n">note</span><span class="p">;</span>
</code></pre></div></div><p>The <code class="language-plaintext highlighter-rouge">MultipartRequest</code> can send not only files but also other information. So, I prepared other information to send together.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">List</span><span class="p">&lt;</span><span class="n">MultipartFile</span><span class="p">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="p">[];</span>
<span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'passport_image'</span><span class="p">,</span> <span class="n">passportImage</span><span class="p">));</span>
<span class="k">if</span> <span class="p">(</span><span class="n">jpnCertImg</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">jpnCertImg</span> <span class="o">!=</span> <span class="s">''</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'cert_img'</span><span class="p">,</span> <span class="n">certificationImage</span><span class="p">));</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="n">receiptImages</span><span class="o">?.</span><span class="na">isNotEmpty</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="n">image</span> <span class="k">in</span> <span class="n">receiptImages</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">image</span> <span class="o">==</span> <span class="s">''</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
    <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">MultipartFile</span><span class="o">.</span><span class="na">fromPath</span><span class="p">(</span><span class="s">'receipt_img[]'</span><span class="p">,</span> <span class="n">image</span><span class="p">));</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div><p>The function, which sets the file to upload, receives the path of the file to upload. The path of the file to upload is converted to <code class="language-plaintext highlighter-rouge">MultipartFile</code> using <code class="language-plaintext highlighter-rouge">http.MultipartFile.fromPath</code>.</p><p>When uploading multiple files, you can send them as an array by using <code class="language-plaintext highlighter-rouge">[]</code> like <code class="language-plaintext highlighter-rouge">receipt_img[]</code>.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">httpClient</span><span class="o">.</span><span class="na">headers</span><span class="o">.</span><span class="na">addAll</span><span class="p">({</span><span class="s">'Authorization'</span><span class="o">:</span> <span class="s">'Bearer </span><span class="si">$token</span><span class="s">'</span><span class="p">});</span>
<span class="n">httpClient</span><span class="o">.</span><span class="na">fields</span><span class="o">.</span><span class="na">addAll</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
<span class="n">httpClient</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">addAll</span><span class="p">(</span><span class="n">files</span><span class="p">);</span>
</code></pre></div></div><p>Now, set the <code class="language-plaintext highlighter-rouge">Bearer</code> token in the header to upload the file and add the prepared data to <code class="language-plaintext highlighter-rouge">fields</code>. And add the prepared file to <code class="language-plaintext highlighter-rouge">files</code>.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="k">await</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">send</span><span class="p">();</span>
<span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">Response</span><span class="o">.</span><span class="na">fromStream</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span><span class="o">.</span><span class="na">then</span><span class="p">((</span><span class="n">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">data</span> <span class="o">=</span> <span class="n">jsonDecode</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">decode</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="na">bodyBytes</span><span class="p">));</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'success'</span><span class="p">]</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">InfoData</span><span class="o">.</span><span class="na">fromJson</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'data'</span><span class="p">]);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">'Unknown response'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div><p>Finally, send the data and receive the response. Process the received response according to your app.</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="test-code">Test code</h2><p>Next, let’s see how to test the function that uploads files using the <code class="language-plaintext highlighter-rouge">MultipartRequest</code> in the http package.</p><p>First, the full code is as follows.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nd">@GenerateMocks</span><span class="p">([</span><span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">])</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">mockHttpMultipartRequest</span> <span class="o">=</span> <span class="n">CustomMockMultipartRequest</span><span class="p">();</span>
  <span class="n">setUp</span><span class="p">(()</span> <span class="p">{</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">headers</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">fields</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">when</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">send</span><span class="p">())</span><span class="o">.</span><span class="na">thenAnswer</span><span class="p">(</span>
      <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="kd">final</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">jsonEncode</span><span class="p">({</span>
          <span class="s">'success'</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
          <span class="s">'data'</span><span class="o">:</span> <span class="p">{</span>
            <span class="s">'amount'</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
            <span class="s">'commission'</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
          <span class="p">}</span>
        <span class="p">});</span>
        <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">value</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">encode</span><span class="p">(</span><span class="n">responseBody</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">StreamedResponse</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>
  <span class="p">});</span>

  <span class="n">test</span><span class="p">(</span><span class="s">'Success'</span><span class="p">,</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">TaxRefundAPI</span><span class="p">(</span>
      <span class="nl">token:</span> <span class="s">'test_token'</span><span class="p">,</span>
      <span class="nl">client:</span> <span class="n">mockHttpMultipartRequest</span><span class="p">,</span>
    <span class="p">)</span><span class="o">.</span><span class="na">sendData</span><span class="p">(</span>
      <span class="nl">permitDate:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'2022-01-01 01:04'</span><span class="p">),</span>
      <span class="nl">status:</span> <span class="mi">91</span><span class="p">,</span>
      <span class="nl">docType:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="nl">note:</span> <span class="s">''</span><span class="p">,</span>
      <span class="nl">passportImg:</span> <span class="s">'assets/images/passport_sample.jpg'</span><span class="p">,</span>
      <span class="nl">certificationImage:</span> <span class="s">'assets/images/placeholder.png'</span><span class="p">,</span>
      <span class="nl">receiptImages:</span> <span class="p">[</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
      <span class="p">],</span>
    <span class="p">);</span>

    <span class="c1">// Request parameters</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">headers</span><span class="p">,</span>
      <span class="p">{</span><span class="s">'Authorization'</span><span class="o">:</span> <span class="s">'Bearer test_token'</span><span class="p">},</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">fields</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="s">'date'</span><span class="o">:</span> <span class="s">'2022-01-01'</span><span class="p">,</span>
        <span class="s">'status'</span><span class="o">:</span> <span class="s">'91'</span><span class="p">,</span>
        <span class="s">'doc_type'</span><span class="o">:</span> <span class="s">'2'</span><span class="p">,</span>
        <span class="s">'note'</span><span class="o">:</span> <span class="s">''</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">length</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'passport_image'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span> <span class="s">'passport_sample.jpg'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'cert_img'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span> <span class="s">'placeholder.png'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>

    <span class="c1">// Response</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">isA</span><span class="p">&lt;</span><span class="n">InfoData</span><span class="p">&gt;());</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="na">toMap</span><span class="p">(),</span> <span class="p">{</span>
      <span class="s">'amount'</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
      <span class="s">'commission'</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
    <span class="p">});</span>
  <span class="p">});</span>

  <span class="n">test</span><span class="p">(</span><span class="s">'Throw error when response is failed'</span><span class="p">,</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">when</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">send</span><span class="p">())</span><span class="o">.</span><span class="na">thenAnswer</span><span class="p">(</span>
      <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="kd">final</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">jsonEncode</span><span class="p">({</span>
          <span class="s">'success'</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="p">});</span>
        <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">value</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">encode</span><span class="p">(</span><span class="n">responseBody</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">StreamedResponse</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>

    <span class="k">try</span> <span class="p">{</span>
      <span class="k">await</span> <span class="n">TaxRefundAPI</span><span class="p">(</span>
        <span class="nl">token:</span> <span class="s">'test_token'</span><span class="p">,</span>
        <span class="nl">client:</span> <span class="n">mockHttpMultipartRequest</span><span class="p">,</span>
      <span class="p">)</span><span class="o">.</span><span class="na">sendData</span><span class="p">(</span>
        <span class="nl">permitDate:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'2022-01-01 01:04'</span><span class="p">),</span>
        <span class="nl">status:</span> <span class="mi">91</span><span class="p">,</span>
        <span class="nl">docType:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nl">note:</span> <span class="s">''</span><span class="p">,</span>
        <span class="nl">passportImg:</span> <span class="s">'assets/images/passport_sample.jpg'</span><span class="p">,</span>
        <span class="nl">certificationImage:</span> <span class="s">'assets/images/placeholder.png'</span><span class="p">,</span>
        <span class="nl">receiptImages:</span> <span class="p">[</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="p">],</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="p">(),</span> <span class="s">'Exception: Unknown response'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">CustomMockMultipartRequest</span> <span class="kd">extends</span> <span class="n">MockMultipartRequest</span> <span class="p">{</span>
  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">List</span><span class="p">&lt;</span><span class="n">MultipartFile</span><span class="p">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="p">[];</span>
<span class="p">}</span>
</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><p>Let’s take a closer look at the test code.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nd">@GenerateMocks</span><span class="p">([</span><span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">])</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">mockHttpMultipartRequest</span> <span class="o">=</span> <span class="n">CustomMockMultipartRequest</span><span class="p">();</span>
  <span class="n">setUp</span><span class="p">(()</span> <span class="p">{</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">headers</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">fields</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">clear</span><span class="p">();</span>
    <span class="n">when</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">send</span><span class="p">())</span><span class="o">.</span><span class="na">thenAnswer</span><span class="p">(</span>
      <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="kd">final</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">jsonEncode</span><span class="p">({</span>
          <span class="s">'success'</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
          <span class="s">'data'</span><span class="o">:</span> <span class="p">{</span>
            <span class="s">'amount'</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
            <span class="s">'commission'</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
          <span class="p">}</span>
        <span class="p">});</span>
        <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">value</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">encode</span><span class="p">(</span><span class="n">responseBody</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">StreamedResponse</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>
  <span class="p">});</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">CustomMockMultipartRequest</span> <span class="kd">extends</span> <span class="n">MockMultipartRequest</span> <span class="p">{</span>
  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nd">@override</span>
  <span class="kd">final</span> <span class="kt">List</span><span class="p">&lt;</span><span class="n">MultipartFile</span><span class="p">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="p">[];</span>
<span class="p">}</span>
</code></pre></div></div><p>I used <code class="language-plaintext highlighter-rouge">DI(Dependency Injec)</code>, so I created a <code class="language-plaintext highlighter-rouge">Mock</code> object for testing and initialized the <code class="language-plaintext highlighter-rouge">Mock</code> object using the <code class="language-plaintext highlighter-rouge">setUp</code> function.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nd">@GenerateMocks</span><span class="p">([</span><span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">])</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">mockHttpMultipartRequest</span> <span class="o">=</span> <span class="n">CustomMockMultipartRequest</span><span class="p">();</span>
  <span class="p">...</span>
  <span class="n">test</span><span class="p">(</span><span class="s">'Success'</span><span class="p">,</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">TaxRefundAPI</span><span class="p">(</span>
      <span class="nl">token:</span> <span class="s">'test_token'</span><span class="p">,</span>
      <span class="nl">client:</span> <span class="n">mockHttpMultipartRequest</span><span class="p">,</span>
    <span class="p">)</span><span class="o">.</span><span class="na">sendData</span><span class="p">(</span>
      <span class="nl">permitDate:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'2022-01-01 01:04'</span><span class="p">),</span>
      <span class="nl">status:</span> <span class="mi">91</span><span class="p">,</span>
      <span class="nl">docType:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="nl">note:</span> <span class="s">''</span><span class="p">,</span>
      <span class="nl">passportImg:</span> <span class="s">'assets/images/passport_sample.jpg'</span><span class="p">,</span>
      <span class="nl">certificationImage:</span> <span class="s">'assets/images/placeholder.png'</span><span class="p">,</span>
      <span class="nl">receiptImages:</span> <span class="p">[</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
      <span class="p">],</span>
    <span class="p">);</span>

    <span class="c1">// Request parameters</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">headers</span><span class="p">,</span>
      <span class="p">{</span><span class="s">'Authorization'</span><span class="o">:</span> <span class="s">'Bearer test_token'</span><span class="p">},</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">fields</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="s">'date'</span><span class="o">:</span> <span class="s">'2022-01-01'</span><span class="p">,</span>
        <span class="s">'status'</span><span class="o">:</span> <span class="s">'91'</span><span class="p">,</span>
        <span class="s">'doc_type'</span><span class="o">:</span> <span class="s">'2'</span><span class="p">,</span>
        <span class="s">'note'</span><span class="o">:</span> <span class="s">''</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="o">.</span><span class="na">length</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'passport_image'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span> <span class="s">'passport_sample.jpg'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'cert_img'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span> <span class="s">'placeholder.png'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="na">field</span><span class="p">,</span> <span class="s">'receipt_img[]'</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(</span>
      <span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">files</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="na">filename</span><span class="p">,</span>
      <span class="s">'sample_receipt.png'</span><span class="p">,</span>
    <span class="p">);</span>

    <span class="c1">// Response</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">isA</span><span class="p">&lt;</span><span class="n">InfoData</span><span class="p">&gt;());</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="na">toMap</span><span class="p">(),</span> <span class="p">{</span>
      <span class="s">'amount'</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
      <span class="s">'commission'</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
    <span class="p">});</span>
  <span class="p">});</span>
  <span class="p">...</span>
<span class="p">}</span>
<span class="p">...</span>
</code></pre></div></div><p>By using the <code class="language-plaintext highlighter-rouge">Mock</code> object created earlier, I tested the case where the request was successfully processed.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nd">@GenerateMocks</span><span class="p">([</span><span class="n">http</span><span class="o">.</span><span class="na">MultipartRequest</span><span class="p">])</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">mockHttpMultipartRequest</span> <span class="o">=</span> <span class="n">CustomMockMultipartRequest</span><span class="p">();</span>
  <span class="p">...</span>
  <span class="n">test</span><span class="p">(</span><span class="s">'Throw error when response is failed'</span><span class="p">,</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">when</span><span class="p">(</span><span class="n">mockHttpMultipartRequest</span><span class="o">.</span><span class="na">send</span><span class="p">())</span><span class="o">.</span><span class="na">thenAnswer</span><span class="p">(</span>
      <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="kd">final</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">jsonEncode</span><span class="p">({</span>
          <span class="s">'success'</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="p">});</span>
        <span class="kd">final</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">value</span><span class="p">(</span><span class="n">utf8</span><span class="o">.</span><span class="na">encode</span><span class="p">(</span><span class="n">responseBody</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">StreamedResponse</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="p">);</span>

    <span class="k">try</span> <span class="p">{</span>
      <span class="k">await</span> <span class="n">TaxRefundAPI</span><span class="p">(</span>
        <span class="nl">token:</span> <span class="s">'test_token'</span><span class="p">,</span>
        <span class="nl">client:</span> <span class="n">mockHttpMultipartRequest</span><span class="p">,</span>
      <span class="p">)</span><span class="o">.</span><span class="na">sendData</span><span class="p">(</span>
        <span class="nl">permitDate:</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'2022-01-01 01:04'</span><span class="p">),</span>
        <span class="nl">status:</span> <span class="mi">91</span><span class="p">,</span>
        <span class="nl">docType:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="nl">note:</span> <span class="s">''</span><span class="p">,</span>
        <span class="nl">passportImg:</span> <span class="s">'assets/images/passport_sample.jpg'</span><span class="p">,</span>
        <span class="nl">certificationImage:</span> <span class="s">'assets/images/placeholder.png'</span><span class="p">,</span>
        <span class="nl">receiptImages:</span> <span class="p">[</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
          <span class="s">'assets/images/sample_receipt.png'</span><span class="p">,</span>
        <span class="p">],</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="p">(),</span> <span class="s">'Exception: Unknown response'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>
<span class="p">...</span>
</code></pre></div></div><p>Lastly, I tested the case where the response failed.</p><h2 id="completed">Completed</h2><p>Done! We’ve seen how to upload files using <code class="language-plaintext highlighter-rouge">MultipartRequest</code> in the http package in Flutter and how to test it.</p><p>If you are implementing a file upload feature in Flutter, refer to this blog post and try implementing it and writing test code.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="flutter"/><summary type="html"><![CDATA[Let's see how to upload files using MultipartRequest in the http package in Flutter and how to test it.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/flutter/background.png"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/flutter/background.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">[GitHub Actions] How to execute GitHub Actions manually</title><link href="https://deku.posstree.com/en/github_actions/execute-github-actions-manually/" rel="alternate" type="text/html" title="[GitHub Actions] How to execute GitHub Actions manually"/><published>2024-09-13T00:00:00+09:00</published><updated>2024-09-16T16:56:41+09:00</updated><id>https://deku.posstree.com/github_actions/execute-github-actions-manually-en</id><content type="html" xml:base="https://deku.posstree.com/github_actions/execute-github-actions-manually/"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#workflow_dispatch">workflow_dispatch</a></li><li><a href="#inputs-type">inputs type</a></li><li><a href="#example">Example</a><ul><li><a href="#boolean">boolean</a></li><li><a href="#choice">choice</a></li><li><a href="#number">number</a></li><li><a href="#string">string</a></li><li><a href="#environment">environment</a></li></ul></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>When using GitHub Actions, sometimes you need to run GitHub Actions manually. In this blog post, I’ll introduce how to run GitHub Actions manually.</p><h2 id="workflow_dispatch">workflow_dispatch</h2><p>To run GitHub Actions manually, you need to use <code class="language-plaintext highlighter-rouge">workflow_dispatch</code>.</p><ul><li>Official document: <a href="https://docs.github.com/ko/actions/writing-workflows/workflow-syntax-for-github-actions#onworkflow_dispatch" rel="nofollow noreferrer" target="_blank">https://docs.github.com/ko/actions/writing-workflows/workflow-syntax-for-github-actions#onworkflow_dispatch</a></li></ul><p>At this time, you can pass parameters through <code class="language-plaintext highlighter-rouge">inputs</code> of <code class="language-plaintext highlighter-rouge">workflow_dispatch</code>.</p><p>You can set <code class="language-plaintext highlighter-rouge">workflow_dispatch</code> as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
</code></pre></div></div><h2 id="inputs-type">inputs type</h2><p>You can use the following types in <code class="language-plaintext highlighter-rouge">inputs</code> of <code class="language-plaintext highlighter-rouge">workflow_dispatch</code>.</p><ul><li><code class="language-plaintext highlighter-rouge">boolean</code>: true or false</li><li><code class="language-plaintext highlighter-rouge">choice</code>: SelectBox that can select one of the predefined options</li><li><code class="language-plaintext highlighter-rouge">number</code>: number</li><li><code class="language-plaintext highlighter-rouge">string</code>: string</li><li><code class="language-plaintext highlighter-rouge">environment</code>: Use environment variables set in GitHub</li></ul><p>You can check the <code class="language-plaintext highlighter-rouge">inputs</code> type that can be used in the official document.</p><ul><li>Official document: <a href="https://docs.github.com/ko/actions/writing-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputsinput_idtype" rel="nofollow noreferrer" target="_blank">https://docs.github.com/ko/actions/writing-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputsinput_idtype</a></li></ul><p>Yon can set <code class="language-plaintext highlighter-rouge">inputs</code> of <code class="language-plaintext highlighter-rouge">workflow_dispatch</code> as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_boolean</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">boolean</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="no">false</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">boolean</span>
</code></pre></div></div><p>You can set the <code class="language-plaintext highlighter-rouge">description</code>, <code class="language-plaintext highlighter-rouge">required</code>, <code class="language-plaintext highlighter-rouge">default</code> in addition to the <code class="language-plaintext highlighter-rouge">type</code> in <code class="language-plaintext highlighter-rouge">inputs</code> of <code class="language-plaintext highlighter-rouge">workflow_dispatch</code>. Except for <code class="language-plaintext highlighter-rouge">type</code>, all are optional.</p><h2 id="example">Example</h2><p>Then, let’s see an example about how to run GitHub Actions manually using <code class="language-plaintext highlighter-rouge">workflow_dispatch</code>.</p><h3 id="boolean">boolean</h3><p>To create GitHub Actions that run manually, create a <code class="language-plaintext highlighter-rouge">.github/workflows/manual_test.yml</code> file and modify it as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_boolean</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">boolean</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="no">false</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">boolean</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy-to-staging</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print the input</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>
</code></pre></div></div><p>After committing and pushing the file you wrote like this, you can see the following screen when you go to the <code class="language-plaintext highlighter-rouge">Actions</code> tab of <code class="language-plaintext highlighter-rouge">GitHub</code>.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input.png" alt="Execute GitHub Actions manually - Boolean input"/></picture><p>When you click the <code class="language-plaintext highlighter-rouge">Run workflow</code> displayed on the right side, you can see the <code class="language-plaintext highlighter-rouge">inputs</code> of the <code class="language-plaintext highlighter-rouge">boolean</code> type we’ve set. If you run this, you can get the following result.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input_result.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input_result.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/boolean_input_result.png" alt="Execute GitHub Actions manually - Boolean input result"/></picture><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h3 id="choice">choice</h3><p>To create GitHub Actions that run manually, create a <code class="language-plaintext highlighter-rouge">.github/workflows/manual_test.yml</code> file and modify it as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_choice</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">choice</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="s1">'</span><span class="s">warning'</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">choice</span>
        <span class="na">options</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s">info</span>
          <span class="pi">-</span> <span class="s">warning</span>
          <span class="pi">-</span> <span class="s">debug</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy-to-staging</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print the input</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>
</code></pre></div></div><p>After committing and pushing the file you wrote like this, you can see the following screen when you go to the <code class="language-plaintext highlighter-rouge">Actions</code> tab of <code class="language-plaintext highlighter-rouge">GitHub</code>.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/choice_input.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/choice_input.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/choice_input.png" alt="Execute GitHub Actions manually - Choice input"/></picture><p>When you click the <code class="language-plaintext highlighter-rouge">Run workflow</code> displayed on the right side, you can see the <code class="language-plaintext highlighter-rouge">inputs</code> of the <code class="language-plaintext highlighter-rouge">choice</code> type we’ve set. If you run this, you can get the following result.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/choice_input_result.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/choice_input_result.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/choice_input_result.png" alt="Execute GitHub Actions manually - Choice input result"/></picture><h3 id="number">number</h3><p>To create GitHub Actions that run manually, create a <code class="language-plaintext highlighter-rouge">.github/workflows/manual_test.yml</code> file and modify it as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_number</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">number</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="m">20</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">number</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy-to-staging</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print the input</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>
</code></pre></div></div><p>After committing and pushing the file you wrote like this, you can see the following screen when you go to the <code class="language-plaintext highlighter-rouge">Actions</code> tab of <code class="language-plaintext highlighter-rouge">GitHub</code>.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/number_input.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/number_input.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/number_input.png" alt="Execute GitHub Actions manually - Number input"/></picture><p>When you click the <code class="language-plaintext highlighter-rouge">Run workflow</code> displayed on the right side, you can see the <code class="language-plaintext highlighter-rouge">inputs</code> of the <code class="language-plaintext highlighter-rouge">number</code> type we’ve set. If you run this, you can get the following result.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/number_input_result.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/number_input_result.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/number_input_result.png" alt="Execute GitHub Actions manually - Number input result"/></picture><h3 id="string">string</h3><p>To create GitHub Actions that run manually, create a <code class="language-plaintext highlighter-rouge">.github/workflows/manual_test.yml</code> file and modify it as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_string</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">string</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Hello,</span><span class="nv"> </span><span class="s">World!'</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy-to-staging</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print the input</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>
</code></pre></div></div><p>After committing and pushing the file you wrote like this, you can see the following screen when you go to the <code class="language-plaintext highlighter-rouge">Actions</code> tab of <code class="language-plaintext highlighter-rouge">GitHub</code>.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/string_input.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/string_input.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/string_input.png" alt="Execute GitHub Actions manually - String input"/></picture><p>When you click the <code class="language-plaintext highlighter-rouge">Run workflow</code> displayed on the right side, you can see the <code class="language-plaintext highlighter-rouge">inputs</code> of the <code class="language-plaintext highlighter-rouge">string</code> type we’ve set. If you run this, you can get the following result.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/string_input_result.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/string_input_result.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/string_input_result.png" alt="Execute GitHub Actions manually - String input result"/></picture><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h3 id="environment">environment</h3><p>To use the <code class="language-plaintext highlighter-rouge">environment</code> type in <code class="language-plaintext highlighter-rouge">workflow_dispatch</code>, you need to set <code class="language-plaintext highlighter-rouge">Environment</code> in <code class="language-plaintext highlighter-rouge">GitHub</code>’s <code class="language-plaintext highlighter-rouge">Settings</code>.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environments.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environments.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/environments.png" alt="Execute GitHub Actions manually - Environments"/></picture><p>Click <code class="language-plaintext highlighter-rouge">New environment</code> and enter <code class="language-plaintext highlighter-rouge">dev</code> in the <code class="language-plaintext highlighter-rouge">Name</code> as follows, and click <code class="language-plaintext highlighter-rouge">Configure environment</code>.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment.png" alt="Execute GitHub Actions manually - New Dev Environment"/></picture><p>Then click the <code class="language-plaintext highlighter-rouge">Add environment variable</code> button in <code class="language-plaintext highlighter-rouge">Environment variables</code> and add the <code class="language-plaintext highlighter-rouge">Variable</code> as follows.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment_variable.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment_variable.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/dev_environment_variable.png" alt="Execute GitHub Actions manually - Dev environment variable"/></picture><p>In the same way, add the same variable to the <code class="language-plaintext highlighter-rouge">prod</code> environment.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/prod_environment_variable.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/prod_environment_variable.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/prod_environment_variable.png" alt="Execute GitHub Actions manually - Prod environment variable"/></picture><p>Now, create a <code class="language-plaintext highlighter-rouge">.github/workflows/manual_test.yml</code> file to run GitHub Actions manually and modify it as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">GITHUB ACTIONS NAME</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">input_environment</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">environment</span><span class="nv"> </span><span class="s">input'</span>
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">environment</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy-to-staging</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">environment</span><span class="pi">:</span> <span class="s">$</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print the input</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>
</code></pre></div></div><p>After committing and pushing the file you wrote like this, you can see the following screen when you go to the <code class="language-plaintext highlighter-rouge">Actions</code> tab of <code class="language-plaintext highlighter-rouge">GitHub</code>.</p><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/environment_input.png" alt="Execute GitHub Actions manually - Environment input"/></picture><p>When you click the <code class="language-plaintext highlighter-rouge">Run workflow</code> displayed on the right side, you can see the <code class="language-plaintext highlighter-rouge">Environment</code> that we’ve set in <code class="language-plaintext highlighter-rouge">GitHub</code>’s <code class="language-plaintext highlighter-rouge">Settings</code>. If you run this, you can get the following result.</p><ul><li>dev environment</li></ul><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_dev.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_dev.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_dev.png" alt="Execute GitHub Actions manually - Environment input result dev"/></picture><ul><li>prod environment</li></ul><picture><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_prod.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_prod.webp" type="image/webp"/><img src="/assets/images/category/github_actions/execute-github-actions-manually/environment_input_result_prod.png" alt="Execute GitHub Actions manually - Environment input result prod"/></picture><h2 id="completed">Completed</h2><p>Done! We’ve seen how to run GitHub Actions manually. We also learned about the <code class="language-plaintext highlighter-rouge">inputs</code> type that can be set.</p><p>If you need to run GitHub Actions manually, try using <code class="language-plaintext highlighter-rouge">workflow_dispatch</code> and various types of <code class="language-plaintext highlighter-rouge">inputs</code> to run GitHub Actions manually.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[Let's see how to execute GitHub Actions manually.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">[GitHub Actions] How to check PR title with GitHub Actions in monorepo environment</title><link href="https://deku.posstree.com/en/github_actions/action-check-pr-title/" rel="alternate" type="text/html" title="[GitHub Actions] How to check PR title with GitHub Actions in monorepo environment"/><published>2024-09-10T00:00:00+09:00</published><updated>2024-09-12T09:15:14+09:00</updated><id>https://deku.posstree.com/github_actions/action-check-pr-title-en</id><content type="html" xml:base="https://deku.posstree.com/github_actions/action-check-pr-title/"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#action-check-pr-title">action-check-pr-title</a></li><li><a href="#create-github-actions">Create GitHub Actions</a></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>I am automating GitHub’s Release Note using <code class="language-plaintext highlighter-rouge">Release Drafter</code>.</p><ul><li><a href="https://deku.posstree.com/en/share/github-actions/release-drafter/" target="\_blank">[GitHub Actions] Automate Release notes</a></li></ul><p>This <code class="language-plaintext highlighter-rouge">Release Drafter</code> is based on the Label of GitHub’s PR. <code class="language-plaintext highlighter-rouge">Release Drafter</code> provides a feature to automatically create Labels, and it uses the title of the PR. So, the PR title is important.</p><p>Previously, when checking the title of a PR, I used <a href="https://github.com/aslafy-z/conventional-pr-title-action/tree/v3/" rel="nofollow noreferrer" target="\_blank">Conventional PR Title Action</a>.</p><ul><li><a href="https://deku.posstree.com/en/share/github-actions/pr-title-checker/" target="\_blank">[GitHub Actions] Check Pull request title</a></li></ul><p>However, in the current monorepo project, the <code class="language-plaintext highlighter-rouge">Conventional PR Title Action</code> was not enough, so I ended up using other GitHub Actions.</p><ul><li><a href="https://deku.posstree.com/en/environment/repository_strategy/" target="\_blank">[Project Management] Repository Strategy</a></li></ul><p>In this blog post, I will introduce how to check the title of a PR when creating a PR using <code class="language-plaintext highlighter-rouge">action-check-pr-title</code>.</p><h2 id="action-check-pr-title">action-check-pr-title</h2><p><code class="language-plaintext highlighter-rouge">action-check-pr-title</code> is a GitHub Actions that checks the title of a PR using regular expressions.</p><ul><li><a href="https://github.com/Slashgear/action-check-pr-title" rel="nofollow noreferrer" target="\_blank">action-check-pr-title</a></li></ul><h2 id="create-github-actions">Create GitHub Actions</h2><p>To create GitHub Actions that check the title of a PR using <code class="language-plaintext highlighter-rouge">action-check-pr-title</code>, create a <code class="language-plaintext highlighter-rouge">.github/workflows/check_pr_title.yml</code> file and modify it as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Check PR Title</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">opened</span>
      <span class="pi">-</span> <span class="s">reopened</span>
      <span class="pi">-</span> <span class="s">edited</span>
      <span class="pi">-</span> <span class="s">synchronize</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">check-pr-title</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout Repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Check PR Title</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">Slashgear/action-check-pr-title@v4.3.0</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">regexp</span><span class="pi">:</span> <span class="s1">'</span><span class="s">(feat|fix|chore|docs|style|refactor|test|build|ci)\((SERVICE1|SERVICE2|template|components|config|common)\):</span><span class="nv"> </span><span class="s">.+'</span>
          <span class="na">helpMessage</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Example:</span><span class="nv"> </span><span class="s">'feat(SERVICE1):</span><span class="nv"> </span><span class="s">example</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">title'"</span>
</code></pre></div></div><p>Let’s take a closer look at the part that checks the title of the PR.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Check PR Title</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">Slashgear/action-check-pr-title@v4.3.0</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">regexp</span><span class="pi">:</span> <span class="s1">'</span><span class="s">(feat|fix|chore|docs|style|refactor|test|build|ci)\((SERVICE1|SERVICE2|template|components|config|common)\):</span><span class="nv"> </span><span class="s">.+'</span>
          <span class="na">helpMessage</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Example:</span><span class="nv"> </span><span class="s">'feat(SERVICE1):</span><span class="nv"> </span><span class="s">example</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">title'"</span>
</code></pre></div></div><p>Here, we use the <code class="language-plaintext highlighter-rouge">regexp</code> option provided by <code class="language-plaintext highlighter-rouge">action-check-pr-title</code> to check the title of the <code class="language-plaintext highlighter-rouge">PR</code>. The regular expression used here allows the following PR titles.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>feat<span class="o">(</span>SERVICE1<span class="o">)</span>: Add new feature
fix<span class="o">(</span>SERVICE2<span class="o">)</span>: Fix bug
refactor<span class="o">(</span>common<span class="o">)</span>: Refactor code
...
</code></pre></div></div><p>I developed a monorepo projet, so I set the service name in the <code class="language-plaintext highlighter-rouge">Scope</code> area of <code class="language-plaintext highlighter-rouge">Conventional Commits</code> and set it to check.</p><ul><li><a href="https://www.conventionalcommits.org/en/v1.0.0/" rel="nofollow noreferrer" target="\_blank">Conventional Commits</a></li></ul><h2 id="completed">Completed</h2><p>Done! We’ve seen how to check the title of a PR using <code class="language-plaintext highlighter-rouge">action-check-pr-title</code> when creating a PR. Previously, I used <a href="https://github.com/aslafy-z/conventional-pr-title-action/tree/v3/" rel="nofollow noreferrer" target="\_blank">Conventional PR Title Action</a> and it also supports regular expression checks, but the settings are not easy, so I decided to use <code class="language-plaintext highlighter-rouge">action-check-pr-title</code>.</p><p>So, if you want to check the PR title with regular expressions simply, try using <code class="language-plaintext highlighter-rouge">action-check-pr-title</code>.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[In a monorepo environment, let's see how to check the title of a PR (Pull Request) using GitHub Actions.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">[GitHub Actions] How to check branch name with GitHub Actions</title><link href="https://deku.posstree.com/en/github_actions/check-branch-name" rel="alternate" type="text/html" title="[GitHub Actions] How to check branch name with GitHub Actions"/><published>2024-09-02T00:00:00+09:00</published><updated>2024-09-09T09:52:51+09:00</updated><id>https://deku.posstree.com/github_actions/check-branch-name-en</id><content type="html" xml:base="https://deku.posstree.com/github_actions/check-branch-name"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#github-actions">GitHub Actions</a></li><li><a href="#change-branch-name">Change Branch Name</a></li><li><a href="#git-hooks">Git hooks</a><ul><li><a href="#create-script-to-check-branch-name">Create script to check branch name</a></li><li><a href="#configure-husky">Configure Husky</a></li><li><a href="#configure-lefthook">Configure Lefthook</a></li></ul></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>When developing a project using Git, you will use a branch strategy as shown in the following link.</p><ul><li><a href="https://deku.posstree.com/en/environment/branch-strategy/" target="\_blank">Branch Strategy for Software Development</a></li></ul><p>At this time, sometimes you need to manage whether you are creating branches according to the branch strategy.</p><p>In this blog post, I will learn how to check the branch name when creating a PR using GitHub Actions.</p><h2 id="github-actions">GitHub Actions</h2><p>To create GitHub Actions that check the branch name, create the <code class="language-plaintext highlighter-rouge">.github/workflows/check-branch-name.yml</code> file and modify it as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Check Branch Name</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">check-branch-name</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout Repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Extract branch and service name</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">extract_branch_and_service_name</span>
        <span class="na">run </span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">FULL_BRANCH_NAME=$</span>

          <span class="s">BRANCH_NAME=""</span>
          <span class="s">SERVICE_NAME=""</span>

          <span class="s">if [[ $FULL_BRANCH_NAME == "main" || $FULL_BRANCH_NAME == "develop" ]]; then</span>
            <span class="s">BRANCH_NAME="$FULL_BRANCH_NAME"</span>
            <span class="s">SERVICE_NAME="$FULL_BRANCH_NAME"</span>
          <span class="s">else</span>
            <span class="s"># Split the branch name by "/"</span>
            <span class="s">IFS='/' read -ra BRANCH_PARTS &lt;&lt;&lt; "$FULL_BRANCH_NAME"</span>

            <span class="s"># Check if the length of the array is greater than 1</span>
            <span class="s">if [ "${#BRANCH_PARTS[@]}" -gt 1 ]; then</span>
              <span class="s"># Assign the second part as the service name</span>
              <span class="s">BRANCH_NAME=${BRANCH_PARTS[0]}</span>
              <span class="s">SERVICE_NAME=${BRANCH_PARTS[1]}</span>
            <span class="s">else</span>
              <span class="s"># If the length is 1, raise an error</span>
              <span class="s">echo "[Error] Branch name does not contain a valid service name."</span>
              <span class="s">echo "Please check the branch name and try again."</span>
              <span class="s">echo "You can change the branch name by running the following command:"</span>
              <span class="s">echo "git branch -m &lt;new-branch-name&gt;"</span>
              <span class="s">exit 1</span>
            <span class="s">fi</span>
          <span class="s">fi</span>

          <span class="s">echo "BRANCH_NAME=$BRANCH_NAME" &gt;&gt; $GITHUB_ENV</span>
          <span class="s">echo "SERVICE_NAME=$SERVICE_NAME" &gt;&gt; $GITHUB_ENV</span>
          <span class="s">echo "FULL_BRANCH_NAME=$FULL_BRANCH_NAME" &gt;&gt; $GITHUB_ENV</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Check Branch Name</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">BRANCH_NAMES=("dependabot" "hotfix" "release" "review" "feature" "fix" "sub-feature")</span>
          <span class="s">SERVICE_NAMES=("npm_and_yarn" "github_actions" "SERVICE_1" "SERVICE_2" "template" "components" "config" "common")</span>

          <span class="s">if [[ $BRANCH_NAME == "main" || $BRANCH_NAME == "develop" ]]; then</span>
            <span class="s">echo "Branch name is valid."</span>
          <span class="s">elif printf '%s\n' "${BRANCH_NAMES[@]}" | grep -qx "${BRANCH_NAME}" &amp;&amp; printf '%s\n' "${SERVICE_NAMES[@]}" | grep -qx "${SERVICE_NAME}"; then</span>
            <span class="s">echo "Branch name is valid."</span>
          <span class="s">else</span>
            <span class="s">echo "[Error] Branch name must contain valid branch names and service names."</span>
            <span class="s">echo "- Current branch: $BRANCH_NAME"</span>
            <span class="s">echo "- Branch names: main develop ${BRANCH_NAMES[@]}"</span>
            <span class="s">echo "- Service names: ${SERVICE_NAMES[@]}"</span>
            <span class="s">exit 1</span>
          <span class="s">fi</span>
</code></pre></div></div><p>Let’s take a closer look at this GitHub Actions.</p><p>In my case, I manage the project with a monorepo.</p><ul><li><a href="https://deku.posstree.com/en/environment/repository_strategy/" target="\_blank">[Project Management] Repository Strategy</a></li></ul><p>So I use the following branch names.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>feature/:SERVICE_NAME/:BRANCH_NAME
release/:SERVICE_NAME/:BRANCH_NAME
fix/:SERVICE_NAME/:BRANCH_NAME
...
</code></pre></div></div><p>I need to check whether the branch name is started with <code class="language-plaintext highlighter-rouge">dependabot</code>, <code class="language-plaintext highlighter-rouge">hotfix</code>, <code class="language-plaintext highlighter-rouge">release</code>, <code class="language-plaintext highlighter-rouge">review</code>, <code class="language-plaintext highlighter-rouge">feature</code>, <code class="language-plaintext highlighter-rouge">fix</code>, <code class="language-plaintext highlighter-rouge">sub-feature</code>, etc., and I need to extract the <code class="language-plaintext highlighter-rouge">SERVICE_NAME</code> and check if it is using the predefined name.</p><p>So I extracted the service name and branch name in advance and stored them in environment variables as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Extract branch and service name</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">extract_branch_and_service_name</span>
        <span class="na">run </span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">FULL_BRANCH_NAME=$</span>

          <span class="s">BRANCH_NAME=""</span>
          <span class="s">SERVICE_NAME=""</span>

          <span class="s">if [[ $FULL_BRANCH_NAME == "main" || $FULL_BRANCH_NAME == "develop" ]]; then</span>
            <span class="s">BRANCH_NAME="$FULL_BRANCH_NAME"</span>
            <span class="s">SERVICE_NAME="$FULL_BRANCH_NAME"</span>
          <span class="s">else</span>
            <span class="s"># Split the branch name by "/"</span>
            <span class="s">IFS='/' read -ra BRANCH_PARTS &lt;&lt;&lt; "$FULL_BRANCH_NAME"</span>

            <span class="s"># Check if the length of the array is greater than 1</span>
            <span class="s">if [ "${#BRANCH_PARTS[@]}" -gt 1 ]; then</span>
              <span class="s"># Assign the second part as the service name</span>
              <span class="s">BRANCH_NAME=${BRANCH_PARTS[0]}</span>
              <span class="s">SERVICE_NAME=${BRANCH_PARTS[1]}</span>
            <span class="s">else</span>
              <span class="s"># If the length is 1, raise an error</span>
              <span class="s">echo "[Error] Branch name does not contain a valid service name."</span>
              <span class="s">echo "Please check the branch name and try again."</span>
              <span class="s">echo "You can change the branch name by running the following command:"</span>
              <span class="s">echo "git branch -m &lt;new-branch-name&gt;"</span>
              <span class="s">exit 1</span>
            <span class="s">fi</span>
          <span class="s">fi</span>

          <span class="s">echo "BRANCH_NAME=$BRANCH_NAME" &gt;&gt; $GITHUB_ENV</span>
          <span class="s">echo "SERVICE_NAME=$SERVICE_NAME" &gt;&gt; $GITHUB_ENV</span>
          <span class="s">echo "FULL_BRANCH_NAME=$FULL_BRANCH_NAME" &gt;&gt; $GITHUB_ENV</span>
<span class="s">...</span>
</code></pre></div></div><p>The branch name and service name that I extracted in advance are compared with the predefined values to check if the branch name and service name are valid.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Check Branch Name</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">BRANCH_NAMES=("dependabot" "hotfix" "release" "review" "feature" "fix" "sub-feature")</span>
          <span class="s">SERVICE_NAMES=("npm_and_yarn" "github_actions" "SERVICE_1" "SERVICE_2" "template" "components" "config" "common")</span>

          <span class="s">if [[ $BRANCH_NAME == "main" || $BRANCH_NAME == "develop" ]]; then</span>
            <span class="s">echo "Branch name is valid."</span>
          <span class="s">elif printf '%s\n' "${BRANCH_NAMES[@]}" | grep -qx "${BRANCH_NAME}" &amp;&amp; printf '%s\n' "${SERVICE_NAMES[@]}" | grep -qx "${SERVICE_NAME}"; then</span>
            <span class="s">echo "Branch name is valid."</span>
          <span class="s">else</span>
            <span class="s">echo "[Error] Branch name must contain valid branch names and service names."</span>
            <span class="s">echo "- Current branch: $BRANCH_NAME"</span>
            <span class="s">echo "- Branch names: main develop ${BRANCH_NAMES[@]}"</span>
            <span class="s">echo "- Service names: ${SERVICE_NAMES[@]}"</span>
            <span class="s">exit 1</span>
          <span class="s">fi</span>
<span class="s">...</span>
</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="change-branch-name">Change Branch Name</h2><p>If you create a PR with a branch name that does not match the predefined rules using GitHub Actions, an error will occur. In this case, you can change the branch name as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout &lt;current-branch-name&gt;
git branch <span class="nt">-m</span> &lt;new-branch-name&gt;
</code></pre></div></div><p>Also, you can change the branch name as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch <span class="nt">-m</span> &lt;current-branch-name&gt; &lt;new-branch-name&gt;
</code></pre></div></div><p>If you change the branch name like this, you can create a new PR and close the existing PR.</p><h2 id="git-hooks">Git hooks</h2><p>If you use the wrong branch name, you can check it with this GitHub Actions, but you cannot check it without creating a PR. Also, if you use the wrong branch name, you need to close the existing PR and create a new PR.</p><p>In this case, you can reduce unnecessary work by using Git hooks to check the branch name before creating a PR.</p><h3 id="create-script-to-check-branch-name">Create script to check branch name</h3><p>To create a script that checks the branch name, create the <code class="language-plaintext highlighter-rouge">scripts/check-branch-name.sh</code> file and modify it as follows.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env sh</span>

<span class="nv">pattern</span><span class="o">=</span><span class="s1">'^(dependabot|hotfix|release|review|feature|fix|sub-feature)/(npm_and_yarn|github_actions|SERVICE_1|SERVICE_2|template|components|config|common)/.*'</span>
<span class="nv">errorMessage</span><span class="o">=</span><span class="s1">'Invalid branch name. Please follow the correct naming convention.'</span>

<span class="k">if</span> <span class="o">!</span> git rev-parse <span class="nt">--is-inside-work-tree</span> <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"Error: Not inside Git working tree."</span>
  <span class="nb">exit </span>1
<span class="k">fi

</span><span class="nv">branches</span><span class="o">=</span><span class="si">$(</span>git branch | <span class="nb">grep</span> <span class="s1">'^\*'</span> | <span class="nb">sed</span> <span class="s1">'s/^\* //'</span><span class="si">)</span>

<span class="k">if </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$branches</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="nt">-Eq</span> <span class="s2">"</span><span class="nv">$pattern</span><span class="s2">"</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">printf</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[32mPassed</span><span class="se">\n</span><span class="s2">Branch Name: %s</span><span class="se">\n</span><span class="s2">Pattern: %s</span><span class="se">\0</span><span class="s2">33[0m</span><span class="se">\n</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$branches</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$pattern</span><span class="s2">"</span>
<span class="k">else
  </span><span class="nb">printf</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[31mResult: failed</span><span class="se">\n</span><span class="s2">Error Msg: %s</span><span class="se">\n</span><span class="s2">Branch Name: %s</span><span class="se">\n</span><span class="s2">Pattern: %s</span><span class="se">\0</span><span class="s2">33[0m</span><span class="se">\n</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$errorMessage</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$branches</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$pattern</span><span class="s2">"</span>
  <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$errorMessage</span><span class="s2">"</span>
  <span class="nb">exit </span>1
<span class="k">fi</span>
</code></pre></div></div><h3 id="configure-husky">Configure Husky</h3><p>To set up Git hooks using Husky, modify the <code class="language-plaintext highlighter-rouge">.husky/pre-commit</code> file as follows.</p><div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span><span class="w"> </span><span class="err">Run</span><span class="w"> </span><span class="err">validation</span><span class="w"> </span><span class="err">branch</span><span class="w"> </span><span class="err">name</span><span class="w">
</span><span class="err">.</span><span class="w"> </span><span class="s2">"$(dirname -- "</span><span class="err">$</span><span class="mi">0</span><span class="s2">")/scripts/validateBranchName.sh"</span><span class="w">

</span><span class="err">#</span><span class="w"> </span><span class="err">Run</span><span class="w"> </span><span class="err">lint-staged</span><span class="w">
</span><span class="err">yarn</span><span class="w"> </span><span class="err">lint-staged</span><span class="w">
</span></code></pre></div></div><p>And then, you need to move the <code class="language-plaintext highlighter-rouge">check-branch-name.sh</code> file you created earlier to <code class="language-plaintext highlighter-rouge">.husky/scripts/validateBranchName.sh</code>.</p><h3 id="configure-lefthook">Configure Lefthook</h3><p>To set up Git hooks using Lefthook, modify the <code class="language-plaintext highlighter-rouge">.lefthook.yml</code> file as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">pre-push</span><span class="pi">:</span>
  <span class="na">scripts</span><span class="pi">:</span>
    <span class="s2">"</span><span class="s">validateBranchName.sh"</span><span class="err">:</span>
      <span class="na">runner</span><span class="pi">:</span> <span class="s">bash</span>
</code></pre></div></div><p>And then, you need to move the <code class="language-plaintext highlighter-rouge">check-branch-name.sh</code> file you created earlier to <code class="language-plaintext highlighter-rouge">.lefthook/pre-commit/validateBranchName.sh</code>.</p><h2 id="completed">Completed</h2><p>Done! We’ve seen how to check the branch name when creating a PR using GitHub Actions. We also learned how to check the branch name using Git hooks before creating a PR.</p><p>If the branch name plays an important role in the project like me, try checking the branch name using GitHub Actions and Git Hooks.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[Let's see how to check the branch name when creating a PR using GitHub Actions.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">[GitHub Actions] Automatically Assign Assignees to PR</title><link href="https://deku.posstree.com/en/github_actions/auto-assing-assigness" rel="alternate" type="text/html" title="[GitHub Actions] Automatically Assign Assignees to PR"/><published>2024-08-28T00:00:00+09:00</published><updated>2024-08-30T09:57:08+09:00</updated><id>https://deku.posstree.com/github_actions/auto-assing-assigness-en</id><content type="html" xml:base="https://deku.posstree.com/github_actions/auto-assing-assigness"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#create-github-actions">Create GitHub Actions</a></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>After completing the development, the developer in charge of the development creates a PR(Pull Request) on GitHub and adds himself to the <code class="language-plaintext highlighter-rouge">Assignees</code>. However, it is cumbersome to add yourself to the <code class="language-plaintext highlighter-rouge">Assignees</code> every time you create a PR.</p><p>In this blog post, I will introduce how to automatically add the developer who created the PR to the <code class="language-plaintext highlighter-rouge">Assignees</code> using GitHub Actions.</p><h2 id="create-github-actions">Create GitHub Actions</h2><p>To create a GitHub Actions that automatically adds <code class="language-plaintext highlighter-rouge">Assignees</code> to PRs, create a <code class="language-plaintext highlighter-rouge">.github/workflows/auto-assign-assignees.yml</code> file and modify it as follows.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Assign assignees</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">opened</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">assign</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Set assignees</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">github.event.pull_request.user.login != 'dependabot[bot]'</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set assignees</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github-token</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">const { owner, repo } = context.repo</span>
            <span class="s">const prNumber = context.payload.pull_request.number</span>

            <span class="s">const response = await github.rest.issues.get({</span>
              <span class="s">owner,</span>
              <span class="s">repo,</span>
              <span class="s">issue_number: prNumber,</span>
            <span class="s">})</span>
            <span class="s">const { assignees } = response.data</span>

            <span class="s">if (assignees.length === 0) {</span>
              <span class="s">await github.rest.issues.addAssignees({</span>
                <span class="s">owner: owner,</span>
                <span class="s">repo: repo,</span>
                <span class="s">issue_number: prNumber,</span>
                <span class="s">assignees: [context.actor]</span>
              <span class="s">})</span>
            <span class="s">}</span>
</code></pre></div></div><p>Let’s take a closer look at this GitHub Actions.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">opened</span>
<span class="nn">...</span>
</code></pre></div></div><p>This GitHub Actions runs when a PR is created.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">assign</span><span class="pi">:</span>
    <span class="s">...</span>
    <span class="s">if</span><span class="err">:</span> <span class="s">github.event.pull_request.user.login != 'dependabot[bot]'</span>
    <span class="s">...</span>
</code></pre></div></div><p>In my case, I use Dependabot on GitHub. Since Dependabot cannot be added to the Assignees of the PR created by Dependabot, I set it not to add Assignees to the PR created by Dependabot.</p><div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">assign</span><span class="pi">:</span>
    <span class="s">...</span>
    <span class="s">steps</span><span class="err">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set assignees</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github-token</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">const { owner, repo } = context.repo</span>
            <span class="s">const prNumber = context.payload.pull_request.number</span>

            <span class="s">const response = await github.rest.issues.get({</span>
              <span class="s">owner,</span>
              <span class="s">repo,</span>
              <span class="s">issue_number: prNumber,</span>
            <span class="s">})</span>
            <span class="s">const { assignees } = response.data</span>

            <span class="s">if (assignees.length === 0) {</span>
              <span class="s">await github.rest.issues.addAssignees({</span>
                <span class="s">owner: owner,</span>
                <span class="s">repo: repo,</span>
                <span class="s">issue_number: prNumber,</span>
                <span class="s">assignees: [context.actor]</span>
              <span class="s">})</span>
            <span class="s">}</span>
</code></pre></div></div><p>I used the GitHub Actions provided by GitHub to write code that adds the developer(<code class="language-plaintext highlighter-rouge">context.actor</code>) who creates a PR to the <code class="language-plaintext highlighter-rouge">Assignees</code> by using JavaScript code.</p><h2 id="completed">Completed</h2><p>Done! We’ve seen how to create a GitHub Actions that automatically adds the developer who created the PR to the <code class="language-plaintext highlighter-rouge">Assignees</code> every time a PR is created. If you set the Assignees manually, try using this GitHub Actions to set the Assignees automatically.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[Let's see how to automatically add the developer who created the PR to the Assignees using GitHub Actions.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">Deliberate practice to become an expert</title><link href="https://deku.posstree.com/en/essay/deliberate-practice-to-become-expert/" rel="alternate" type="text/html" title="Deliberate practice to become an expert"/><published>2024-08-26T00:00:00+09:00</published><updated>2024-09-17T11:48:36+09:00</updated><id>https://deku.posstree.com/essay/deliberate-practice-to-become-expert-en</id><content type="html" xml:base="https://deku.posstree.com/essay/deliberate-practice-to-become-expert/"><![CDATA[<p>We brush our teeth and breathe for a lifetime, but we can not become experts in brushing our teeth or breathing.</p><p>The reason why we can not become an expert in what we do for a lifetime is that we lack motivation for the work and feedback on the action.</p><p>To become an expert in something, you need to have a <code class="language-plaintext highlighter-rouge">motivation to improve your skills</code> in the area you want to become an expert in, and you need to receive <code class="language-plaintext highlighter-rouge">specific feedback at the right time</code> on your skill improvement activities and repeat them consistently.</p><p>Deliberate practice is a way to improve your skills by enhancing your expertise through motivation and feedback.</p><h2 id="validity-and-feedback">Validity and feedback</h2><p>For expertise to be formed, <code class="language-plaintext highlighter-rouge">validity</code> is required in addition to motivation and feedback. Validity means that there is causality and regularity in a task and predictability of the results.</p><p>In areas where validity is high, you can see the results of your actions, which is feedback on the work.</p><p>In the environment where there is validity and feedback, you can know the results of your actions and have the opportunity to learn from them.</p><blockquote><p>Airport security checkpoint inspectors do not know how many mistakes they made today. They can find out how many knives or liquid substances in the bag, but they can not know how many they missed.</p></blockquote><p>Inspectors at airport security checkpoints can not become experts because the environment lacks validity and feedback. In such an environment that lacks feedback, you can not become an expert no matter how long you work.</p><p>In some jobs, there are tasks that form expertise and tasks that are difficult to form expertise.</p><blockquote><p>Doctors can not know if they made a wrong diagnosis when diagnosing a patient. Therefore, it is difficult to improve expertise in this task. However, when performing surgery, the doctor can determine if the surgery was successful by observing the patient’s condition after surgery, so expertise can be improved through surgery.</p></blockquote><p>If you are in an industry where there is a lack of validity and feedback, you should not give up becoming an expert. By changing the way you work to increase validity and feedback, you can become an expert.</p><p>To increase validity, you need to set variables in your work and experiment by modifying those variables to find regularity and causality.</p><p>To increase feedback, you need to make an effort to receive feedback directly from colleagues, bosses, customers, or from the work you are doing. If you are a developer like me, you can receive feedback through code reviews from colleagues or bosses, or through static analysis tools or test code.</p><h2 id="difficulty">Difficulty</h2><p>To improve your skills, <code class="language-plaintext highlighter-rouge">deliberate practice</code> is essential. Many people emphasize the quantitative part of practice, such as the 10,000-hour rule, but few emphasize the qualitative part.</p><p>One of the essential conditions for deliberate practice is the appropriate <code class="language-plaintext highlighter-rouge">difficulty</code>. To be deliberate practice, your skill level and the difficulty of the task should be similar. This is consistent with Mihaly Csikszentmihalyi’s flow theory.</p><picture><source srcset="/assets/images/category/essay/2024/deliberate-practice-to-become-expert/flow.avif" type="image/avif"/><source srcset="/assets/images/category/essay/2024/deliberate-practice-to-become-expert/flow.webp" type="image/webp"/><img src="/assets/images/category/essay/2024/deliberate-practice-to-become-expert/flow.jpg" alt="Deliberate practice to become an expert: Flow"/></picture><p>The horizontal axis represents your self-perceived skill level for the task, and the vertical axis represents the difficulty you feel for the task.</p><p>The <code class="language-plaintext highlighter-rouge">Boredom area</code> is an area where your skill level is higher than the difficulty of the task. When you do this work, you think it’s too good to handle easy work at first, but after a while, you feel <code class="language-plaintext highlighter-rouge">boredom</code> about the work.</p><p>The <code class="language-plaintext highlighter-rouge">Anxiety area</code> is an area where the difficulty of the task is higher than your skill level. In this area, you feel <code class="language-plaintext highlighter-rouge">anxiety</code> or <code class="language-plaintext highlighter-rouge">fear</code> that you don’t know much about the task and can’t solve it with your skills.</p><p>The <code class="language-plaintext highlighter-rouge">Apathy-Flow area</code> is an area where the difficulty and skill level are similar. Mihaly Csikszentmihalyi says that this is where humans experience <code class="language-plaintext highlighter-rouge">immersion</code>. When humans are in a state of immersion, they show the highest level of concentration, and their performance or learning ability can be maximized. And at that time, they experience the highest level of happiness.</p><p>Stephen Krashen, a linguist, Input hypothesis says that language skills develop significantly only when the input is given at a level of i+1, where i is the language level of the learner.</p><p>Educational psychology has a theory called <code class="language-plaintext highlighter-rouge">Cognitive load theory</code>. This theory states that it is difficult to learn anything properly if unnecessary cognitive burdens are given during learning. For example, suppose you learn difficult concepts like calculus in a language you don’t know well, such as German. In that case, you will have difficulty learning calculus because you will be distracted by other things. On the other hand, there is research that says that if you memorize English words by covering the vowels, it can be remembered longer because it is <code class="language-plaintext highlighter-rouge">more difficult</code>.</p><p>One important fact that can be learned through such research results is that the appropriate difficulty is necessary to improve skills.</p><p>If you feel anxious or bored during business hours, it means that you are not in an environment where you can improve your skills. The problem is that when you get used to such an environment and your behavior becomes a habit, you don’t perceive this environment well.</p><p>The results of the study <a href="https://www.researchgate.net/publication/312624160_An_examination_of_the_practice_environments_in_figure_skating_and_volleyball_A_search_for_deliberate_practice" rel="nofollow noreferrer" target="_blank">An examination of the practice environments in figure skating and volleyball: A search for deliberate practice</a> show this.</p><blockquote><p>We compared two groups of athletes: regional competition-level athletes and world competition-level athletes. After finishing practice for the day, we asked them a simple survey. One of the questions was how many triple axels they remembered doing during practice today. There was no significant difference in the responses of the two groups. However, when we recorded and analyzed the actual practice scenes of the two groups, we found that world competition-level athletes practiced more triple axels than regional competition-level athletes. Regional competition-level athletes spent more time practicing things they were already familiar with and confident in, such as ‘artistic expression.’ Then they mistakenly thought they had practiced triple axels a lot.</p></blockquote><p>This research shows that humans get used to their environment and lose their self-perception in a familiar environment.</p><h2 id="deliberate-practice">Deliberate practice</h2><p>We can practice deliberately based on Mihaly Csikszentmihalyi’s flow theory.</p><picture><source srcset="/assets/images/category/essay/2024/deliberate-practice-to-become-expert/deliberate-practice.avif" type="image/avif"/><source srcset="/assets/images/category/essay/2024/deliberate-practice-to-become-expert/deliberate-practice.webp" type="image/webp"/><img src="/assets/images/category/essay/2024/deliberate-practice-to-become-expert/deliberate-practice.jpg" alt="Deliberate practice to become an expert: Deliberate practice"/></picture><p>As shown in the figure, we can practice deliberately in four ways.</p><ul><li><code class="language-plaintext highlighter-rouge">A1</code>: Lower your skills</li><li><code class="language-plaintext highlighter-rouge">A2</code>: Increase the difficulty</li><li><code class="language-plaintext highlighter-rouge">B1</code>: Lower the difficulty</li><li><code class="language-plaintext highlighter-rouge">B2</code>: Improve your skills</li></ul><p>This deliberate practice is essential to improve your skills. Without it, you will not only fail to improve your skills, but you may also fall into the illusion that your skills are improving, as in the results of the study on figure skating.</p><h3 id="a1-lower-your-skills">A1: Lower your skills</h3><p>This is a deliberate practice method that lowers your skills without changing the difficulty of the task. For example, when training your physical strength, you can lower your skills by exercising with sandbags attached to your arms and legs.</p><p>If you are a developer like me, you can deliberately practice by not using tools to develop more efficiently or more conveniently. For example, you can deliberately practice by not using static code analyzers like ESLint or Prettier in real-time, using tools other than your favorite IDE or text editor, developing only with the keyboard if you often use the mouse, or developing without using a debugger. By not using tools for the convenience or efficiency of development, you can deliberately practice by lowering your skills. By solving what the tools always did on your own, you can think more than before and increase your concentration.</p><h3 id="a2-increase-the-difficulty">A2: Increase the difficulty</h3><p>This is a deliberate practice method that increases the difficulty of the task while keeping your skills the same.</p><blockquote><p>The duel in San Francisco in 1965 was the beginning of Bruce Lee’s weight training. At that time, Bruce Lee started teaching Kung Fu to people. One of the traditional martial artists heard that Bruce Lee was teaching Westerners and came to challenge him. Bruce Lee’s wife, Linda Lee, witnessed the scene. “It lasted about three minutes. Bruce knocked him down and said, ‘Will you give up?’ then he said, ‘I give up.’ Then they went back to San Francisco. But Bruce was very angry. He couldn’t knock him down before three minutes. That’s when it started. Bruce began to doubt his physical health and martial arts style.” - How Bruce Lee Changed the World, Discovery Channel, 2009.</p></blockquote><p>If someone is too good at martial arts like Bruce Lee, the fight with the opponent can be easy. In this case, you can increase the difficulty of the task by adding your own constraints, such as ‘win within three minutes,’ to increase the difficulty of the task.</p><p>Outstanding programmers often use this method. For example, they think about how to complete the task given in a day in an hour, refactor the program to make the UI respond faster, find two bugs or problems a day instead of one, or code in an unfamiliar language. By doing this, you can perform deliberate practice.</p><p>Another way is to add tasks that are not officially required by your own will. For example, you can refactor your work to improve it, add automated tests, or develop your own tools (methods) to improve your work.</p><p>Making your own tools and methods is especially important in A2. One of the techniques in cognitive psychology to quickly identify the expertise of others is to ask if there are ‘tools or methods that you make and use yourself to do things more efficiently and effectively than others’. You need to frequently identify and analyze recurring patterns and take time to create tools. By creating tools like this, the difficulty becomes higher than the existing difficulty, and your skills improve. Not only that, but the tools you create make your work more efficient and effective, helping to increase your expertise.</p><h3 id="b1-lower-the-difficulty">B1: Lower the difficulty</h3><p>This is a deliberate practice method that lowers the difficulty of the task when the difficulty is higher than your skills. It is a method of developing a high-difficulty task as an alternative function that can be made with one’s own ability or dividing it into smaller tasks that are easier to handle.</p><p>There is a caveat in using this method. The skill level and difficulty change frequently. The problem you were struggling with yesterday suddenly became easy to solve today, or the difficulty increased dramatically because the easy task you thought was a bug occurred. Or the method you tried was wrong, and the difficulty increased too much.</p><p>Therefore, this method should be used flexibly. If you feel bored because each task is too easy after dividing the difficult task into the less difficult tasks, you should increase the difficulty again or lower your skills. If your skills have improved while working and the difficulty has become easier, you should adjust it again accordingly.</p><h3 id="b2-improve-your-skills">B2: Improve your skills</h3><p>This is a deliberate practice method that increases your skills when the difficulty is higher than your skills.</p><p>To improve your skills, you can try the following methods.</p><ul><li>Books</li><li>Study groups</li><li>Education</li></ul><p>However, this method is a long-term method to improve your skills. The current difficulty is higher than your skills, so it takes too long to improve your skills. So what are the short-term methods to improve your skills?</p><p>To improve your skills in the short term, you can use social, tool, and internal approaches.</p><p>The social approach is to seek help from experts better than you. This includes suggesting pair programming to better members, searching the Internet, posting on the community for help, referring to official documents, etc.</p><p>The tool approach is to use tools to help you. This includes using a better debugger, automatic integration tools, code analysis tools, open-source use, etc.</p><p>The internal approach is to use your internal resources. This includes using your experience, intuition, and internal knowledge to solve problems.</p><h2 id="what-leaders-can-do">What leaders can do</h2><p>As a leader, you should give your team members the appropriate task that suits their skills, understand their status, and help them use the aforementioned deliberate practice methods appropriately. However, this is an ideal state, and it is very difficult to do so.</p><p>Therefore, it is important for leaders to create an environment and ability for each individual to practice these intentional training methods.</p><h2 id="deliberate-practice-in-daily-life">Deliberate practice in daily life</h2><p>Deliberate practice is not only applicable to work but also to daily life. Applying the lessons in one area to another like this is called the learning transfer in psychology.</p><p>Please try to practice deliberately in your work and daily life to become an expert in your work and life.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="essay"/><summary type="html"><![CDATA[You can not become an expert by repeating the same thing for a lifetime. To become an expert, deliberate practice is required.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/essay/2024/deliberate-practice-to-become-expert/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/essay/2024/deliberate-practice-to-become-expert/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">ESLint Configuration for Monorepo in VSCode</title><link href="https://deku.posstree.com/en/environment/vscode/eslint-configuration-for-monorepo" rel="alternate" type="text/html" title="ESLint Configuration for Monorepo in VSCode"/><published>2024-08-22T00:00:00+09:00</published><updated>2024-08-27T20:01:47+09:00</updated><id>https://deku.posstree.com/environment/vscode/vscode-eslint-configuration-for-monorepo-en</id><content type="html" xml:base="https://deku.posstree.com/environment/vscode/eslint-configuration-for-monorepo"><![CDATA[<div id="contents_list"><h2 id="contents">Contents</h2><ul><li><a href="#contents">Contents</a></li><li><a href="#outline">Outline</a></li><li><a href="#current-working-directory-in-vscode">Current working directory in VSCode</a></li><li><a href="#modify-vscodesettingsjson-file">Modify .vscode/settings.json file</a></li><li><a href="#completed">Completed</a></li></ul></div><h2 id="outline">Outline</h2><p>Because multiple packages are managed in a single repository in a Monorepo environment, each package sometimes requires a separate ESLint configuratoin. At this time, It is important to determine which directory ESLint is based on.</p><p>In this blog post, I will introduce how to set the Current Working Directory(CWD) of ESLint in Visual Studio Code(VSCode) when developing Monorepo projects.</p><h2 id="current-working-directory-in-vscode">Current working directory in VSCode</h2><p>If you configure nothing special in VSCode, ESLint will work based on the ESLint configuration file in the root folder. However, in Monorepo projects, each project may have its own ESLint configuration file.</p><p>In this case, if you set the Current Working Directory(CWD) of ESLint in VSCode, ESLint will work based on that directory.</p><h2 id="modify-vscodesettingsjson-file">Modify .vscode/settings.json file</h2><p>The following is how to set the Current Working Directory(CWD) of ESLint in VSCode.</p><ol><li>Configure the mode</li></ol><div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="nl">"eslint.workingDirectories"</span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="w"> </span><span class="nl">"mode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"auto"</span><span class="w"> </span><span class="p">}]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div><p>If you set it like this, VSCode will automatically find the directory with the ESLint configuration file and set it as the CWD.</p><ol><li>Configure the pattern</li></ol><div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="nl">"eslint.workingDirectories"</span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="w"> </span><span class="nl">"pattern"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./packages/*/"</span><span class="w"> </span><span class="p">}]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div><p>You can also set the directory to be the CWD with a <code class="language-plaintext highlighter-rouge">Glob</code> pattern.</p><ol><li>Configure the directories</li></ol><div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="nl">"eslint.workingDirectories"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"./packages/package1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"./packages/package2"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div><p>You can also specify specific directories as an array like this.</p><h2 id="completed">Completed</h2><p>Done! We’ve seen how to set the Current Working Directory(CWD) of ESLint in VSCode when developing Monorepo projects.</p><p>In my case, I’m using <code class="language-plaintext highlighter-rouge">"mode": "auto"</code>. If there are no special problems, I recommend using this setting.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="environment"/><summary type="html"><![CDATA[Let's see how to configure ESLint in VSCode when developing Monorepo projects.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/environment/2024/eslint-configuration-for-monorepo/background.png"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/environment/2024/eslint-configuration-for-monorepo/background.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="en"><title type="html">[Essay] Learning methods to survive in the AI era</title><link href="https://deku.posstree.com/en/essay/how-to-survive-in-ai-era/" rel="alternate" type="text/html" title="[Essay] Learning methods to survive in the AI era"/><published>2024-08-16T00:00:00+09:00</published><updated>2024-08-25T20:50:59+09:00</updated><id>https://deku.posstree.com/essay/how-to-survive-in-ai-era-en</id><content type="html" xml:base="https://deku.posstree.com/essay/how-to-survive-in-ai-era/"><![CDATA[<p>The following conditions are easy for AI to learn.</p><ol><li>The goal is clear, objective, and static.</li><li>The number of actions and choices that can be made at each moment is finite.</li><li>At each moment, you can know how close you are to the goal by your choice.</li><li>It is a closed system with little influence from unexpected external factors.</li><li>There is a lot of data on choices and results for achieving the goal.</li></ol><p>This situation is a good condition for learning not only AI but also humans.</p><p>According to a study published by James Shanteau, <a href="https://www.researchgate.net/publication/4815960_Competence_in_Experts_The_Role_of_Task_Characteristics" rel="nofollow noreferrer" target="_blank">Competence in Experts: The Role of Task Characteristics</a>, professionalism is well demonstrated in the profession when feedback is given, work is repeated, and objective analysis is possible.</p><p>However, it can be said that jobs with this expertise now have good conditions for AI to learn.</p><p>An environment that is easy for humans to learn is an environment that is easy for AI to learn, so this may have to give way to AI someday. Therefore, in order to survive in the AI era, you must choose a topic that is difficult to learn in an environment that is difficult to learn.</p><p>The conditions that are difficult to learn are as follows.</p><ol><li>The goal is ambiguous, subjective, and dynamic.</li><li>At each moment, there are infinite actions and choices that can be made.</li><li>At each moment, you cannot know how close you are to the goal by your choice.</li><li>It is an open system that is largely influenced by unexpected external factors.</li><li>There is a lack of data on choices and results for achieving the goal.</li></ol><p>These conditions are difficult for humans to learn, and especially difficult for AI to learn.</p><p>In addition, AI is difficult to replace high-level jobs that require things such as originality, social sensitivity, negotiation, persuasion, and helping and caring for others.</p><ul><li>Originality: To come up with unusual or original ideas for a given topic or situation, or to create creative ways to solve problems.</li><li>Social preceptiveness: Recognizing the reactions of others and understanding why they react like that.</li><li>Negotiation: trying to reconcile people and reconcile the differences between each other.</li><li>Persuasion: Convincing others to change their minds or behaviors.</li><li>Assisting and caring for others: providing personal assistance, treatment, emotional support, or other personal assistance to others, such as colleagues, customers, and patients.</li></ul><p>I am a developer. At the developer field, computer programmers are jobs that AI can easily replace, and software developers are jobs that AI can hardly replace. The difference between these two is in originality, negotiation, and persuasion ability.</p><ul><li>Computer programmer: The main task is to develop according to the specifications given by others, and the process does not require much negotiation or persuasion.</li><li>Software developer: When creating software, it involves thinking about and designing what to make, and there are many tasks that interact with others in the process.</li></ul><p>In addition, the lower the wage now, the more likely AI is to replace that job.</p><p>When creating your own career, you need to check whether AI is replaceable. If AI is a replaceable career, it is not competitive and maybe the job itself can be lost. In order to survive in the AI era, it is necessary to try to learn and grow the parts that AI cannot replace.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="essay"/><summary type="html"><![CDATA[Let's see what learning methods are needed to create a career that AI cannot replace in the AI era.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/essay/2024/how-to-survive-in-ai-era/background.png"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/essay/2024/how-to-survive-in-ai-era/background.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry></feed>