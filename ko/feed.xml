<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://deku.posstree.com/ko/feed.xml" rel="self" type="application/atom+xml"/><link href="https://deku.posstree.com/ko/" rel="alternate" type="text/html"/><updated>2025-04-30T09:42:04+09:00</updated><id>https://deku.posstree.com/feed.xml</id><title type="html">Deku</title><subtitle>『Programming Artist, DeKu』</subtitle><author><name>dev.yakuza@gmail.com</name></author><entry xml:lang="ko"><title type="html">[Flutter] 앱 접근성(Accessibility)</title><link href="https://deku.posstree.com/ko/flutter/accessibility/" rel="alternate" type="text/html" title="[Flutter] 앱 접근성(Accessibility)"/><published>2025-01-03T00:00:00+09:00</published><updated>2025-01-22T21:14:48+09:00</updated><id>https://deku.posstree.com/flutter/accessibility-ko</id><content type="html" xml:base="https://deku.posstree.com/flutter/accessibility/"><![CDATA[<div id="contents_list"><h2 id="section">목차</h2><ul><li><a href="#%EB%AA%A9%EC%B0%A8">목차</a></li><li><a href="#%EA%B0%9C%EC%9A%94">개요</a></li><li><a href="#%EA%B5%AC%EA%B8%80-play-console%EC%97%90%EC%84%9C-%EC%A0%91%EA%B7%BC%EC%84%B1-%EA%B2%80%EC%82%AC">구글 Play Console에서 접근성 검사</a></li><li><a href="#%EC%9C%84%EC%A0%AF%EC%9D%98-%EC%A0%91%EA%B7%BC%EC%84%B1-%ED%96%A5%EC%83%81">위젯의 접근성 향상</a><ul><li><a href="#iconbutton%EC%9D%98-%EC%A0%91%EA%B7%BC%EC%84%B1">IconButton의 접근성</a></li><li><a href="#textfield%EC%9D%98-%EC%A0%91%EA%B7%BC%EC%84%B1">TextField의 접근성</a></li><li><a href="#%EC%A0%91%EA%B7%BC%EC%84%B1-%ED%96%A5%EC%83%81%EC%9D%84-%EC%9C%84%ED%95%9C-semantics-%EC%9C%84%EC%A0%AF">접근성 향상을 위한 Semantics 위젯</a></li><li><a href="#%EC%83%89%EC%83%81-%EB%8C%80%EB%B9%84%EC%99%80-%EB%B2%84%ED%8A%BC-%ED%81%AC%EA%B8%B0">색상 대비와 버튼 크기</a></li></ul></li><li><a href="#%EC%A0%91%EA%B7%BC%EC%84%B1-%ED%85%8C%EC%8A%A4%ED%8A%B8">접근성 테스트</a></li><li><a href="#%EC%99%84%EB%A3%8C">완료</a></li></ul></div><h2 id="개요">개요</h2><p>Flutter에서는 앱의 접근성(Accessibility)을 검사하고 향상시키는 방법을 제공합니다.</p><ul><li><a href="https://docs.flutter.dev/ui/accessibility-and-internationalization/accessibility" rel="nofollow noreferrer">https://docs.flutter.dev/ui/accessibility-and-internationalization/accessibility</a></li></ul><p>이번 블로그 포스트에서는 Flutter로 개발한 앱의 접근성을 향상시키는 방법을 알아보겠습니다.</p><h2 id="구글-play-console에서-접근성-검사">구글 Play Console에서 접근성 검사</h2><p>구글 Play Console로 이동한 다음 <code class="language-plaintext highlighter-rouge">테스트(Testing) &gt; 사전 출시 보고서(Pre-launch report) &gt; 세부정보(Details) &gt; 접근성(Accessibility)</code>에서 다음과 같이 앱의 접근성을 검사하고 결과를 확인할 수 있습니다.</p><picture><source srcset="/assets/images/category/flutter/2025/accessibility/accessibility_check.avif" type="image/avif"/><source srcset="/assets/images/category/flutter/2025/accessibility/accessibility_check.webp" type="image/webp"/><img src="/assets/images/category/flutter/2025/accessibility/accessibility_check.png" alt="Flutter - Accessibility check on Google Play Console"/></picture><p>앱을 배포하기전에 공개/비공개/내부 테스트를 진행한 경우, 이 부분에서 접근성 결과를 확인할 수 있습니다. 여기서 특별히 문제가 발견되지 않았다면 앱의 접근성이 양호하다고 볼 수 있습니다.</p><p>이 부분에서 문제가 발견되었다면, 이번 블로그 포스트에서 소개한 내용을 통해 앱의 접근성을 향상시킬 수 있습니다.</p><h2 id="위젯의-접근성-향상">위젯의 접근성 향상</h2><p>특정 위젯은 접근성 향상을 위해 추가적인 속성을 제공합니다. 접근성 향상을 위한 속성이 없는 위젯도 <code class="language-plaintext highlighter-rouge">Semantics</code> 위젯을 사용하여 접근성을 향상시킬 수 있습니다.</p><h3 id="iconbutton의-접근성">IconButton의 접근성</h3><p><code class="language-plaintext highlighter-rouge">IconButton</code> 위젯을 사용하면, <code class="language-plaintext highlighter-rouge">Screen Reader</code>가 해당 위젯을 인식하지 못할 수 있습니다. 이때는 <code class="language-plaintext highlighter-rouge">Semantics</code> 위젯을 사용하여 <code class="language-plaintext highlighter-rouge">IconButton</code> 위젯을 감싸거나, <code class="language-plaintext highlighter-rouge">IconButton</code> 위젯의 <code class="language-plaintext highlighter-rouge">Tooltip</code> 속성을 사용하여 접근성을 향상시킬 수 있습니다.</p><ul><li><code class="language-plaintext highlighter-rouge">Semantics</code> 위젯을 사용한 예시</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Semantics</span><span class="p">(</span>
  <span class="nl">button:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="nl">label:</span> <span class="s">'Add'</span><span class="p">,</span>
  <span class="nl">child:</span> <span class="n">IconButton</span><span class="p">(</span>
    <span class="nl">icon:</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="o">.</span><span class="na">add</span><span class="p">),</span>
    <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{},</span>
  <span class="p">),</span>
<span class="p">)</span>
</code></pre></div></div><ul><li><code class="language-plaintext highlighter-rouge">Tooltip</code> 속성을 사용한 예시</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">IconButton</span><span class="p">(</span>
  <span class="nl">icon:</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="o">.</span><span class="na">add</span><span class="p">),</span>
  <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{},</span>
  <span class="nl">tooltip:</span> <span class="s">'Add'</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div><h3 id="textfield의-접근성">TextField의 접근성</h3><p><code class="language-plaintext highlighter-rouge">TextField</code> 위젯을 사용할 때, <code class="language-plaintext highlighter-rouge">labelText</code> 속성 또는 <code class="language-plaintext highlighter-rouge">hintText</code> 속성을 사용하여 접근성을 향상시킬 수 있습니다.</p><ul><li><code class="language-plaintext highlighter-rouge">labelText</code> 속성을 사용한 예시</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TextField</span><span class="p">(</span>
  <span class="nl">decoration:</span> <span class="n">InputDecoration</span><span class="p">(</span>
    <span class="nl">labelText:</span> <span class="s">'Email'</span><span class="p">,</span>
  <span class="p">),</span>
<span class="p">)</span>
</code></pre></div></div><ul><li><code class="language-plaintext highlighter-rouge">hintText</code> 속성을 사용한 예시</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TextField</span><span class="p">(</span>
  <span class="nl">decoration:</span> <span class="n">InputDecoration</span><span class="p">(</span>
    <span class="nl">hintText:</span> <span class="s">'Email'</span><span class="p">,</span>
  <span class="p">),</span>
<span class="p">)</span>
</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h3 id="접근성-향상을-위한-semantics-위젯">접근성 향상을 위한 Semantics 위젯</h3><p><code class="language-plaintext highlighter-rouge">Semantics</code> 위젯을 사용하여 접근성을 향상시킬 수 있습니다. 예를 들어 <code class="language-plaintext highlighter-rouge">Switch</code> 위젯을 사용할 때, <code class="language-plaintext highlighter-rouge">Semantics</code> 위젯으로 <code class="language-plaintext highlighter-rouge">Switch</code> 위젯을 감싼 후, <code class="language-plaintext highlighter-rouge">label</code> 속성을 사용하여 접근성을 향상시킬 수 있습니다.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Semantics</span><span class="p">(</span>
  <span class="nl">label:</span> <span class="s">'Enable push notifications'</span><span class="p">,</span>
  <span class="nl">child:</span> <span class="n">Switch</span><span class="p">(</span>
    <span class="nl">value:</span> <span class="n">_value</span><span class="p">,</span>
    <span class="nl">onChanged:</span> <span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
        <span class="n">_value</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
      <span class="p">});</span>
    <span class="p">},</span>
  <span class="p">),</span>
<span class="p">)</span>
</code></pre></div></div><p>또한, <code class="language-plaintext highlighter-rouge">InkWell</code> 위젯을 사용할 때에도 <code class="language-plaintext highlighter-rouge">Semantics</code> 위젯을 사용하여 접근성을 향상시킬 수 있습니다.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Semantics</span><span class="p">(</span>
  <span class="nl">label:</span> <span class="s">'Open profile'</span><span class="p">,</span>
  <span class="nl">child:</span> <span class="n">InkWell</span><span class="p">(</span>
    <span class="nl">onTap:</span> <span class="p">()</span> <span class="p">{</span>
      <span class="c1">// Open profile</span>
    <span class="p">},</span>
    <span class="nl">child:</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="o">.</span><span class="na">person</span><span class="p">),</span>
  <span class="p">),</span>
<span class="p">)</span>
</code></pre></div></div><h3 id="색상-대비와-버튼-크기">색상 대비와 버튼 크기</h3><p>접근성 향상을 위해 색상 대비나 버튼 크기를 조정해야할 때가 있습니다. 이 부분은 적절한 색상 대비와 버튼 크기를 사용하여 접근성을 향상시킬 수 있습니다.</p><p>적절한 색상 대비와 크기를 점검하기 위해서는 다음과 같이 <code class="language-plaintext highlighter-rouge">Flutter</code>에서 제공하는 접근성 테스트를 활용할 수 있습니다.</p><h2 id="접근성-테스트">접근성 테스트</h2><p><code class="language-plaintext highlighter-rouge">Flutter</code>에서는 접근성을 위한 테스트를 제공합니다. 이를 통해 위젯이 접근성을 준수하는지 확인할 수 있습니다.</p><p><code class="language-plaintext highlighter-rouge">Flutter</code>의 위젯을 테스트하는 코드에서 다음과 같이 접근성 테스트를 추가할 수 있습니다.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">testWidgets</span><span class="p">(</span><span class="s">'Check accessibility'</span><span class="p">,</span> <span class="p">(</span><span class="n">WidgetTester</span> <span class="n">tester</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">SemanticsHandle</span> <span class="n">handle</span> <span class="o">=</span> <span class="n">tester</span><span class="o">.</span><span class="na">ensureSemantics</span><span class="p">();</span>

  <span class="k">await</span> <span class="n">tester</span><span class="o">.</span><span class="na">pumpWidget</span><span class="p">(</span><span class="n">TargetWidget</span><span class="p">());</span>

  <span class="k">await</span> <span class="n">expectLater</span><span class="p">(</span><span class="n">tester</span><span class="p">,</span> <span class="n">meetsGuideline</span><span class="p">(</span><span class="n">androidTapTargetGuideline</span><span class="p">));</span>
  <span class="k">await</span> <span class="n">expectLater</span><span class="p">(</span><span class="n">tester</span><span class="p">,</span> <span class="n">meetsGuideline</span><span class="p">(</span><span class="n">iOSTapTargetGuideline</span><span class="p">));</span>
  <span class="k">await</span> <span class="n">expectLater</span><span class="p">(</span><span class="n">tester</span><span class="p">,</span> <span class="n">meetsGuideline</span><span class="p">(</span><span class="n">labeledTapTargetGuideline</span><span class="p">));</span>
  <span class="k">await</span> <span class="n">expectLater</span><span class="p">(</span><span class="n">tester</span><span class="p">,</span> <span class="n">meetsGuideline</span><span class="p">(</span><span class="n">textContrastGuideline</span><span class="p">));</span>
  <span class="n">handle</span><span class="o">.</span><span class="na">dispose</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div><p>이 테스트 코드를 통해, 색상 대비와 버튼 크기, 스크린 리더가 인식할 수 있는 레이블 등을 확인할 수 있습니다.</p><h2 id="완료">완료</h2><p>이것으로 <code class="language-plaintext highlighter-rouge">Flutter</code>로 개발한 앱의 접근성을 향상시킬 수 있는 방법에 대해 알아보았습니다. 또한 <code class="language-plaintext highlighter-rouge">Flutter</code>에서 제공하는 접근성 테스트를 통해 접근성을 준수하는지 확인하는 방법에 대해서도 알아보았습니다.</p><p>여러분도 <code class="language-plaintext highlighter-rouge">Flutter</code>로 개발한 앱의 접근성 향상을 위해 테스트 코드를 작성해 보고, 접근성 향상을 위한 방법들을 적용해 보시기 바랍니다.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="flutter"/><summary type="html"><![CDATA[Flutter로 개발한 앱의 접근성(Accessibility)을 향상시키는 방법을 알아보겠습니다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/flutter/background.png"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/flutter/background.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ko"><title type="html">[Code Quality] Semgrep을 사용하여 정규식으로 코드 검사하기</title><link href="https://deku.posstree.com/ko/code_quality/semgrep/" rel="alternate" type="text/html" title="[Code Quality] Semgrep을 사용하여 정규식으로 코드 검사하기"/><published>2024-12-18T00:00:00+09:00</published><updated>2025-01-11T12:45:15+09:00</updated><id>https://deku.posstree.com/code_quality/semgrep-ko</id><content type="html" xml:base="https://deku.posstree.com/code_quality/semgrep/"><![CDATA[<div id="contents_list"><h2 id="section">목차</h2><ul><li><a href="#%EB%AA%A9%EC%B0%A8">목차</a></li><li><a href="#%EA%B0%9C%EC%9A%94">개요</a></li><li><a href="#semgrep">Semgrep</a></li><li><a href="#semgrep-%EC%84%A4%EC%B9%98">Semgrep 설치</a></li><li><a href="#semgrep-%EA%B7%9C%EC%B9%99-%EC%84%A4%EC%A0%95">Semgrep 규칙 설정</a></li><li><a href="#semgrep-%EC%8B%A4%ED%96%89">Semgrep 실행</a></li><li><a href="#github-actions">GitHub Actions</a></li><li><a href="#%EC%99%84%EB%A3%8C">완료</a></li></ul></div><h2 id="개요">개요</h2><p>개발을 할 때, 코드의 품질을 높이기 위해 Lint와 같은 정적 분석 도구를 사용하곤 합니다. 하지만 정적 분석 툴은 일반적인 규칙만 제공하지 모든 규칙을 제공하지 않습니다. 그래서 정적 분석툴이 제공하지 않는 규칙을 코드 검사에 추가하고 싶을 때는, Lint의 커스텀 규칙을 추가해서 사용하곤 합니다.</p><ul><li><a href="https://eslint.org/docs/latest/extend/custom-rules" rel="nofollow noreferrer" target="_blank">ESLint Custom Rules</a></li></ul><p>이렇게 추가한 커스텀 규칙은 Lint의 대상이 되는 코드만 검사가 가능하지만 주석과 같은 부분은 검사를 하지 못하는 경우가 있습니다. 이런 경우 <code class="language-plaintext highlighter-rouge">Semgrep</code>을 사용하여 정규식을 통해 커스텀 규칙을 만들 수 있습니다.</p><h2 id="semgrep">Semgrep</h2><p><code class="language-plaintext highlighter-rouge">Semgrep</code>은 코드의 안전성, 품질, 스타일을 자동으로 검사하고 개선하기 위한 정적 분석 도구입니다. 주로 소스 코드를 분석하여 보안 취약점, 버그, 코드 품질 문제를 찾아내는 데 사용됩니다.</p><ul><li>Semgrep: <a href="https://github.com/semgrep/semgrep" rel="nofollow noreferrer" target="_blank">https://github.com/semgrep/semgrep</a></li></ul><p><code class="language-plaintext highlighter-rouge">Semgrep</code>은 사용자 정의 규칙을 정규식 패턴으로 작성할 수 있는데, 이를 사용하면 Lint와 같은 정적 분석 도구로는 검사하기 어려운 부분을 검사할 수 있습니다.</p><ul><li><a href="https://semgrep.dev/docs/writing-rules/rule-ideas" rel="nofollow noreferrer" target="_blank">https://semgrep.dev/docs/writing-rules/rule-ideas</a></li></ul><p>이번 블로그 포스트에서는 <code class="language-plaintext highlighter-rouge">Semgrep</code>을 사용하여 정규식으로 코드를 검사하는 방법을 알아보겠습니다.</p><h2 id="semgrep-설치">Semgrep 설치</h2><p><code class="language-plaintext highlighter-rouge">Semgrep</code>은 파이썬에서 동작하므로, 기본적으로 파이썬이 설치되어있어야 합니다. 각 OS에 파이썬을 설치하는 방법은 생략하도록 하겠습니다.</p><p><code class="language-plaintext highlighter-rouge">Semgrep</code>은 파이썬 패키지로 설치할 수 있습니다. <code class="language-plaintext highlighter-rouge">Semgrep</code>을 설치하기 위해서 다음 명령어를 실행합니다.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>semgrep
</code></pre></div></div><p>설치하였다면, 다른 곳에서도 사용할 수 있도록 <code class="language-plaintext highlighter-rouge">requirements.txt</code>을 생성합니다.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip freeze <span class="o">&gt;</span> requirements.txt
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">requirements.txt</code>을 열면 다음과 같은 내용이 추가된 것을 확인할 수 있습니다.</p><div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">semgrep==</span><span class="mf">1.97</span><span class="err">.</span><span class="mi">0</span><span class="w">
</span></code></pre></div></div><p>이 <code class="language-plaintext highlighter-rouge">requirements.txt</code>을 활용하여, 다른 곳에서 <code class="language-plaintext highlighter-rouge">Semgrep</code>을 설치할 때 다음 명령어를 사용하면 됩니다.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="semgrep-규칙-설정">Semgrep 규칙 설정</h2><p>이제 <code class="language-plaintext highlighter-rouge">Semgrep</code>을 사용하여 정규식으로 코드를 검사하기 위해 코드 규칙을 작성해 보겠습니다. 먼저, <code class="language-plaintext highlighter-rouge">code-rules.yaml</code> 파일을 생성하고 다음과 같은 내용을 작성합니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">rules</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">id</span><span class="pi">:</span> <span class="s">missing-param-description</span>
    <span class="na">severity</span><span class="pi">:</span> <span class="s">ERROR</span>
    <span class="na">message</span><span class="pi">:</span> <span class="s">【Comment error】 Add correct comment.</span>
    <span class="na">languages</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">javascript</span>
      <span class="pi">-</span> <span class="s">typescript</span>
    <span class="na">patterns</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">pattern-regex</span><span class="pi">:</span> <span class="s">\*\s*@.*-\s*(\n|\r\n|$)</span>
</code></pre></div></div><p>이 규칙은 다음과 같은 내용을 검사합니다.</p><p>❌ Incorrect</p><p>다음과 같이 주석을 작성하지 않은체 <code class="language-plaintext highlighter-rouge">-</code>을 남겨둔 경우, 에러가 발생합니다.</p><div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/**
   * Add two numbers
   * @param {number} a - number for addition
   * @param {number} b -
   * @returns {number}
   */</span>
</code></pre></div></div><p>✅ Correct</p><p>다음과 같이 모든 주석이 작성되어 있는 경우, 에러가 발생하지 않습니다.</p><div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/**
   * Add two numbers
   * @param {number} a - number for addition
   * @param {number} b - number for addition
   * @returns {number}
   */</span>
</code></pre></div></div><h2 id="semgrep-실행">Semgrep 실행</h2><p>이제 <code class="language-plaintext highlighter-rouge">Semgrep</code>을 사용하여 코드를 검사해보겠습니다. 다음 명령어를 실행하면, <code class="language-plaintext highlighter-rouge">Semgrep</code>이 코드를 검사하고 결과를 출력합니다.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>semgrep <span class="nt">--config</span><span class="o">=</span>code-rules.yaml <span class="nt">--error</span>
</code></pre></div></div><p>이 명령어를 실행하면 다음과 같은 결과를 확인할 수 있습니다.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
┌──── ○○○ ────┐
│ Semgrep CLI │
└─────────────┘


Scanning 7035 files <span class="o">(</span>only git-tracked<span class="o">)</span> with 1 Code rule:

  CODE RULES
  Scanning 5089 files.

  SUPPLY CHAIN RULES

  No rules to run.


  PROGRESS

  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:00


┌──────────────────┐
│ 93 Code Findings │
└──────────────────┘

    apps/sample/view/index.ts
   ❯❯❱ missing-param-description
          【Comment error】 Add correct comment.

           12┆ <span class="k">*</span> @param <span class="o">{</span>Params<span class="o">}</span> params -
           13┆ <span class="k">*</span> @return <span class="o">{</span>number<span class="o">}</span>
...
</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="github-actions">GitHub Actions</h2><p>이렇게 설정한 <code class="language-plaintext highlighter-rouge">Semgrep</code>을 사용하여 GitHub Actions에서 코드를 검사할 수 있습니다. 다음과 같이 <code class="language-plaintext highlighter-rouge">.github/workflows/semgrep.yml</code> 파일을 생성하고 다음과 같은 내용을 작성합니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Check code by Semgrep</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">semgrep</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Check code by Semgrep</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-python@v5</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">python-version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.13'</span>
          <span class="na">cache</span><span class="pi">:</span> <span class="s1">'</span><span class="s">pip'</span>
      <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span> <span class="s">pip install -r requirements.txt</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run Semgrep</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">semgrep --config=code-rules.yaml --error</span>
</code></pre></div></div><p>이제 GitHub Actions에서 PR을 생성하면 다음과 같은 에러가 발생하는 것을 확인할 수 있습니다.</p><div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Run semgrep <span class="nt">--config</span><span class="o">=</span>code-rules.yaml <span class="nt">--error</span>
METRICS: Using configs from the Registry <span class="o">(</span>like <span class="nt">--config</span><span class="o">=</span>p/ci<span class="o">)</span> reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use <span class="s2">"--metrics=off"</span><span class="nb">.</span>
Using configs only from <span class="nb">local </span>files <span class="o">(</span>like <span class="nt">--config</span><span class="o">=</span>xyz.yml<span class="o">)</span> does not <span class="nb">enable </span>metrics.

More information: https://semgrep.dev/docs/metrics



┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 7034 files tracked by git with 1 Code rule:
  Scanning 5087 files.


┌──────────────────┐
│ 93 Code Findings │
└──────────────────┘

    apps/agencyTool/src/feature/AdminStaffDetailDialog/controller/actions/initialize/index.ts
   ❯❯❱ missing-param-description
          【Comment error】 Add correct comment.

           12┆ <span class="k">*</span> @param <span class="o">{</span>Params<span class="o">}</span> params -
           13┆ <span class="k">*</span> @return <span class="o">{</span>number<span class="o">}</span>
...
</code></pre></div></div><h2 id="완료">완료</h2><p>이것으로 <code class="language-plaintext highlighter-rouge">Semgrep</code>을 사용하여 정규식으로 코드를 검사하는 방법을 알아보았습니다. <code class="language-plaintext highlighter-rouge">Semgrep</code>을 사용하면 정적 분석 도구로는 검사하기 어려운 부분을 검사할 수 있습니다.</p><p>코드 리뷰에서 반복적으로 동일한 문제를 지적하고 있다면, 우선 ESLint와 같은 정적 분석 도구에서 그 문제에 관한 규칙이 있는지 찾아보고, 있는 경우 그 규칙을 추가합니다.</p><p>만약, 그 규칙이 없고 해당 문제가 정형화된 패턴을 가지고 있다면, <code class="language-plaintext highlighter-rouge">Semgrep</code>을 사용하여 정규식으로 코드를 검사하는 방법을 사용해보세요.</p><p>이 블로그 포스트가 <code class="language-plaintext highlighter-rouge">Semgrep</code>을 사용하여 코드 품질을 향상시키는데 도움이 되었으면 좋겠습니다.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="code_quality"/><summary type="html"><![CDATA[Semgrep을 사용하면 정규식으로 코드를 검사하여 코드 품질을 향상시키는 방법에 대해서 알아봅시다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/code_quality/semgrep/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/code_quality/semgrep/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ko"><title type="html">사회적 자본과 전문가</title><link href="https://deku.posstree.com/ko/essay/social-capital-and-experts/" rel="alternate" type="text/html" title="사회적 자본과 전문가"/><published>2024-12-05T00:00:00+09:00</published><updated>2025-01-23T21:08:22+09:00</updated><id>https://deku.posstree.com/essay/social-capital-and-experts-ko</id><content type="html" xml:base="https://deku.posstree.com/essay/social-capital-and-experts/"><![CDATA[<p>한가지 기술과 방법론만으로 전문가가 되기가 어려운 세상이 되었다. 그래서 전문가가 되기 위해서는 새로운 기술과 방법론 등을 실천해 보고, 좋은 점과 나쁜점을 경험해가면서 성장해야 한다.</p><p>새로운 기술이나 방법론을 배우고 발전하기 위한 가장 좋은 방법은 회사에 새로운 기술과 방법론을 현재 회사에 적용해 보는 것이다. 하지만 새로운 기술을 회사에 적용하거나 팀원들과 함께 실천하는 것은 실패할 때가 많다. 대부분의 이유는 내가 제안하는 새로운 기술에 문제가 있어서가 아니다.</p><p>팀에서 새로운 무언가를 도입할 때, 우리는 기술적인 측면만 보고 사회적 측면을 고려하지 않는다. 팀원들이 나를 좋아하지 않고, 나도 팀원들이 마음에 들지 않는 상태에서 아무리 좋은 기술을 제안해도 받아들여지지 않는다.</p><p>설령 새로운 기술이나 방법론을 나 혼자 사용하려해도, 상사가 그걸보고 반대한다면 그를 설득해야 한다. 혼자 실천을 했다고 해도 모르는 것이 생기면 주변에 물어볼 수 있어야 하지만 다른 팀원들이 실천을 하고 있지 않기 때문에 물어볼 수도 없다. 그래서 사회적 측면을 고려하지 않은 새로운 기술 습득으로는 실력이 늘릴 수 없다.</p><p>이처럼 새로운 기술을 도입할 때, 그 기술에 장단점뿐만 아니라 사회적 자본과 사회적 기술을 고려해야 한다.</p><p>사회적 자본은 사회적 관계를 통해 얻는 자원으로써 신뢰, 사회 연결망, 상호 작용, 사회적 기술 등이 있다. 사회적 자본이 높으면 사회적 관계를 통해 더 많은 자원을 얻을 수 있다. 즉, 사회적 자본이 높으면 새로운 기술을 도입도 새로운 기술 습득도 쉬워진다.</p><p>사회적 기술은 사회적 상황에서 효과적으로 행동하는 능력을 말한다. 사회적 기술은 인사하기, 물어보기와 같은 마이크로 인터랙션부터 도움 받기, 피드백 주고 받기, 영향력 미치기, 가르치고 배우기, 위임하기 등이 있다.</p><p>사회적 기술과 사회적 자본을 최대한 활용하여 새로운 기술 도입을 시도해야, 내가 제안하는 새로운 기술이 받아들여지기 쉬워진다. 이렇게 내가 제안한 기술이 받아들여진다면, 물어볼 수 있고, 도움을 받을 수 있어서 나의 기술 실력도 늘게 된다.</p><p>응용통계학자 출신인 존 가트맨이 쓴 신뢰의 과학 (<a href="https://openlibrary.org/books/OL25004197M/The_science_of_trust" rel="nofollow noreferrer" target="_blank">The Science of Trust (John Mordecai Gottman. 2011. The Science of Trust: Emotional Attunement for Couples. W. W. Norton &amp; Company.)</a>)이라는 책에서 다음과 같은 연구 결과가 나온다.</p><blockquote><p>신뢰가 깨져 있는 맞벌이 부부가 있었습니다. 하루는 남편이 일찍 퇴근했습니다. 싱크대에 그릇이 쌓여 있는 걸 보고는 남편은 웬일인지 설거지를 합니다. 여기까지를 몰래 카메라로 촬영해서 제삼자에게 보여주면 대부분 남편이 선의의 행동을 했다고 평가를 내립니다. 반전은 부인이 집에 돌아오면서부터 입니다. 부인은 남편에게 화를 냅니다. “집안일을 제대로 안 한다고 항의하려는거냐”, “나보고 좀 이렇게 하라는 뜻이냐” 등등.</p></blockquote><p>존 가트맨은 책에서 이 상황을 신뢰가 깨져 있는 상태에서는 어떤 행동을 해도 악의적으로 보인다라고 설명했다.</p><p>우리 주변에서도 이런 상황을 자주 찾아 볼 수 있다. 팀장과 팀원이 신뢰가 깨진 상태에서 팀장이 선의로 팀원들에게 책을 선물한다. 그러면 팀원들은 팀장의 행동을 악의적으로 느끼고, “내가 이런 부분이 부족하니 공부하라는 건가? 자기도 잘 모르면서…“라고 생각할 수 있다.</p><p>신뢰도 사회적 연결망도 사회적 자본의 일종이다. 사회적 자본은 사회적 기술을 기반으로 하기 때문에, 사회적 자본이 좋은 사람들이 통상 사회적 기술이 뛰어나다. 여기서 소개한 예처럼 사회적 자본이 없는 상황에서는 선의의 제안(기술 제안)을 해도 악의적으로 받아들여지므로 선의의 제안은 받아들여지지 않는다.</p><p>그래서 전문가는 도메인 지식이 뛰어날 뿐만 아니라 사회적 자본과 사회적 기술도 뛰어나다. 벨 연구소에서 ‘뛰어난 연구자’의 특성에 대한 연구를 실행했는데, 뛰어난 연구자는 같은 부탁을 해도 훨씬 더 짧은 시간 안에 다른 사람으로부터 도움을 받았다고 한다. 즉, 전문가는 도메인 지식이 뛰어날 뿐만 아니라 사회적 자본중 하나인 사회적 연결망 또한 뛰어나다라는 것이다.</p><p>소프트웨어 공학에서 이뤄진 연구도 비슷한 결과를 냈다. 뛰어난 소프트웨어 개발자일수록 타인과 인터랙션에 더 많은 시간을 쓰며 초보 개발자들에게 기술적인 조언뿐만 아니라 사회적 측면이 포함된 조언을 하는 것으로 들어났다.</p><ul><li><a href="https://www.cambridge.org/core/books/abs/cambridge-handbook-of-expertise-and-expert-performance/expertise-in-software-design/04E88E182D83E956AB5582CA846AFF73" rel="nofollow noreferrer" target="_blank">Thomas R. Riedl, Julian S. Weitzenfeld, Jared T. Freeman, Gary A. Klein, &amp; John Musa. (1991). What we have learned about software engineering expertise. In SEI conference on Software Engineering Education (pp. 1-12). Pittsburgh, PA: Software Engineering Institute.</a></li><li><a href="https://www.deepdyve.com/lp/american-psychological-association/interaction-of-social-skill-and-general-mental-ability-on-job-9c0mAvua8k" rel="nofollow noreferrer" target="_blank">Gerald R. Ferris, L. A. Witt, &amp; Wayne A. Hochwater. (2001). Interaction of social skill and general mental ability on job performance and salary. Journal of Applied Psychology, 86(6), 1075-1082.</a></li></ul><p>뛰어난 개발자들은 약 70%가 동료와의 협력을 언급하는 반면, 실력이 그저 그런 개발자들은 20%도 안되는 사람들만이 동료와의 협력을 언급했다고 한다.</p><ul><li><a href="https://pubmed.ncbi.nlm.nih.gov/9806013/" rel="nofollow noreferrer" target="_blank">Sabine Sonnentag. (1995). Expertise in professional software design: A process study. Journal of Applied Psychology.</a></li></ul><p>그럼 왜 우리는 전문가를 이야기할 때, 사회적 자본과 사회적 기술에 대해서 이야기하지 않는 것일까? 이는 전문성에 대한 잘못된 인식과 이를 바탕으로 설계된 교육 시스템 때문이다.</p><blockquote><p>기존 전문성 연구들은 통상 연구비를 낮추고 변수를 줄이기 위해서도 개인을 골방에 넣고 그의 독자적 행동과 선택을 연구했습니다. 이런 연구에서 나온 전문가, 비전문가의 차이로 전문가 이미지가 형성되었고, 교육 과정도 거기에 기반해 짜여진 것이 아직도 많습니다.</p></blockquote><p>이런 연구들은 전문가의 사회적 자본과 기술은 고려하지 않고 전문가 한 사람만 집중하였으며, 그 사람이 가진 기술과 지식만을 고려했다. 하지만 최근 연구에서는 전문가에게 있어 사회적 자본과 기술이 중요하다고 말하고 있다.</p><blockquote><p>예전에는 소프트웨어 개발 전문성과 사회성은 별개로 치부되어 “프로그래밍 실력은 좋은데 의사소통 능력은 부족하다”든가 하는 이야기를 했다면, 이제는 프로그래밍을 잘한다는 정의 안에 의사소통 능력을 그 일부로 보게 된 겁니다.</p></blockquote><p>하지만 우리는 최근 연구를 기반으로하는 교육을 받으면서 성장하지 못했다. 현재 교육 시스템도 최근 연구를 반영하고 있지 않다. 그래서 우리는 여전히 기존 인식을 바꾸지 못한체 전문가가 되기 위해서 사회적 자본과 사회적 기술없이 해당 도메인 지식만을 배우려 하고 있다. 그리고 사회적 자본과 기술이 없는 상황에서 도메인 지식만 높으면 해당 지식의 확산과 성공에 오히려 장애가 된다.</p><p>다행히도 사회적 기술도 훈련을 통해 개선할 수 있다. 가장 간단한 방법은 주변 사람들과 매일 주고 받는 인사, 대화, 물어보기 등 일상에서 소소하고 빈번하게 발생하는 마이크로 인터랙션을 신경쓰는 것이다. 마이크로 인터랙션을 기록하고 복기하며 다른 인터랙션에 어떻게 적용할지 고민해 본다.</p><p>이런 마이크로 인터렉션을 통해 사회적 기술을 훈련했다면, 그 다음으로 도움 받기, 피드백 주고 받기, 영향력 미치기, 가르치고 배우기, 위임하기 등 한 단계 높은 사회적 기술을 수행하면서 사회적 자본을 쌓아 나가면 된다.</p><p>새로운 기술을 도입할 때, 이 질문을 해보자. “내 팀원들이 나를 좋아하는가?” 이 질문에 “No”라고 대답한다면, 새로운 기술을 도입하기 힘들 것이다. 반대로 “Yes”라고 대답한다면, 새로운 기술을 도입하기 쉬울 것이다. 사회적 기술을 통해 팀원들과 신뢰를 쌓아나가고, 전문가가 되기 위해 새로운 기술과 방법론에만 집중하지 말고 사회적 자본을 쌓는 것에도 집중하자. 그러면 전문가가 되는 길이 더 쉬워질 것이다.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="essay"/><summary type="html"><![CDATA[전문가가 되기 위해서는 회사에서 새로운 기술이나 방법론을 사용해봐야 한다. 하지만 내가 제안한 새로운 기술은 제대로 도입되지 않는다. 내가 제안한 새로운 기술이 도입되지 않는 이유는 무엇이고 새로운 기술을 쉽게 도입하기 위해서는 어떤 방법이 있는가에 대해서 알아보자.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/essay/2024/social-capital-and-experts/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/essay/2024/social-capital-and-experts/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ko"><title type="html">효과적인 직원 교육을 위한 강사 선정 방법</title><link href="https://deku.posstree.com/ko/essay/effective-employee-training/" rel="alternate" type="text/html" title="효과적인 직원 교육을 위한 강사 선정 방법"/><published>2024-11-14T00:00:00+09:00</published><updated>2024-12-03T20:54:19+09:00</updated><id>https://deku.posstree.com/essay/effective-employee-training-ko</id><content type="html" xml:base="https://deku.posstree.com/essay/effective-employee-training/"><![CDATA[<p>대부분의 기업들이 직원 교육에 많은 비용을 투자한다. 직원들이 성장할수록 회사도 성장할 수 있기 때문이다. 하지만 많은 기업들이 교육을 통해서 실질적으로 큰 효과를 얻지 못하고 있다. 왜 기업들은 교육에 많은 비용을 투자하지만, 실제로 큰 효과를 얻지 못하는 걸까?</p><p>기업들은 교육을 통해 직원들이 성장하고 그 성장이 회사에 영향을 주기를 바라면서 교육을 실시한다. 하지만, 대부분의 기업들이 올해 어떤 교육을 몇명이 수료했는지 확인하는 걸로 교육에 대한 성과를 측정한다. 직원들이 실질적으로 얼마나 도움을 받았는지, 얼마나 성장했는지는 측정하지 않는다.</p><p>기업에서의 교육, 훈련 효과에 대한 메타분석 연구에 따르면 대부분의 교육은 6개월 정도 지나면 효과가 거의 사라진다고 한다. 교육을 수료한 시점에서는 직원들의 만족도도 높고 업무에 굉장히 도움이 된다고 느낌을 받지만, 실제로는 큰 효과가 없다.</p><p>이런 문제가 발생하는 가장 큰 이유는 교육을 하는 강사에 있다. 회사는 강사를 선택할 때, 주로 얼마나 많은 지식을 가지고 있는지를 고려하여 선정한다.</p><p>하지만, 존 해티의 연구 결과에 따르면 강사의 지식 수준의 효과는 0.09로 학업 성취도에 영향을 끼치는 150여개의 요인들 중에 135위에 그친다. 즉, 강사가 얼마나 많은 전문 지식을 가지고 있느냐는 학습 성취도에 거의 영향을 미치지 못한다.</p><blockquote><p>의료계의 연구를 보면, 전문가가 특정 수술법을 학생에게 가르칠 때, 의료적 지식, 무엇을 어떻게 해야 할지에 대한 행동 단계, 의사 결정 단계 등 자신이 해당 과제를 수행할 때 사용하는 지식중 <code class="language-plaintext highlighter-rouge">70%는 가르치지 않는다</code>는 연구 결과가 많다.</p></blockquote><p>의학이라는 전문 분야에서 전문가가 학생에게 가르칠 때에 사용하는 지식중 <code class="language-plaintext highlighter-rouge">70%는 가르치지 않는다</code>라는 연구 결과가 많다.</p><p>흔히 뛰어난 선생은 해당 분야에 대해 많이 그리고 깊이 있는 지식을 가지고 있는 사람이라고 생각한다. 하지만 교육은 궁극적으로 학생이 <code class="language-plaintext highlighter-rouge">더 잘하게</code> 도와주는 것이 목표이기 때문에, 교육이라는 맥락하에서는 선생이 가진 지식은 크게 도움이 되지 않는다.</p><p>지식이 많은 사람이라고 해서 꼭 좋은 선생이라고 할 수 없으며 지식이 많은 사람에게 배웠다고 학생의 실력이 느는 것은 아니다.</p><blockquote><p>가르치는 능력을 인정받고 한 번 이상의 탁월한 교육상을 받은 사람임에도 그랬고, 되도록 단계나 지식을 빠짐없이 가르쳐 주라는 특별한 주문을 받았음에도 그러했습니다. 심지어는 수업이 끝나고 “혹시 빠트린 것이 있습니까” 하고 물은 후 그걸 추가해도 여전히 70% 정도는 빠트렸습니다.</p></blockquote><p>전문가, 탁월한 교육상을 받은 사람일지라도 학생에게 해당 기술을 성공적으로 해내기 위해 필요한 것의 30%만 가르쳐 놓고 자신은 다 가르쳤다고 생각한다는 것이다.</p><p>이 문제를 해결하기 위해서는 선생과 학생이 함께 노력해야 한다. 선생의 인지적 분석에 능숙한 정도가 학생들의 학업 성취도에 미치는 영향은 1.29이다. 즉, 이 인지적 분석 능력이 뛰어나는 선생이 잘 가르치는 것이다.</p><p>선생은 다음과 같이 메타인지를 높이는 노력을 할 수 있다.</p><blockquote><p>“내가 이 문제를 해결할 때 어떤 과정을 거치는 가”를 생각하며 자신의 머릿속을 관찰하고, 질문을 던지고 분석하는 것이다. 그리고 학생들이 이걸 배우면서 어떤 생각을 하는가를 직접 관찰하고 질문을 던지고 분석할 수 있다.</p></blockquote><p>학생은 이런 인지적 작업 분석을 잘하는 선생을 선택할 수 있다. 또 선생의 인지적 작업 분석을 돕기 위해 자기가 어떻게 이 문제를 풀었는지, 그 인지적 과정을 선생에게 알려주는 것도 매우 효과적인 방법이다. 또는 선생이 그 문제를 푼 인지적 과정을 알려달라고 요청할 수도 있다. 인지적 작업 분석에 대해서는 다음 글을 참고하면 도움이 될 것이다.</p><ul><li><a href="https://deku.posstree.com/ko/essay/cognitibe-task-analysis/" target="\_blank">인지적 작업 분석을 통한 전문가의 전문성 뽑아내기</a></li></ul><p>다른 사람을 가르치거나 배우는 자리에서 이런 부분을 생각하며 참여하면 학습 효과가 증가하는 것들을 확인할 수 있을 것이다. 회사는 단순히 강사가 지식을 전달하는 학습이 아니라, 강사와 직원이 함께 인지적 작업 분석을 통해 학습할 수 있는 환경을 만들어야 한다. 그렇지 않으면 교육에 투자한 비용 대비 큰 효과를 얻지 못할 것이다.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="essay"/><summary type="html"><![CDATA[많은 기업들이 직원 교육에 많은 비용을 투자한다. 하지만 실질적으로 큰 효과를 얻지 못하고 있다. 왜 기업들은 교육에 많은 비용을 투자하지만, 실제로 큰 효과를 얻지 못하는 걸까?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/essay/2024/effective-employee-training/background.webp"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/essay/2024/effective-employee-training/background.webp" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ko"><title type="html">[GitHub Actions] Reviewer 알림을 위한 Slack 메시지 보내기</title><link href="https://deku.posstree.com/ko/github_actions/send_slack_message_for_reviewer/" rel="alternate" type="text/html" title="[GitHub Actions] Reviewer 알림을 위한 Slack 메시지 보내기"/><published>2024-11-13T00:00:00+09:00</published><updated>2024-12-17T08:50:33+09:00</updated><id>https://deku.posstree.com/github_actions/send-slack-message-ko</id><content type="html" xml:base="https://deku.posstree.com/github_actions/send_slack_message_for_reviewer/"><![CDATA[<div id="contents_list"><h2 id="section">목차</h2><ul><li><a href="#%EB%AA%A9%EC%B0%A8">목차</a></li><li><a href="#%EA%B0%9C%EC%9A%94">개요</a></li><li><a href="#slack-%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0">Slack 앱 만들기</a></li><li><a href="#%EC%B1%84%EB%84%90-id">채널 ID</a></li><li><a href="#slack-github-action-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0">slack-github-action 사용하기</a></li><li><a href="#composite-action">Composite Action</a></li><li><a href="#reviewer-%EC%95%8C%EB%A6%BC">Reviewer 알림</a></li><li><a href="#%EB%A7%A4%EC%9D%BC-%EC%95%84%EC%B9%A8-%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%B0%9C%EC%86%A1">매일 아침 메시지 발송</a></li><li><a href="#%EC%99%84%EB%A3%8C">완료</a></li></ul></div><h2 id="개요">개요</h2><p>GitHub Actions를 사용하여 CI/CD를 구축하면, 빌드, 테스트가 성공 또는 실패했을 때 Slack으로 메시지를 보내고 싶을 때가 있습니다. 이번 블로그 포스트에서는 GitHub Actions를 사용하여 Slack 메시지를 보내는 방법에 대해 알아보겠습니다.</p><h2 id="slack-앱-만들기">Slack 앱 만들기</h2><p>Slack은 대화형 메시징 플랫폼임으로, 메시지를 받는다는 의미는 누군가가 메시지를 보냈다는 것을 의미합니다. 따라서 GitHub Actions를 사용하여 Slack 메시지를 보내기 위해서는 Slack 메시지를 보내는 Slack 앱을 만들어야 합니다.</p><p>우선 다음 링크를 클릭하여 <code class="language-plaintext highlighter-rouge">Slack API</code>에 접속합니다.</p><ul><li><a href="https://api.slack.com/" rel="nofollow noreferrer" target="_blank">https://api.slack.com/</a></li></ul><p>그럼 다음과 같은 화면을 확인할 수 있습니다.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/slack_api.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/slack_api.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/slack_api.png" alt="GitHub Actions Send Slack message - Slack API site"/></picture><p>오른쪽 상단에 있는 <code class="language-plaintext highlighter-rouge">Your apps</code>를 선택하여 앱 생성 화면으로 이동합니다.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app.png" alt="GitHub Actions Send Slack message - Create new Slack app"/></picture><p><code class="language-plaintext highlighter-rouge">Create New App</code>을 선택하여 새로운 앱을 생성합니다.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app_options.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app_options.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/create_new_app_options.png" alt="GitHub Actions Send Slack message - Create new Slack app options"/></picture><p>이때 <code class="language-plaintext highlighter-rouge">From scratch</code>를 선택하여 새로운 앱을 생성합니다.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_name_and_workspace.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_name_and_workspace.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_name_and_workspace.png" alt="GitHub Actions Send Slack message - Enter app name and workspace"/></picture><p>그런 다음 앱의 이름을 입력하고, 이 앱을 사용할 Slack의 Workspace를 선택하고 <code class="language-plaintext highlighter-rouge">Create App</code> 버튼을 클릭합니다.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_created.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_created.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/app_created.png" alt="GitHub Actions Send Slack message - App created"/></picture><p>그럼 위와 같이 앱이 잘 생성되는 것을 확인할 수 있습니다.</p><p>이제 이 앱에 메시지를 보낼 수 있는 권한을 설정할 필요가 있습니다. 앱 목록 화면에서 새로 만든 앱의 이름을 선택하여 앱 상세 페이지로 이동합니다.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions.png" alt="GitHub Actions Send Slack message - OAuth and Permissions"/></picture><p>그런 다음 왼쪽 메뉴에서 <code class="language-plaintext highlighter-rouge">OAuth &amp; Permissions</code> 메뉴를 선택하여 <code class="language-plaintext highlighter-rouge">OAuth &amp; Permissions</code> 화면으로 이동합니다.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_scopes.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_scopes.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_scopes.png" alt="GitHub Actions Send Slack message - OAuth and Permissions scopes"/></picture><p>조금 스크롤하여 <code class="language-plaintext highlighter-rouge">Scopes</code> 섹션에서 <code class="language-plaintext highlighter-rouge">Add an OAuth Scope</code> 버튼을 클릭한 후 <code class="language-plaintext highlighter-rouge">chat:write</code> 권한을 추가합니다.</p><p>마지막으로 <code class="language-plaintext highlighter-rouge">OAuth Tokens</code> 섹션으로 이동한 후, <code class="language-plaintext highlighter-rouge">Install to (workspace)</code> 버튼을 클릭하여 Slack 앱을 설치합니다.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_install_app.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_install_app.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_install_app.png" alt="GitHub Actions Send Slack message - OAuth and Permissions install app"/></picture><p>앱을 설치하고 나면 다음과 같이 <code class="language-plaintext highlighter-rouge">Bot User OAuth Access Token</code>이 생성되는 것을 확인할 수 있습니다.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_bot_user_oauth_access_token.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_bot_user_oauth_access_token.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/oauth_and_permissions_bot_user_oauth_access_token.png" alt="GitHub Actions Send Slack message - OAuth and Permissions Bot User OAuth Access Token"/></picture><p>이제 이렇게 만든 토큰을 <code class="language-plaintext highlighter-rouge">GitHub Actions</code>에서 사용하기 위해 <code class="language-plaintext highlighter-rouge">GitHub</code>의 <code class="language-plaintext highlighter-rouge">Secrets</code>에 저장해야 합니다. <code class="language-plaintext highlighter-rouge">Slack</code> 메시지를 발송하고 싶은 <code class="language-plaintext highlighter-rouge">GitHub</code> 저장소(Repository)로 이동합니다.</p><p>그 다음 <code class="language-plaintext highlighter-rouge">Settings &gt; Secrets and variables &gt; Actions</code> 메뉴로 클릭하여 <code class="language-plaintext highlighter-rouge">Actions secrets and variables</code> 페이지로 이동합니다.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/github_secrets_and_variables.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/github_secrets_and_variables.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/github_secrets_and_variables.png" alt="GitHub Actions Send Slack message - GitHub secrets and variables"/></picture><p>화면에 표시된 <code class="language-plaintext highlighter-rouge">Repository secrets</code>의 <code class="language-plaintext highlighter-rouge">New repository secret</code> 버튼을 클릭하고, <code class="language-plaintext highlighter-rouge">Name</code>에 <code class="language-plaintext highlighter-rouge">SLACK_BOT_TOKEN</code>을 입력하고, <code class="language-plaintext highlighter-rouge">Value</code>에 <code class="language-plaintext highlighter-rouge">Slack API</code> 사이트에서 만든 토큰을 입력한 후 <code class="language-plaintext highlighter-rouge">Add secret</code> 버튼을 클릭하여 저장합니다.</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="채널-id">채널 ID</h2><p><code class="language-plaintext highlighter-rouge">GitHub Actions</code>를 사용하여 Slack의 채널에 메시지를 보내기 위해서는 <code class="language-plaintext highlighter-rouge">CHANNEL_ID</code>가 필요합니다.</p><p><code class="language-plaintext highlighter-rouge">CHANNEL_ID</code>는 <code class="language-plaintext highlighter-rouge">Slack</code>에서 습득할 수 있습니다. 개인에게 직접 보내고 싶은 경우, 다음과 같이 개인 프로필에서 <code class="language-plaintext highlighter-rouge">Copy member ID</code>를 클릭하여 <code class="language-plaintext highlighter-rouge">CHANNEL_ID</code>를 얻을 수 있습니다.</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/copy_slack_member_channel_id.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/copy_slack_member_channel_id.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/copy_slack_member_channel_id.png" alt="GitHub Actions Send Slack message - Copy Slack member channel ID"/></picture><p>만약, 특정 채널에 메시지를 보내고 싶다면, <code class="language-plaintext highlighter-rouge">Open channel details</code>를 클릭하여 채널 상세 정보로 이동한 후,</p><picture><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/open_slack_channel_details.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/send_slack_message_for_reviewer/open_slack_channel_details.webp" type="image/webp"/><img src="/assets/images/category/github_actions/send_slack_message_for_reviewer/open_slack_channel_details.png" alt="GitHub Actions Send Slack message - Copy Slack channel ID"/></picture><p>하단에 표시된 <code class="language-plaintext highlighter-rouge">Channel ID</code>를 복사하여 사용하면 됩니다.</p><h2 id="slack-github-action-사용하기">slack-github-action 사용하기</h2><p><code class="language-plaintext highlighter-rouge">Slack</code>에서 공식으로 제공하는 <code class="language-plaintext highlighter-rouge">slack-github-action</code>을 사용하면 <code class="language-plaintext highlighter-rouge">GitHub Actions</code>에서 <code class="language-plaintext highlighter-rouge">Slack</code>으로 메시지를 보낼 수 있습니다.</p><ul><li>slack-github-action: <a href="https://github.com/slackapi/slack-github-action" rel="nofollow noreferrer" target="_blank">https://github.com/slackapi/slack-github-action</a></li></ul><p><code class="language-plaintext highlighter-rouge">GitHub Actions</code>에 다음과 같이 <code class="language-plaintext highlighter-rouge">slack-github-action</code>를 사용하도록 수정하면 <code class="language-plaintext highlighter-rouge">Slack</code>으로 메시지를 보낼 수 있습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Post to a Slack channel</span>
  <span class="na">id</span><span class="pi">:</span> <span class="s">slack</span>
  <span class="na">uses</span><span class="pi">:</span> <span class="s">slackapi/slack-github-action@v1.27.0</span>
  <span class="na">with</span><span class="pi">:</span>
    <span class="na">channel-id</span><span class="pi">:</span> <span class="s1">'</span><span class="s">CHANNEL_ID'</span>
    <span class="na">payload</span><span class="pi">:</span> <span class="pi">|</span>
      <span class="s">{</span>
        <span class="s">"text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",</span>
        <span class="s">"blocks": [</span>
          <span class="s">{</span>
            <span class="s">"type": "section",</span>
            <span class="s">"text": {</span>
              <span class="s">"type": "mrkdwn",</span>
              <span class="s">"text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"</span>
            <span class="s">}</span>
          <span class="s">}</span>
        <span class="s">]</span>
      <span class="s">}</span>
  <span class="na">env</span><span class="pi">:</span>
    <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.SLACK_BOT_TOKEN }}</span>

</code></pre></div></div><p>간단한 메시지를 발송할 때는 이 <code class="language-plaintext highlighter-rouge">slack-github-action</code>을 사용하면 편리하게 <code class="language-plaintext highlighter-rouge">Slack</code> 메시지를 보낼 수 있습니다.</p><h2 id="composite-action">Composite Action</h2><p>회사에서는 <code class="language-plaintext highlighter-rouge">slack-github-action</code>을 사용하지 않고, 다음과 같이 <code class="language-plaintext highlighter-rouge">Composite Action</code>을 사용하여 <code class="language-plaintext highlighter-rouge">Slack</code> 메시지를 보내는 방법을 사용하고 있습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Send</span><span class="nv"> </span><span class="s">Slack</span><span class="nv"> </span><span class="s">messages'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Send</span><span class="nv"> </span><span class="s">Slack</span><span class="nv"> </span><span class="s">messages'</span>

<span class="na">inputs</span><span class="pi">:</span>
  <span class="na">GITHUB_TOKEN</span><span class="pi">:</span>
    <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">GitHub</span><span class="nv"> </span><span class="s">token</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">use</span><span class="nv"> </span><span class="s">GitHub</span><span class="nv"> </span><span class="s">API'</span>
    <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span>
    <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Token</span><span class="nv"> </span><span class="s">for</span><span class="nv"> </span><span class="s">Slack</span><span class="nv"> </span><span class="s">bot'</span>
    <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">MESSAGES</span><span class="pi">:</span>
    <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">(JSON)</span><span class="nv"> </span><span class="s">Multiple</span><span class="nv"> </span><span class="s">users</span><span class="nv"> </span><span class="s">and</span><span class="nv"> </span><span class="s">multiple</span><span class="nv"> </span><span class="s">Slack</span><span class="nv"> </span><span class="s">messages'</span>
    <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>

<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Send Slack messages</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">github-token</span><span class="pi">:</span> <span class="s">${{ inputs.GITHUB_TOKEN }}</span>
        <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">const slackToken = process.env.SLACK_TOKEN</span>
          <span class="s">const messages = JSON.parse(Buffer.from(process.env.MESSAGES, 'base64').toString('utf-8'));</span>
          <span class="s">const channelIDs = {</span>
            <span class="s">'GITHUB_USER_NAME_1': 'USER_CHANNEL_ID_1',</span>
            <span class="s">'GITHUB_USER_NAME_2': 'USER_CHANNEL_ID_2',</span>
            <span class="s">'GITHUB_USER_NAME_2': 'USER_CHANNEL_ID_2',</span>
            <span class="s">'GITHUB_USER_NAME_3': 'USER_CHANNEL_ID_3',</span>
            <span class="s">'GITHUB_USER_NAME_3': 'USER_CHANNEL_ID_3',</span>
            <span class="s">'GITHUB_USER_NAME_4': 'USER_CHANNEL_ID_4',</span>
          <span class="s">}</span>

          <span class="s">for (const message of messages) {</span>
            <span class="s">const { userName, messages: blocks } = message</span>
            <span class="s">const channel = channelIDs[userName]</span>
            <span class="s">fetch('https://slack.com/api/chat.postMessage', {</span>
              <span class="s">method: 'POST',</span>
              <span class="s">headers: {</span>
                <span class="s">'Content-Type': 'application/json',</span>
                <span class="s">'Authorization': `Bearer ${slackToken}`,</span>
              <span class="s">},</span>
              <span class="s">body: JSON.stringify({</span>
                <span class="s">channel,</span>
                <span class="s">blocks,</span>
              <span class="s">})</span>
            <span class="s">})</span>
            <span class="s">.then(response =&gt; response.json())</span>
            <span class="s">.then(data =&gt; {</span>
              <span class="s">if (!data.ok) {</span>
                <span class="s">throw new Error(`Slack API error: ${data.error}`);</span>
              <span class="s">}</span>
              <span class="s">console.log('Message sent to Slack successfully');</span>
            <span class="s">})</span>
            <span class="s">.catch(error =&gt; {</span>
              <span class="s">console.error('Error sending message to Slack:', error);</span>
            <span class="s">});</span>
          <span class="s">}</span>
      <span class="na">env</span><span class="pi">:</span>
        <span class="na">SLACK_TOKEN</span><span class="pi">:</span> <span class="s">${{ inputs.SLACK_BOT_TOKEN }}</span>
        <span class="na">MESSAGES</span><span class="pi">:</span> <span class="s">${{ inputs.MESSAGES }}</span>

</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">Composite Action</code>을 사용하면 <code class="language-plaintext highlighter-rouge">GitHub Actions</code>에서 <code class="language-plaintext highlighter-rouge">Slack</code> 메시지를 보내는 부분을 공통화하여 사용할 수 있습니다. <code class="language-plaintext highlighter-rouge">Composite Action</code>에 대해서는 다음 링크를 참고해 주시기 바랍니다.</p><ul><li><a href="https://deku.posstree.com/ko/github_actions/composite-action/" target="_blank">[GitHub Actions] Composite Action를 사용하여 GitHub Action 중복 제거하기</a></li></ul><h2 id="reviewer-알림">Reviewer 알림</h2><p>이렇게 만든 <code class="language-plaintext highlighter-rouge">Composite Action</code>을 사용하여 <code class="language-plaintext highlighter-rouge">GitHub Actions</code>를 사용하여 Reviewer에 지정된 경우 <code class="language-plaintext highlighter-rouge">Slack</code> 메시지를 보내는 방법에 대해 알아보겠습니다.</p><p><code class="language-plaintext highlighter-rouge">GitHub Actions</code>에서는 Reviewer에 지정된 경우, Slack의 개인 채널로 메시지를 보내기 위해 다음과 같이 <code class="language-plaintext highlighter-rouge">GitHub Actions</code>를 작성할 수 있습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">[Slack]</span><span class="nv"> </span><span class="s">Reviewer</span><span class="nv"> </span><span class="s">assigned'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">review_requested</span><span class="pi">]</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">notify_for_reviewer</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout Repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Make Slack messages</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">make-slack-messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github-token</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">const prNumber = context.payload.pull_request.number;</span>
            <span class="s">const prTitle = context.payload.pull_request.title;</span>
            <span class="s">const prLink = context.payload.pull_request.html_url;</span>
            <span class="s">const { data: reviewers } = await github.rest.pulls.listRequestedReviewers({</span>
              <span class="s">owner: context.repo.owner,</span>
              <span class="s">repo: context.repo.repo,</span>
              <span class="s">pull_number: prNumber,</span>
            <span class="s">});</span>

            <span class="s">let slackMessages = []</span>
            <span class="s">const reviewerLogins = reviewers.users.map(user =&gt; user.login);</span>
            <span class="s">for (const userName of reviewerLogins) {</span>
              <span class="s">const message = `*Reviewer notification*\n\nYou are assigned to new PR.\n\n- title: ${prTitle}\n- link: ${prLink}`</span>
              <span class="s">slackMessages.push({</span>
                <span class="s">userName,</span>
                <span class="s">messages: [</span>
                  <span class="s">{</span>
                    <span class="s">type: 'section',</span>
                    <span class="s">text: {</span>
                      <span class="s">type: 'mrkdwn',</span>
                      <span class="s">text: message,</span>
                    <span class="s">}</span>
                  <span class="s">}</span>
                <span class="s">]</span>
              <span class="s">})</span>
            <span class="s">}</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Send Slack messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/send_slack_messages</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.SLACK_BOT_TOKEN }}</span>
          <span class="na">MESSAGES</span><span class="pi">:</span> <span class="s">${{ steps.make-slack-messages.outputs.MESSAGES }}</span>

</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><p>이 <code class="language-plaintext highlighter-rouge">GitHub Actions</code>를 좀 더 자세히 살펴보도록 하겠습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">[Slack]</span><span class="nv"> </span><span class="s">Reviewer</span><span class="nv"> </span><span class="s">assigned'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">review_requested</span><span class="pi">]</span>
<span class="nn">...</span>

</code></pre></div></div><p>이 <code class="language-plaintext highlighter-rouge">GitHub Actions</code>는 <code class="language-plaintext highlighter-rouge">pull_request</code> 이벤트의 <code class="language-plaintext highlighter-rouge">review_requested</code>를 사용하여 PR에 Reviewer가 지정된 경우에만 실행됩니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout Repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
<span class="nn">...</span>

</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">Composite Action</code>는 <code class="language-plaintext highlighter-rouge">Git</code>에서 관리되기 때문에, <code class="language-plaintext highlighter-rouge">actions/checkout@v4</code>를 사용하여 레포지토리를 체크아웃해야 합니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Make Slack messages</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">make-slack-messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github-token</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">const prNumber = context.payload.pull_request.number;</span>
            <span class="s">const prTitle = context.payload.pull_request.title;</span>
            <span class="s">const prLink = context.payload.pull_request.html_url;</span>
            <span class="s">const { data: reviewers } = await github.rest.pulls.listRequestedReviewers({</span>
              <span class="s">owner: context.repo.owner,</span>
              <span class="s">repo: context.repo.repo,</span>
              <span class="s">pull_number: prNumber,</span>
            <span class="s">});</span>

            <span class="s">let slackMessages = []</span>
            <span class="s">const reviewerLogins = reviewers.users.map(user =&gt; user.login);</span>
            <span class="s">for (const userName of reviewerLogins) {</span>
              <span class="s">const message = `*Reviewer notification*\n\nYou are assigned to new PR.\n\n- title: ${prTitle}\n- link: ${prLink}`</span>
              <span class="s">slackMessages.push({</span>
                <span class="s">userName,</span>
                <span class="s">messages: [</span>
                  <span class="s">{</span>
                    <span class="s">type: 'section',</span>
                    <span class="s">text: {</span>
                      <span class="s">type: 'mrkdwn',</span>
                      <span class="s">text: message,</span>
                    <span class="s">}</span>
                  <span class="s">}</span>
                <span class="s">]</span>
              <span class="s">})</span>
            <span class="s">}</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
<span class="s">...</span>

</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">actions/github-script@v7</code>를 사용하여 Reviewer에게 메시지를 보내기 위한 메시지를 만듭니다. PR의 제목, 링크를 가져와서 Reviewer용 메시지를 만듭니다.</p><div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Reviewer notification
You are assigned to new PR.
- title: PR title
- link: https://...
</code></pre></div></div><p>이 메시지는 PR에 지정된 Reviewers 모두에게 메시지를 보내게 됩니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
            <span class="s">const reviewerLogins = reviewers.users.map(user =&gt; user.login);</span>
            <span class="s">for (const userName of reviewerLogins) {</span>
<span class="nn">...</span>

</code></pre></div></div><p>이렇게 만든 메시지를 <code class="language-plaintext highlighter-rouge">JSON</code>을 그대로 전달하면 문제가 발생합니다. 그래서 <code class="language-plaintext highlighter-rouge">Buffer</code>를 사용하여 <code class="language-plaintext highlighter-rouge">base64</code>로 인코딩하여 <code class="language-plaintext highlighter-rouge">core.setOutput</code>을 사용하여 <code class="language-plaintext highlighter-rouge">MESSAGES</code>에 저장해서 전달하도록 했습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
<span class="nn">...</span>

</code></pre></div></div><p>마지막은 이전에 만든 <code class="language-plaintext highlighter-rouge">Composite Action</code>을 사용하여 <code class="language-plaintext highlighter-rouge">Slack</code> 메시지를 보냈습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Send Slack messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/send_slack_messages</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.SLACK_BOT_TOKEN }}</span>
          <span class="na">MESSAGES</span><span class="pi">:</span> <span class="s">${{ steps.make-slack-messages.outputs.MESSAGES }}</span>
<span class="nn">...</span>

</code></pre></div></div><h2 id="매일-아침-메시지-발송">매일 아침 메시지 발송</h2><p>리뷰어가 Slack 메시지를 받은 후, PR을 리뷰하는 경우도 있지만, 바빠서 PR을 리뷰하지 못하는 경우도 있습니다. 이런 경우, 매일 아침에 리뷰어에게 메시지를 보내어 PR을 리뷰하도록 유도할 수 있습니다.</p><p>다음과 같이 <code class="language-plaintext highlighter-rouge">GitHub Actions</code>를 만들면, 평일 아침(월~금) 9시 30분(일본 시간 기준)에 리뷰어에게 메시지를 보낼 수 있습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">[Slack]</span><span class="nv"> </span><span class="s">Every</span><span class="nv"> </span><span class="s">weekday</span><span class="nv"> </span><span class="s">at</span><span class="nv"> </span><span class="s">9:30</span><span class="nv"> </span><span class="s">AM'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span> <span class="s1">'</span><span class="s">30</span><span class="nv"> </span><span class="s">0</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">1-5'</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">notify_reviewers_every_weekday</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Make Slack messages</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">make-slack-messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github-token</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">const userList = [</span>
              <span class="s">'GITHUB_USER_NAME_1',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_4',</span>
            <span class="s">]</span>
            <span class="s">const escapeForSlack = (text) =&gt; {</span>
              <span class="s">return text</span>
                <span class="s">.replace(/&amp;/g, '&amp;amp;')   // &amp; → &amp;amp;</span>
                <span class="s">.replace(/&lt;/g, '&amp;lt;')    // &lt; → &amp;lt;</span>
                <span class="s">.replace(/&gt;/g, '&amp;gt;')    // &gt; → &amp;gt;</span>
                <span class="s">.replace(/"/g, '&amp;quot;')  // " → &amp;quot;</span>
                <span class="s">.replace(/'/g, '&amp;#39;');  // ' → &amp;#39;</span>
            <span class="s">}</span>

            <span class="s">// Get All PRs</span>
            <span class="s">const prList = []</span>
            <span class="s">let pageIndex = 1</span>
            <span class="s">let hasMorePages = true</span>
            <span class="s">while (hasMorePages) {</span>
              <span class="s">const result = await github.rest.pulls.list({</span>
                <span class="s">owner: context.repo.owner,</span>
                <span class="s">repo: context.repo.repo,</span>
                <span class="s">state: 'open',</span>
                <span class="s">per_page: 100,</span>
                <span class="s">page: pageIndex,</span>
              <span class="s">})</span>
              <span class="s">if (result.data.length &gt; 0) {</span>
                <span class="s">prList.push(...result.data)</span>
                <span class="s">pageIndex += 1</span>
              <span class="s">} else {</span>
                <span class="s">hasMorePages = false</span>
              <span class="s">}</span>
            <span class="s">}</span>
            <span class="s">let slackMessages = []</span>
            <span class="s">for (const userName of userList) {</span>
              <span class="s">const reviewerPRList = prList.filter(pr =&gt; pr.user.login !== 'dependabot[bot]' &amp;&amp;</span>
                <span class="s">pr.requested_reviewers.some(reviewer =&gt; reviewer.login === userName)</span>
              <span class="s">);</span>
              <span class="s">if (reviewerPRList.length &gt; 0) {</span>
                <span class="s">let message = '*Reviewer notification*\n\nYou have assigned PRs. Please review when you have time.\n'</span>
                <span class="s">reviewerPRList.forEach(pr =&gt; {</span>
                  <span class="s">message += `\n- &lt;${pr.html_url}|${escapeForSlack(pr.title)}&gt;`;</span>
                <span class="s">});</span>
                <span class="s">slackMessages.push({</span>
                  <span class="s">userName,</span>
                  <span class="s">messages: [</span>
                    <span class="s">{</span>
                      <span class="s">type: 'section',</span>
                      <span class="s">text: {</span>
                        <span class="s">type: 'mrkdwn',</span>
                        <span class="s">text: message,</span>
                      <span class="s">}</span>
                    <span class="s">}</span>
                  <span class="s">]</span>
                <span class="s">})</span>
              <span class="s">}</span>
            <span class="s">}</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Send Slack messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/send_slack_messages</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.SLACK_BOT_TOKEN }}</span>
          <span class="na">MESSAGES</span><span class="pi">:</span> <span class="s">${{ steps.make-slack-messages.outputs.MESSAGES }}</span>

</code></pre></div></div><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><p>이 <code class="language-plaintext highlighter-rouge">GitHub Actions</code>를 좀 더 자세히 살펴보도록 하겠습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">[Slack]</span><span class="nv"> </span><span class="s">Every</span><span class="nv"> </span><span class="s">weekday</span><span class="nv"> </span><span class="s">at</span><span class="nv"> </span><span class="s">9:30</span><span class="nv"> </span><span class="s">AM'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span> <span class="s1">'</span><span class="s">30</span><span class="nv"> </span><span class="s">0</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">1-5'</span>
<span class="nn">...</span>

</code></pre></div></div><p>이 <code class="language-plaintext highlighter-rouge">GitHub Actions</code>는 평일(1-5) 9시 30분(일본 시간)에 실행됩니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout Repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
<span class="nn">...</span>

</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">Composite Action</code>는 <code class="language-plaintext highlighter-rouge">Git</code>에서 관리되기 때문에, <code class="language-plaintext highlighter-rouge">actions/checkout@v4</code>를 사용하여 레포지토리를 체크아웃해야 합니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Make Slack messages</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">make-slack-messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/github-script@v7</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github-token</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">const userList = [</span>
              <span class="s">'GITHUB_USER_NAME_1',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_4',</span>
            <span class="s">]</span>
            <span class="s">const escapeForSlack = (text) =&gt; {</span>
              <span class="s">return text</span>
                <span class="s">.replace(/&amp;/g, '&amp;amp;')   // &amp; → &amp;amp;</span>
                <span class="s">.replace(/&lt;/g, '&amp;lt;')    // &lt; → &amp;lt;</span>
                <span class="s">.replace(/&gt;/g, '&amp;gt;')    // &gt; → &amp;gt;</span>
                <span class="s">.replace(/"/g, '&amp;quot;')  // " → &amp;quot;</span>
                <span class="s">.replace(/'/g, '&amp;#39;');  // ' → &amp;#39;</span>
            <span class="s">}</span>

            <span class="s">// Get All PRs</span>
            <span class="s">const prList = []</span>
            <span class="s">let pageIndex = 1</span>
            <span class="s">let hasMorePages = true</span>
            <span class="s">while (hasMorePages) {</span>
              <span class="s">const result = await github.rest.pulls.list({</span>
                <span class="s">owner: context.repo.owner,</span>
                <span class="s">repo: context.repo.repo,</span>
                <span class="s">state: 'open',</span>
                <span class="s">per_page: 100,</span>
                <span class="s">page: pageIndex,</span>
              <span class="s">})</span>
              <span class="s">if (result.data.length &gt; 0) {</span>
                <span class="s">prList.push(...result.data)</span>
                <span class="s">pageIndex += 1</span>
              <span class="s">} else {</span>
                <span class="s">hasMorePages = false</span>
              <span class="s">}</span>
            <span class="s">}</span>
            <span class="s">let slackMessages = []</span>
            <span class="s">for (const userName of userList) {</span>
              <span class="s">const reviewerPRList = prList.filter(pr =&gt; pr.user.login !== 'dependabot[bot]' &amp;&amp;</span>
                <span class="s">pr.requested_reviewers.some(reviewer =&gt; reviewer.login === userName)</span>
              <span class="s">);</span>
              <span class="s">if (reviewerPRList.length &gt; 0) {</span>
                <span class="s">let message = '*Reviewer notification*\n\nYou have assigned PRs. Please review when you have time.\n'</span>
                <span class="s">reviewerPRList.forEach(pr =&gt; {</span>
                  <span class="s">message += `\n- &lt;${pr.html_url}|${escapeForSlack(pr.title)}&gt;`;</span>
                <span class="s">});</span>
                <span class="s">slackMessages.push({</span>
                  <span class="s">userName,</span>
                  <span class="s">messages: [</span>
                    <span class="s">{</span>
                      <span class="s">type: 'section',</span>
                      <span class="s">text: {</span>
                        <span class="s">type: 'mrkdwn',</span>
                        <span class="s">text: message,</span>
                      <span class="s">}</span>
                    <span class="s">}</span>
                  <span class="s">]</span>
                <span class="s">})</span>
              <span class="s">}</span>
            <span class="s">}</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
<span class="s">...</span>

</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">actions/github-script@v7</code>를 사용하여 Reviewer에게 메시지를 보내기 위한 메시지를 만듭니다. 각각의 GitHub의 사용자가 할당된 모든 PR을 가져와서 리뷰어에게 보낼 메시지를 만듭니다.</p><div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Reviewer notification
You have assigned PRs. Please review when you have time.
- PR title1: https://...
- PR title2: https://...
- PR title3: https://...
- PR title4: https://...
</code></pre></div></div><p>이 메시지는 미리 작성한 GitHub 사용자 목록에 있는 모든 사용자에게 메시지를 보내게 됩니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
            <span class="s">const userList = [</span>
              <span class="s">'GITHUB_USER_NAME_1',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_2',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_3',</span>
              <span class="s">'GITHUB_USER_NAME_4',</span>
            <span class="s">]</span>
<span class="nn">...</span>

</code></pre></div></div><p>이렇게 만든 메시지를 <code class="language-plaintext highlighter-rouge">JSON</code>을 그대로 전달하면 문제가 발생합니다. 그래서 <code class="language-plaintext highlighter-rouge">Buffer</code>를 사용하여 <code class="language-plaintext highlighter-rouge">base64</code>로 인코딩하여 <code class="language-plaintext highlighter-rouge">core.setOutput</code>을 사용하여 <code class="language-plaintext highlighter-rouge">MESSAGES</code>에 저장해서 전달하도록 했습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
            <span class="s">const encodedMessages = Buffer.from(JSON.stringify(slackMessages)).toString('base64');</span>
            <span class="s">core.setOutput('MESSAGES', encodedMessages);</span>
<span class="nn">...</span>

</code></pre></div></div><p>마지막은 이전에 만든 <code class="language-plaintext highlighter-rouge">Composite Action</code>을 사용하여 <code class="language-plaintext highlighter-rouge">Slack</code> 메시지를 보냈습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">...</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Send Slack messages</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/send_slack_messages</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="na">SLACK_BOT_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.SLACK_BOT_TOKEN }}</span>
          <span class="na">MESSAGES</span><span class="pi">:</span> <span class="s">${{ steps.make-slack-messages.outputs.MESSAGES }}</span>
<span class="nn">...</span>

</code></pre></div></div><h2 id="완료">완료</h2><p>이것으로 <code class="language-plaintext highlighter-rouge">GitHub Actions</code>를 사용하여 리뷰어에 지정된 경우 Slack 메시지를 보내는 방법과 매일 아침에 리뷰어에게 PR 목록을 Slack 메시지로 발송하는 방법에 대해서 알아보았습니다.</p><p>리뷰어에 지정된 것이 인식되지 않아서 리뷰가 계속 지연되는 문제가 있는 경우, 이러한 방법을 사용하여 리뷰어에게 메시지를 보내어 리뷰를 유도해 보시기 바랍니다.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[GitHub Actions를 사용하여 Reviewer에 지정된 경우 Slack 메시지를 보내는 방법과 매일 아침에 리뷰어에게 PR 목록을 Slack 메시지로 발송하는 방법에 대해 알아보겠습니다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ko"><title type="html">[GitHub Actions] Jest 실행 Action 성능 개선하기</title><link href="https://deku.posstree.com/ko/github_actions/improve-test-performance/" rel="alternate" type="text/html" title="[GitHub Actions] Jest 실행 Action 성능 개선하기"/><published>2024-10-23T00:00:00+09:00</published><updated>2025-01-11T17:20:20+09:00</updated><id>https://deku.posstree.com/github_actions/improve-test-performance-ko</id><content type="html" xml:base="https://deku.posstree.com/github_actions/improve-test-performance/"><![CDATA[<div id="contents_list"><h2 id="section">목차</h2><ul><li><a href="#%EB%AA%A9%EC%B0%A8">목차</a></li><li><a href="#%EA%B0%9C%EC%9A%94">개요</a></li><li><a href="#%EB%AC%B8%EC%A0%9C%EC%A0%90">문제점</a></li><li><a href="#%EC%84%B1%EB%8A%A5-%EA%B0%9C%EC%84%A0">성능 개선</a><ul><li><a href="#dependencies-cache">Dependencies Cache</a></li><li><a href="#actions-%EB%B6%84%EB%A6%AC">Actions 분리</a></li><li><a href="#jest%EC%9D%98-bail">Jest의 bail</a></li><li><a href="#jest%EC%9D%98-shard-%EC%98%B5%EC%85%98">Jest의 shard 옵션</a></li></ul></li><li><a href="#%EC%99%84%EB%A3%8C">완료</a></li></ul></div><h2 id="개요">개요</h2><p>회사에서 테스트 코드가 많아지면서 <code class="language-plaintext highlighter-rouge">GitHub Actions</code>에서 코드를 체크하는 Action에 시간이 오래 걸리는 문제가 발생했습니다. 이 문제를 해결하기 위해 <code class="language-plaintext highlighter-rouge">Jest</code>를 실행하는 Action의 성능을 개선한 내용을 공유하고자 합니다.</p><h2 id="문제점">문제점</h2><p>현재 다음과 같은 Action를 사용하여 PR을 체크하고 있습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">jobs</span><span class="pi">:</span>
  <span class="na">check-code</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Check Code</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Prettier</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn format</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn cspell</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn lint</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn stylelint</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">yarn test:ci</span>
          <span class="s">yarn test:storybook</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">yarn build</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build SCSS</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">yarn typegen:scss</span>

          <span class="s"># Get the changed files</span>
          <span class="s">CHANGED_FILES=$(git diff --name-only HEAD)</span>
          <span class="s"># Check if there are changes in the generated files</span>
          <span class="s">if [ -n "$CHANGED_FILES" ]; then</span>
            <span class="s">echo "Error: There are changes in the following files: $CHANGED_FILES"</span>
            <span class="s">exit 1</span>
          <span class="s">fi</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">PR</code>이 생성된면 <code class="language-plaintext highlighter-rouge">Prettier</code>, <code class="language-plaintext highlighter-rouge">CSpell</code>, <code class="language-plaintext highlighter-rouge">ESLint</code>, <code class="language-plaintext highlighter-rouge">Stylelint</code>, <code class="language-plaintext highlighter-rouge">Test</code>, <code class="language-plaintext highlighter-rouge">Build</code>, <code class="language-plaintext highlighter-rouge">Build SCSS</code>를 실행하고 있습니다. 이 Action는 다음과 같이 약 25분 정도 소요됩니다.</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/check-code-actions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/check-code-actions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/check-code-actions.png" alt="GitHub Actions - Improve Jest test performance"/></picture><h2 id="성능-개선">성능 개선</h2><p>PR을 생성할 때마다 매번 25분이 소요되는 것은 매우 비효율적입니다. 이번 블로그 포스트에서는 <code class="language-plaintext highlighter-rouge">Jest</code>를 실행하는 Action의 성능을 개선하는 방법에 대해서 알아보겠습니다.</p><h3 id="dependencies-cache">Dependencies Cache</h3><p>가장 먼저 수행한 것은 <code class="language-plaintext highlighter-rouge">yarn install</code>로 설치되는 <code class="language-plaintext highlighter-rouge">Dependencies</code>를 캐시하는 것 입니다. 이를 통해 <code class="language-plaintext highlighter-rouge">Dependencies</code>를 다시 설치하는 시간을 줄일 수 있습니다.</p><p>이 부분은 다른 <code class="language-plaintext highlighter-rouge">Actions</code>에서도 사용할 수 있기 때문에 별도의 <code class="language-plaintext highlighter-rouge">Composite Action</code>로 만들었습니다. <code class="language-plaintext highlighter-rouge">Composite Action</code>에 대해서는 다음 링크를 참고해 주시기 바랍니다.</p><ul><li><a href="https://deku.posstree.com/ko/github_actions/composite-action/" target="_blank">[GitHub Actions] Composite Action를 사용하여 GitHub Action 중복 제거하기</a></li></ul><p>캐시는 <code class="language-plaintext highlighter-rouge">actions/cache</code>를 사용하여 캐시하였습니다.</p><ul><li><code class="language-plaintext highlighter-rouge">actions/cache</code> 공식 문서: <a href="https://github.com/actions/cache" rel="nofollow noreferrer" target="_blank">https://github.com/actions/cache</a></li></ul><p><code class="language-plaintext highlighter-rouge">actions/cache</code>를 사용하여 <code class="language-plaintext highlighter-rouge">Dependencies</code>를 캐시하는 <code class="language-plaintext highlighter-rouge">Composite Action</code>는 다음과 같습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Dependencies'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Dependencies'</span>
<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Get yarn cache directory path</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">yarn-cache-dir-path</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo "dir=$(yarn config get cacheFolder)" &gt;&gt; $GITHUB_OUTPUT</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/cache@v4</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">yarn-cache</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">path</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">node_modules</span>
          <span class="s">**/node_modules</span>
          <span class="s">${{ steps.yarn-cache-dir-path.outputs.dir }}</span>
        <span class="na">key</span><span class="pi">:</span> <span class="s">${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}</span>
        <span class="na">restore-keys</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">${{ runner.os }}-yarn-</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
      <span class="na">if</span><span class="pi">:</span> <span class="s">steps.yarn-cache.outputs.cache-hit != 'true'</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>

</code></pre></div></div><p>저희 팀에서는 <code class="language-plaintext highlighter-rouge">Yarn</code>의 <code class="language-plaintext highlighter-rouge">3.7.0</code> 버전을 사용하고 있습니다. 그래서 <code class="language-plaintext highlighter-rouge">corepack enable</code>을 추가하고, <code class="language-plaintext highlighter-rouge">Yarn 3.7.0</code>의 캐시 폴더를 가져와서 <code class="language-plaintext highlighter-rouge">node_modules</code>와 함께 캐시하였습니다.</p><p>또한 프로젝트가 모노레포이기 때문에 <code class="language-plaintext highlighter-rouge">**/node_modules</code>를 사용하여 하위 프로젝트에 있는 <code class="language-plaintext highlighter-rouge">node_modules</code>도 함께 캐시하였습니다.</p><p>모노레포가 아니고, <code class="language-plaintext highlighter-rouge">Yarn 3.7.0</code>을 사용하고 있지않다면, 공식 문서를 참고하여 적절한 설정을 해주시기 바랍니다.</p><ul><li>공식 문서: <a href="https://github.com/actions/cache?tab=readme-ov-file#implementation-examples" rel="nofollow noreferrer" target="_blank">https://github.com/actions/cache?tab=readme-ov-file#implementation-examples</a></li></ul><p>이를 통해 아주 조금 성능이 개선되었습니다.</p><ul><li>Before: 1m 25s</li></ul><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/before-cache-actions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/before-cache-actions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/before-cache-actions.png" alt="GitHub Actions - Before using actions/cache for dependencies"/></picture><ul><li>After: 9s</li></ul><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/after-cache-actions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/after-cache-actions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/after-cache-actions.png" alt="GitHub Actions - After using actions/cache for dependencies"/></picture><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h3 id="actions-분리">Actions 분리</h3><p><code class="language-plaintext highlighter-rouge">Prettier</code>, <code class="language-plaintext highlighter-rouge">CSpell</code>, <code class="language-plaintext highlighter-rouge">ESLint</code>, <code class="language-plaintext highlighter-rouge">Stylelint</code>, <code class="language-plaintext highlighter-rouge">Test</code>, <code class="language-plaintext highlighter-rouge">Build</code>, <code class="language-plaintext highlighter-rouge">Build SCSS</code>를 모두 한 <code class="language-plaintext highlighter-rouge">Action</code>에서 실행하고 있습니다. 이 중에서 <code class="language-plaintext highlighter-rouge">Test</code>를 실행하는 부분이 가장 시간이 오래걸렸습니다.</p><p>그래서 <code class="language-plaintext highlighter-rouge">Test</code>가 실행되는 동안 다른 <code class="language-plaintext highlighter-rouge">Actions</code>를 수행할 수 있도록 <code class="language-plaintext highlighter-rouge">Actions</code>를 분리하였습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">jobs</span><span class="pi">:</span>
  <span class="na">cspell</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn cspell</span>
  <span class="na">remark</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn remark:service_1</span>
  <span class="na">eslint</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn lint:service_1</span>
  <span class="na">stylelint</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn stylelint:service_1</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn build:service_1</span>
  <span class="na">test-service_1</span><span class="pi">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Test service_1</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn test:ci:service_1</span>
</code></pre></div></div><p>모노레포를 사용하고 있기 때문에 이와 같은 <code class="language-plaintext highlighter-rouge">GitHub Actions</code>가 서비스별로 존재하고 있으며, <code class="language-plaintext highlighter-rouge">if</code>문을 사용하여 해당 서비스에만 실행되도록 하였습니다.</p><p>분리하기 전, 이 <code class="language-plaintext highlighter-rouge">Action</code>는 약 25분 정도 소요되었습니다.</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/check-code-actions.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/check-code-actions.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/check-code-actions.png" alt="GitHub Actions - Before separating actions"/></picture><p>분리한 후, 이 <code class="language-plaintext highlighter-rouge">Action</code>는 약 13분 정도로 성능이 개선되었습니다.</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" alt="GitHub Actions - After separating actions"/></picture><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h3 id="jest의-bail">Jest의 bail</h3><p><code class="language-plaintext highlighter-rouge">Jest</code>의 <code class="language-plaintext highlighter-rouge">bail</code> 옵션을 사용하면, 테스트 중에 하나라도 테스트가 실패하면 테스트를 중지하도록 설정할 수 있습니다.</p><p>이 옵션을 추가하면 테스트가 실패했을 때, 모든 테스트를 실행하지 않고 바로 중지하게 되어 시간을 단축할 수 있습니다.</p><p><code class="language-plaintext highlighter-rouge">Jest</code>의 <code class="language-plaintext highlighter-rouge">bail</code> 옵션은 설정하기 위해 <code class="language-plaintext highlighter-rouge">jest</code>를 실행하는 명령어가 포함된 <code class="language-plaintext highlighter-rouge">package.json</code> 파일을 열고 다음과 같이 수정합니다.</p><div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">...</span><span class="w">
    </span><span class="nl">"test:ci"</span><span class="p">:</span><span class="w"> </span><span class="s2">"jest --ci --bail"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="err">...</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div><h3 id="jest의-shard-옵션">Jest의 shard 옵션</h3><p><code class="language-plaintext highlighter-rouge">Jest</code>의 <code class="language-plaintext highlighter-rouge">shard</code> 옵션을 사용하면, 테스트를 병렬로 실행할 수 있습니다. <code class="language-plaintext highlighter-rouge">shard</code>를 사용하여 테스트를 병렬로 실행하기 위해 <code class="language-plaintext highlighter-rouge">Jest</code>를 실행하는 <code class="language-plaintext highlighter-rouge">action</code>를 열고 다음과 같이 수정합니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="s">...</span>
  <span class="s">test-service_1</span><span class="err">:</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">contains(github.head_ref, 'service_1') || contains(github.head_ref, 'npm_and_yarn') || contains(github.head_ref, 'github_actions') || contains(github.head_ref, 'components') || contains(github.head_ref, 'config') || contains(github.head_ref, 'common')</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Test service_1</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">strategy</span><span class="pi">:</span>
      <span class="na">matrix</span><span class="pi">:</span>
        <span class="na">shard</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">1</span><span class="pi">,</span> <span class="nv">2</span><span class="pi">,</span> <span class="nv">3</span><span class="pi">,</span> <span class="nv">4</span><span class="pi">,</span> <span class="nv">5</span><span class="pi">,</span> <span class="nv">6</span><span class="pi">,</span> <span class="nv">7</span><span class="pi">,</span> <span class="nv">8</span><span class="pi">,</span> <span class="nv">9</span><span class="pi">,</span> <span class="nv">10</span><span class="pi">]</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn test:ci:service_1 -- --shard=$/10</span>
</code></pre></div></div><p>이 프로젝트에서는 모노레포를 관리하기 위해 <code class="language-plaintext highlighter-rouge">Turborepo</code>를 사용하고 있습니다.</p><ul><li><code class="language-plaintext highlighter-rouge">Turborepo</code> 공식 문서: <a href="https://turborepo.com/" rel="nofollow noreferrer">https://turborepo.com/</a></li></ul><p>이 <code class="language-plaintext highlighter-rouge">Action</code>에서 실행하는 <code class="language-plaintext highlighter-rouge">yarn test:ci:service_1</code>는 <code class="language-plaintext highlighter-rouge">turbo test:ci --parallel --filter=service_1</code> 명령어를 실행합니다. 그래서 <code class="language-plaintext highlighter-rouge">Jest</code>의 <code class="language-plaintext highlighter-rouge">--shard</code> 옵션을 전달하기 위해 <code class="language-plaintext highlighter-rouge">--</code>를 사용하여 옵션을 전달하였습니다.</p><p><code class="language-plaintext highlighter-rouge">shard</code> 옵션을 추가하기전 테스트는 약 13분 정도 소요되었습니다.</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/after-separating-actions" alt="GitHub Actions - After separating action"/></picture><p><code class="language-plaintext highlighter-rouge">shard</code> 옵션을 추가한 후 테스트는 약 2~3분 정도 소요되었습니다.</p><picture><source srcset="/assets/images/category/github_actions/improve-test-performance/jest-shard-option.avif" type="image/avif"/><source srcset="/assets/images/category/github_actions/improve-test-performance/jest-shard-option.webp" type="image/webp"/><img src="/assets/images/category/github_actions/improve-test-performance/jest-shard-option.png" alt="GitHub Actions - Use Jest shard option"/></picture><h2 id="완료">완료</h2><p>이번 블로그 포스트에서는 <code class="language-plaintext highlighter-rouge">Jest</code>를 실행하는 <code class="language-plaintext highlighter-rouge">Action</code>의 성능을 개선하는 방법에 대해서 알아보았습니다. 성능 개선전에는 약 25분 정도 소요되었지만, 성능 개선 후에는 약 2~3분 정도 소요되었습니다.</p><p>여러분도 <code class="language-plaintext highlighter-rouge">Cache</code>, <code class="language-plaintext highlighter-rouge">Actions 분리</code> 그리고 <code class="language-plaintext highlighter-rouge">shard</code> 옵션을 통해 <code class="language-plaintext highlighter-rouge">Jest</code>를 실행하는 <code class="language-plaintext highlighter-rouge">Action</code>의 성능을 개선해 보시기 바랍니다.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[GitHub Actions에서 Jest를 실행하는 Action의 성능을 개선하는 방법에 대해서 알아보겠습니다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ko"><title type="html">[GitHub Actions] Composite Action를 사용하여 GitHub Actions 중복 제거하기</title><link href="https://deku.posstree.com/ko/github_actions/composite-action/" rel="alternate" type="text/html" title="[GitHub Actions] Composite Action를 사용하여 GitHub Actions 중복 제거하기"/><published>2024-10-22T00:00:00+09:00</published><updated>2025-01-11T17:20:20+09:00</updated><id>https://deku.posstree.com/github_actions/composite-actions-ko</id><content type="html" xml:base="https://deku.posstree.com/github_actions/composite-action/"><![CDATA[<div id="contents_list"><h2 id="section">목차</h2><ul><li><a href="#%EA%B0%9C%EC%9A%94">개요</a></li><li><a href="#composite-action%EB%9E%80">Composite Action란</a></li><li><a href="#%EC%A4%91%EB%B3%B5-%EC%BD%94%EB%93%9C%EA%B0%80-%EC%9E%88%EB%8A%94-github-action-%EC%98%88%EC%A0%9C">중복 코드가 있는 GitHub Action 예제</a></li><li><a href="#composite-action-%EB%A7%8C%EB%93%A4%EA%B8%B0">Composite Action 만들기</a></li><li><a href="#composite-action-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0">Composite Action 사용하기</a></li><li><a href="#composite-action%EC%9D%98-inputs">Composite Action의 inputs</a></li><li><a href="#composite-action%EC%9D%98-outputs">Composite Action의 outputs</a></li><li><a href="#%EC%99%84%EB%A3%8C">완료</a></li></ul></div><h2 id="개요">개요</h2><p>GitHub Actions를 사용하다보면 여러 Action에서 공통으로 사용하는 부분이 있을 수 있습니다. 이때 Composite Action를 사용하면 공통으로 사용하는 부분을 하나의 Action로 만들어서 재사용성을 높일 수 있습니다.</p><p>이번 블로그 포스트에서는 Composite Action를 사용하여 GitHub Action의 재사용성을 높이는 방법에 대해서 알아보겠습니다.</p><h2 id="composite-action란">Composite Action란</h2><p>Composite Action는 여러 Action를 하나의 Action로 묶어서 사용할 수 있는 기능입니다. Composite Action를 사용하면 여러 Action에서 공통으로 사용하는 부분을 하나의 Action로 만들어서 재사용성을 높일 수 있습니다.</p><ul><li>공식 문서: <a href="https://docs.github.com/en/actions/sharing-automations/creating-actions/creating-a-composite-action" rel="nofollow noreferrer" target="_blank">Composite Action</a></li></ul><h2 id="중복-코드가-있는-github-action-예제">중복 코드가 있는 GitHub Action 예제</h2><p>React를 사용하는 프로젝트에서 다음과 같은 GitHub Actions를 사용할 수 있습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Check</span><span class="nv"> </span><span class="s">code'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">cspell</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn cspell</span>
  <span class="na">remark</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn remark</span>
  <span class="na">eslint</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn lint</span>
  <span class="na">stylelint</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn stylelint</span>
  <span class="na">test</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn test</span>
</code></pre></div></div><p>React 프로젝트에서 <code class="language-plaintext highlighter-rouge">CSpell</code>과 여러 <code class="language-plaintext highlighter-rouge">Linter</code> 그리고 <code class="language-plaintext highlighter-rouge">Test</code>를 실행하는 GitHub Actions입니다. 여기서 다음과 같이 Dependencies를 설치하는 부분이 중복되는 것을 확인할 수 있습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="s">...</span>
      <span class="s">- name</span><span class="err">:</span> <span class="s">Setup node</span>
        <span class="s">uses</span><span class="err">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="s">with</span><span class="err">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
      <span class="s">...</span>
</code></pre></div></div><p>이 부분을 Composite Action를 사용하여 하나의 Action로 만들어 재사용하는 방법에 대해서 알아보겠습니다.</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="composite-action-만들기">Composite Action 만들기</h2><p>Dependencies를 설치하는 부분을 Composite Action로 만들기 위해 <code class="language-plaintext highlighter-rouge">.github/actions/install-dependencies.yml</code> 파일을 만들고 다음과 같이 수정합니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Dependencies'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Dependencies'</span>

<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup node</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">node-version</span><span class="pi">:</span> <span class="s">20.3.0</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable Yarn 3.7.0</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">corepack enable</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">yarn install --frozen-lockfile</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">Composite Action</code>를 사용하기 위해서는 <code class="language-plaintext highlighter-rouge">using</code> 키워드에 <code class="language-plaintext highlighter-rouge">composite</code>를 사용하여 Composite Action임을 명시합니다. 그리고 <code class="language-plaintext highlighter-rouge">steps</code>에 Composite Action를 실행할 단계를 작성합니다.</p><p>명령어를 실행할 때에는 <code class="language-plaintext highlighter-rouge">shell</code> 키워드에 <code class="language-plaintext highlighter-rouge">bash</code>를 사용하여 bash 쉘을 사용하도록 설정해야 합니다.</p><h2 id="composite-action-사용하기">Composite Action 사용하기</h2><p>Composite Action를 사용하기 위해서는 다음과 같이 GitHub Actions를 수정합니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Check</span><span class="nv"> </span><span class="s">code'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">cspell</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CSpell</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn cspell</span>
  <span class="na">remark</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Remark-lint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn remark</span>
  <span class="na">eslint</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ESLint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn lint</span>
  <span class="na">stylelint</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Stylelint</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn stylelint</span>
  <span class="na">test</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">30</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">yarn test</span>
</code></pre></div></div><p>공통으로 분리한 Composite Action을 다음과 같이 사용하도록 수정하였습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="s">...</span>
       <span class="s">- name</span><span class="err">:</span> <span class="s">Checkout code</span>
        <span class="s">uses</span><span class="err">:</span> <span class="s">actions/checkout@v4</span>
        <span class="s">with</span><span class="err">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
<span class="err">      </span><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/install_dependencies</span>
      <span class="s">...</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">Composite Action</code>는 <code class="language-plaintext highlighter-rouge">.github</code> 폴더에서 관리하고 있으므로 <code class="language-plaintext highlighter-rouge">actions/checkout</code>을 사용하여 코드를 먼저 체크아웃해야 합니다. 이후, <code class="language-plaintext highlighter-rouge">uses</code> 키워드에 Composite Action의 경로를 작성하여 Composite Action를 사용할 수 있습니다.</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="composite-action의-inputs">Composite Action의 inputs</h2><p><code class="language-plaintext highlighter-rouge">Composite Action</code>를 사용할 때, 특정 값을 전달하여 Action를 실행해야 할 때가 있습니다. 이럴때, <code class="language-plaintext highlighter-rouge">Composite Action</code>의 <code class="language-plaintext highlighter-rouge">inputs</code>을 사용하여 값을 전달할 수 있습니다.</p><p><code class="language-plaintext highlighter-rouge">Composite Action</code>의 <code class="language-plaintext highlighter-rouge">inputs</code>를 사용하기 위해 <code class="language-plaintext highlighter-rouge">Composite Action</code>을 다음과 같이 수정합니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Composite</span><span class="nv"> </span><span class="s">Action</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">inputs'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Composite</span><span class="nv"> </span><span class="s">Action</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">inputs'</span>
<span class="na">inputs</span><span class="pi">:</span>
  <span class="na">variable_name</span><span class="pi">:</span>
    <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Description</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">variable'</span>
    <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">default</span><span class="pi">:</span> <span class="s1">'</span><span class="s">variable_default_value'</span>
<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print Composite Action inputs variable</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo ${{ inputs.variable_name }}</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>

</code></pre></div></div><p>이 <code class="language-plaintext highlighter-rouge">inputs</code>를 사용하면 조건에 따라 다른 동작을 하도록 <code class="language-plaintext highlighter-rouge">Composite Action</code>를 만들 수 있습니다.</p><p>이렇게 만든 <code class="language-plaintext highlighter-rouge">Composite Action</code>는 다음과 같이 사용하여 <code class="language-plaintext highlighter-rouge">Composite Action</code>의 <code class="language-plaintext highlighter-rouge">inputs</code>를 사용할 수 있습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
      <span class="s">...</span>
      <span class="s">- name</span><span class="err">:</span> <span class="s">Checkout code</span>
        <span class="s">uses</span><span class="err">:</span> <span class="s">actions/checkout@v4</span>
        <span class="s">with</span><span class="err">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
<span class="err">      </span><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Composite Action with inputs</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/composite_action</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">variable_name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">test_input_value'</span>
      <span class="s">...</span>

</code></pre></div></div><h2 id="composite-action의-outputs">Composite Action의 outputs</h2><p><code class="language-plaintext highlighter-rouge">Composite Action</code>를 사용할 때, <code class="language-plaintext highlighter-rouge">Composite Action</code>으로 부터 특정 값을 전달받아 Action를 실행해야 할 때가 있습니다. 이럴때, <code class="language-plaintext highlighter-rouge">Composite Action</code>의 <code class="language-plaintext highlighter-rouge">outputs</code>을 사용하여 값을 전달할 수 있습니다.</p><p><code class="language-plaintext highlighter-rouge">Composite Action</code>의 <code class="language-plaintext highlighter-rouge">outputs</code>를 사용하기 위해 <code class="language-plaintext highlighter-rouge">Composite Action</code>을 다음과 같이 수정합니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Composite</span><span class="nv"> </span><span class="s">Action</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">outputs'</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Composite</span><span class="nv"> </span><span class="s">Action</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">outputs'</span>
<span class="na">outputs</span><span class="pi">:</span>
  <span class="na">variable_name</span><span class="pi">:</span>
    <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">variable</span><span class="nv"> </span><span class="s">description"</span>
    <span class="na">value</span><span class="pi">:</span> <span class="s">${{ steps.output_step.outputs.output_variable_name }}</span>
<span class="na">runs</span><span class="pi">:</span>
  <span class="na">using</span><span class="pi">:</span> <span class="s1">'</span><span class="s">composite'</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set outputs</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">output_step</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo "output_variable_name=test_output_value" &gt;&gt; $GITHUB_OUTPUT</span>
      <span class="na">shell</span><span class="pi">:</span> <span class="s">bash</span>

</code></pre></div></div><p>이렇게 만든 <code class="language-plaintext highlighter-rouge">Composite Action</code>는 다음과 같이 사용하여 <code class="language-plaintext highlighter-rouge">Composite Action</code>의 <code class="language-plaintext highlighter-rouge">outputs</code>를 사용할 수 있습니다.</p><div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
      <span class="s">...</span>
      <span class="s">- name</span><span class="err">:</span> <span class="s">Checkout code</span>
        <span class="s">uses</span><span class="err">:</span> <span class="s">actions/checkout@v4</span>
        <span class="s">with</span><span class="err">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
<span class="err">      </span><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Composite Action with outputs</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">composite_action</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">./.github/actions/composite_action</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print Composite Action outputs variable</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo ${{ steps.composite_action.outputs.variable_name }}</span>
      <span class="s">...</span>

</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">outputs</code>를 사용하면 <code class="language-plaintext highlighter-rouge">Composite Action</code>의 실행 결과물을 활용하는 <code class="language-plaintext highlighter-rouge">Action</code>를 만들 수 있습니다.</p><h2 id="완료">완료</h2><p>이것으로 <code class="language-plaintext highlighter-rouge">Composite Action</code>를 사용하여 GitHub Actions의 중복을 제거하고 Action의 재사용성을 높이는 방법에 대해서 알아보았습니다.</p><p>여러분도 혹시 중복되는 Action이 있다면 <code class="language-plaintext highlighter-rouge">Composite Action</code>을 사용하여 Action의 재사용성을 높여보시기 바랍니다.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="github_actions"/><summary type="html"><![CDATA[GitHub Actions에서 중복으로 사용되는 Action를 Composite Action로 만들어 Action의 재사용성을 높이는 방법에 대해서 알아보겠습니다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/github_actions/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ko"><title type="html">실수 관리 전략</title><link href="https://deku.posstree.com/ko/essay/mistakes-management/" rel="alternate" type="text/html" title="실수 관리 전략"/><published>2024-10-15T00:00:00+09:00</published><updated>2024-12-03T20:54:19+09:00</updated><id>https://deku.posstree.com/essay/mistakes-management-ko</id><content type="html" xml:base="https://deku.posstree.com/essay/mistakes-management/"><![CDATA[<p>사람은 누구나 실수를 한다. 아무리 조심하고 몇 번을 확인해도 실수는 발생한다. 우리가 전문가라고 부르는 사람들도 1시간에 평균 3~5개 실수를 한다.</p><p>회사나 팀은 사람들로 구성되어있고, 사람들이 제품이나 서비스를 만들게 된다. 그렇기 때문에 제품이나 서비스에서는 장애나 버그가 발생하고 회사는 이런 문제(실수)를 해결해야 한다.</p><p>회사에서는 이런 실수를 대처하기 위해 <code class="language-plaintext highlighter-rouge">실수 예방</code>과 <code class="language-plaintext highlighter-rouge">실수 관리</code>라는 전략을 사용할 수 있다.</p><ul><li>실수 예방: 실수를 하지 않도록 하는 전략. 실수로 가는 경로를 차단하고 실수를 저지르지 말라고 요구하는 전략.</li><li>실수 관리: 실수를 하더라도 빠르게 발견하고 해결하는 전략.</li></ul><blockquote><p>미 중서부의 유명한 병원인데, 2006년 신생아실의 아이들에게 헤파린을 기준치의 1,000배 투여하는 일이 발생합니다. 1주일에 걸쳐 5명의 간호사가 총 6명의 아이들에게 그렇게 투여를 했고, 그 아이들 중 3명이 죽고 나머지 3명도 심각한 손상을 입었습니다. 더 놀라운 점은 그 병원에 2001년 헤파린 과다 투여로 비슷한 사고가 있었고, 이 사고를 계기로 안전 프로그램을 운영했고, 그런 면에서 훌륭한 병원으로 인정되고 있었다는 점이죠. 그러나 조사에 따르면 이 사건은, 병원의 안전 프로세스가 너무 신뢰할만 했기 할 만했기 때문에 벌어졌습니다. 새로운 표준 운영 절차 덕분에 약사가 헤파린을 준비할 때 실수할 여지가 없다고 믿은 간호사들이 더 이상 약 투여 시 확인해야 할 것들을 신경 쓰지 않게 되었죠. 실제로 그 방법은 사고가 나기 전까지는 효과적이였습니다.</p></blockquote><p>이 예는 <code class="language-plaintext highlighter-rouge">실수 예방</code> 전략을 사용했지만, 이 전략을 너무 믿었기 때문에 또 다른 실수가 발생했다.</p><p>실수를 예방하기 위해 만든 안전 프로세스가 완벽하다고 생각했기 때문에 간호사들은 약사가 헤파린 준비에서 실수를 하지 않을 것이라고 믿었다. 이 안전 프로세스를 믿은 간호사들은 약 투여시 확인해야 할 것들을 신경쓰지 않는 실수를 저질러서 이런 문제가 다시 발생하게 되었다.</p><p><code class="language-plaintext highlighter-rouge">실수 예방</code>은 실수를 하지 않도록 하는 전략이지만, 사람이 실수를 하지 않게 만드는 것은 불가능하다. 따라서 이 전략을 사실 실행이 불가능하다.</p><p><code class="language-plaintext highlighter-rouge">실수 관리</code>는 실수가 언제든지 발생할 수 있다고 인정하고, 그 대신 실수가 최악으로 발전하기 전에 빨리 발견하고 빨리 고치자는 전략이다.</p><p><code class="language-plaintext highlighter-rouge">실수 예방</code>은 실수한 사람을 비난하고 처벌하게 되는 경우가 많기 때문에 실수를 감추려는 경향이 많이 나타난다.</p><p><code class="language-plaintext highlighter-rouge">실수 관리</code>는 실수가 더 큰 문제가 되기 전에 이를 고치려하기 때문에 실수를 공유하고 거기에서 배우려는 경향이 많이 나타난다.</p><p>전문가도 1시간에 평균 3~5개 실수를 하지만 회사가 망하지 않고 서비스가 계속 운영되는 이유는, 전문가들이 실수를 조기에 발견하고 빠른 조치를 취하고 있기 때문이다. 전문가들은 자신이 실수를 할 수 있다는 것을 인정하고, 실수가 더 나쁜 상황으로 발전하기 전에 빨리 발견하고 빨리 고치려고 노력한다.</p><p><a href="https://www.researchgate.net/publication/7453312_Organizational_Error_Management_Culture_and_Its_Impact_on_Performance_A_Two-Study_Replication" rel="nofollow noreferrer" target="_blank">Cathy van Dyck, Michael Frese, Markus Baer, &amp; Doris Sonnentag. (2005) Organizational error management culture and its impact on performance: A two-study replication. Journal of Applied Psychology</a>의 연구 결과를 보면 회사가 실수 예방보다 실수 관리 전략을 사용할수록 그 기업의 혁신 정도가 높다고 한다. 또한 이 연구에서는 실수 예방보다 실수 관리 전략이 회사의 수익률이 높인다고 한다.</p><p>사람은 실수를 통해 많은 것을 배운다. 바꾸어 말하면, 실수를 하지 않으면 학습을 할 수 없다. 따라서, 실수 관리 전략일수록 학습이 더 잘된다. 직원들에게 실수를 하지 말라고 말하는 것은, 학습을 하지 말라고 지시하는 것과 같다. 다양한 실수를 경험하는 걸 격려하고 실수 사례를 배우고 실수시 대처하는 방법을 가르치는 교육이 더 효과적 교육 방법이라는 연구 결과도 많다. 회사에서 실수를 경험하라고 격려할 필요까지는 없지만, 실수를 해도 그것을 통해 학습할 수 있는 환경을 만들어야 한다.</p><p>실수 관리 전략은 <code class="language-plaintext highlighter-rouge">2차적 실수 예방</code>으로 확장할 수 있다. <code class="language-plaintext highlighter-rouge">2차적 실수 예방</code>은 이미 발생한 실수에 대해 학습을 하고, 이후 ‘다음에는 이렇게 행동하자’라고 계획을 세우는 것이다.</p><p>실수 관리 전략을 취하기 위해서는 실수가 발생하는 것은 빠르게 감지하는 <code class="language-plaintext highlighter-rouge">모니터링</code>이 필요하다. 그리고 이를 빠르게 <code class="language-plaintext highlighter-rouge">대응</code>해야 한다. 대응 후에는 이 실수에 대해서 <code class="language-plaintext highlighter-rouge">학습</code>을 하고, 같은 실수가 반복되지 않도록 <code class="language-plaintext highlighter-rouge">예방</code> 조치를 취해야 한다.</p><ul><li>모니터링 &gt; 대응하기 &gt; 학습하기 &gt; 예방하기</li></ul><p>정리하면, 사람은 누구나 실수를 한다. 전문가도 1시간에 3~5개 실수를 한다. 사람들은 실수를 통해 학습을 한다. 실수 예방보다 실수를 관리하는 전략이 기업의 혁신 정도를 높이고, 회사의 수익률 또한 높인다. 그러므로 실수를 예방하는 것은 불가능하다는 것을 인정하고, 실수를 관리할 수 있는 노력을 해야한다. 대표적인 실수 관리 방법은 실수가 발생하는지 모니터링을 하고, 발생시 빠르게 대응하며 이를 통해 학습을 한 후, 같은 실수가 반복되지 않도록 예방 조치를 취해야 한다.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="essay"/><summary type="html"><![CDATA[조직에서 실수를 관리하는 방법과 실수에 대한 전략이 팀에 미치는 영향에 대해 알아보자.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/essay/2024/mistakes-management/background.jpg"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/essay/2024/mistakes-management/background.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ko"><title type="html">[Flutter] PageView 위젯 사용법</title><link href="https://deku.posstree.com/ko/flutter/widgets/page_view/" rel="alternate" type="text/html" title="[Flutter] PageView 위젯 사용법"/><published>2024-10-11T00:00:00+09:00</published><updated>2025-01-03T17:30:19+09:00</updated><id>https://deku.posstree.com/flutter/widgets/widget-page-view-ko</id><content type="html" xml:base="https://deku.posstree.com/flutter/widgets/page_view/"><![CDATA[<div id="contents_list"><h2 id="section">목차</h2><ul><li><a href="#%EB%AA%A9%EC%B0%A8">목차</a></li><li><a href="#%EA%B0%9C%EC%9A%94">개요</a></li><li><a href="#pageview-%EC%9C%84%EC%A0%AF">PageView 위젯</a></li><li><a href="#pageview-%EC%9C%84%EC%A0%AF-%EC%82%AC%EC%9A%A9%EB%B2%95">PageView 위젯 사용법</a></li><li><a href="#pagecontroller">PageController</a></li><li><a href="#scrolldirection-%EC%98%B5%EC%85%98">scrollDirection 옵션</a></li><li><a href="#onpagechanged-%EC%86%8D%EC%84%B1">onPageChanged 속성</a></li><li><a href="#pageview-builder">PageView Builder</a></li><li><a href="#%EC%99%84%EB%A3%8C">완료</a></li></ul></div><h2 id="개요">개요</h2><p>Flutter로 앱을 개발할 때, <code class="language-plaintext highlighter-rouge">TikTok</code>와 같이 화면 전체를 스크롤하는 기능을 구현하고 싶을 때가 있습니다. 이때 Flutter가 기본적으로 제공한느 <code class="language-plaintext highlighter-rouge">PageView</code> 위젯을 사용하면 간단하게 구현할 수 있습니다.</p><p>이번 블로그 포스트에서는 <code class="language-plaintext highlighter-rouge">PageView</code> 위젯을 사용하는 방법에 대해서 알아보겠습니다.</p><p>이 블로그 포스트에서 소개하는 소스 코드는 아래에 링크에서 확인할 수 있습니다.</p><ul><li>GitHub: <a href="https://github.com/dev-yakuza/study-flutter/tree/main/widget/page_view" rel="nofollow noreferrer" target="_blank">https://github.com/dev-yakuza/study-flutter/tree/main/widget/page_view</a></li></ul><h2 id="pageview-위젯">PageView 위젯</h2><p>Flutter에서 제공하는 <code class="language-plaintext highlighter-rouge">PageView</code> 위젯은 스크롤을 통해 화면 전체를 이동시키는 위젯입니다. <code class="language-plaintext highlighter-rouge">PageView</code> 위젯은 <code class="language-plaintext highlighter-rouge">children</code> 속성을 통해 여러 개의 위젯을 전달하여 페이지를 구성할 수 있습니다.</p><picture><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" type="image/avif"/><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" type="image/webp"/><img src="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" alt="Flutter - PageView widget scroll vertical"/></picture><p>공식 문서를 통해 <code class="language-plaintext highlighter-rouge">PageView</code> 위젯에 대한 자세한 정보를 확인할 수 있습니다.</p><ul><li>공식 문서: <a href="https://api.flutter.dev/flutter/widgets/PageView-class.html" rel="nofollow noreferrer" target="_blank">PageView class</a></li></ul><h2 id="pageview-위젯-사용법">PageView 위젯 사용법</h2><p><code class="language-plaintext highlighter-rouge">PageView</code>는 Flutter가 기본적으로 제공하는 위젯이므로, 다음과 같이 <code class="language-plaintext highlighter-rouge">PageView</code> 위젯을 간단하게 사용할 수 있습니다.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyHomePage</span> <span class="kd">extends</span> <span class="n">StatelessWidget</span> <span class="p">{</span>
  <span class="n">MyHomePage</span><span class="p">({</span><span class="k">super</span><span class="o">.</span><span class="na">key</span><span class="p">});</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">body:</span> <span class="n">PageView</span><span class="p">(</span>
        <span class="nl">children:</span> <span class="p">[</span>
          <span class="n">Container</span><span class="p">(</span>
            <span class="nl">width:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">height:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">red</span><span class="p">,</span>
          <span class="p">),</span>
          <span class="n">Container</span><span class="p">(</span>
            <span class="nl">width:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">height:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">blue</span><span class="p">,</span>
          <span class="p">),</span>
          <span class="n">Container</span><span class="p">(</span>
            <span class="nl">width:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">height:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
            <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">green</span><span class="p">,</span>
          <span class="p">),</span>
        <span class="p">],</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">PageView</code> 위젯의 <code class="language-plaintext highlighter-rouge">children</code>에 화면에 표시할 위젯을 함께 전달하면 다음과 같이 화면 전체를 스크롤하여 페이지를 이동할 수 있게 됩니다.</p><picture><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_horizontal.gif" type="image/avif"/><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_horizontal.gif" type="image/webp"/><img src="/assets/images/category/flutter/2024/page_view/page_view_scroll_horizontal.gif" alt="Flutter - PageView widget scroll horizontal"/></picture><p>여기서는 쉽게 확인하기 위해 <code class="language-plaintext highlighter-rouge">Container</code> 위젯을 사용하였습니다.</p><h2 id="pagecontroller">PageController</h2><p><code class="language-plaintext highlighter-rouge">PageController</code>를 사용하면 초기에 표시할 페이지를 결정할 수 있습니다.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyHomePage</span> <span class="kd">extends</span> <span class="n">StatelessWidget</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">pageController</span> <span class="o">=</span> <span class="n">PageController</span><span class="p">(</span>
    <span class="nl">initialPage:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="p">);</span>

  <span class="n">MyHomePage</span><span class="p">({</span><span class="k">super</span><span class="o">.</span><span class="na">key</span><span class="p">});</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">body:</span> <span class="n">PageView</span><span class="p">(</span>
        <span class="nl">controller:</span> <span class="n">pageController</span><span class="p">,</span>
        <span class="nl">children:</span> <span class="p">[</span>
          <span class="p">...</span>
        <span class="p">],</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div><p><code class="language-plaintext highlighter-rouge">PageController</code>의 <code class="language-plaintext highlighter-rouge">initialPage</code> 속성에 처음 표시될 페이지의 인덱스를 설정할 수 있습니다. 이렇게 수정하고 앱을 다시 실행해보면, 초기에 표시되는 페이지가 변경된 것을 확인할 수 있습니다.</p><div class="in-feed-ads ads-container"><div class="ads-block ads-left"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="2718813593"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="ads-block ads-center"><ins class="adsbygoogle" style="display: block; text-align: center" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7987914246691031" data-ad-slot="6492035359"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h2 id="scrolldirection-옵션">scrollDirection 옵션</h2><p><code class="language-plaintext highlighter-rouge">PageView</code> 위젯은 <code class="language-plaintext highlighter-rouge">scrollDirection</code> 속성을 통해 스크롤 방향을 설정할 수 있습니다. 기본적으로 <code class="language-plaintext highlighter-rouge">scrollDirection</code> 속성은 <code class="language-plaintext highlighter-rouge">Axis.horizontal</code>로 설정되어 있습니다만, 이를 <code class="language-plaintext highlighter-rouge">Axis.vertical</code>로 설정하여 수직 방향으로 스크롤할 수 있습니다.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PageView</span><span class="p">(</span>
  <span class="nl">controller:</span> <span class="n">pageController</span><span class="p">,</span>
  <span class="nl">scrollDirection:</span> <span class="n">Axis</span><span class="o">.</span><span class="na">vertical</span><span class="p">,</span>
  <span class="nl">children:</span> <span class="p">[</span>
    <span class="p">...</span>
  <span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div><p>이렇게 수정하고 실행하면, 다음과 같이 수직 방향으로 스크롤할 수 있는 페이지를 확인할 수 있습니다.</p><picture><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" type="image/avif"/><source srcset="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" type="image/webp"/><img src="/assets/images/category/flutter/2024/page_view/page_view_scroll_vertical.gif" alt="Flutter - PageView widget scroll vertical"/></picture><h2 id="onpagechanged-속성">onPageChanged 속성</h2><p><code class="language-plaintext highlighter-rouge">PageView</code> 위젯은 <code class="language-plaintext highlighter-rouge">onPageChanged</code> 속성을 통해 페이지가 변경될 때 호출되는 콜백 함수를 설정할 수 있습니다. 이를 통해 페이지가 변경될 때 추가적인 작업을 수행할 수 있습니다.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PageView</span><span class="p">(</span>
  <span class="nl">controller:</span> <span class="n">pageController</span><span class="p">,</span>
  <span class="nl">onPageChanged:</span> <span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">print</span><span class="p">(</span><span class="s">'Page changed to </span><span class="si">$index</span><span class="s">'</span><span class="p">);</span>
  <span class="p">},</span>
  <span class="nl">children:</span> <span class="p">[</span>
    <span class="p">...</span>
  <span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div><h2 id="pageview-builder">PageView Builder</h2><p><code class="language-plaintext highlighter-rouge">PageView</code> 위젯은 <code class="language-plaintext highlighter-rouge">PageView.builder</code> 생성자를 통해 동적으로 페이지를 생성할 수 있습니다. <code class="language-plaintext highlighter-rouge">PageView.builder</code> 생성자는 <code class="language-plaintext highlighter-rouge">itemBuilder</code> 속성을 통해 페이지를 생성하는 함수를 전달할 수 있습니다.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PageView</span><span class="o">.</span><span class="na">builder</span><span class="p">(</span>
  <span class="nl">controller:</span> <span class="n">pageController</span><span class="p">,</span>
  <span class="nl">itemCount:</span> <span class="mi">10</span><span class="p">,</span>
  <span class="nl">itemBuilder:</span> <span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Container</span><span class="p">(</span>
      <span class="nl">width:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
      <span class="nl">height:</span> <span class="kt">double</span><span class="o">.</span><span class="na">infinity</span><span class="p">,</span>
      <span class="nl">color:</span> <span class="n">index</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">Colors</span><span class="o">.</span><span class="na">red</span> <span class="o">:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">blue</span><span class="p">,</span>
    <span class="p">);</span>
  <span class="p">},</span>
<span class="p">)</span>
</code></pre></div></div><h2 id="완료">완료</h2><p>이번 블로그 포스트에서는 Flutter에서 기본적으로 제공하는 <code class="language-plaintext highlighter-rouge">PageView</code> 위젯을 사용하여 페이지 전체를 스크롤하는 방법에 대해서 알아보았습니다. <code class="language-plaintext highlighter-rouge">PageView</code> 위젯을 사용하면 간단하게 페이지 전체를 스크롤할 수 있으며, <code class="language-plaintext highlighter-rouge">scrollDirection</code> 속성을 통해 스크롤 방향을 설정할 수 있습니다.</p><p><code class="language-plaintext highlighter-rouge">PageView</code>를 사용하면 <code class="language-plaintext highlighter-rouge">TikTok</code>와 같이 화면 전체를 스크롤하는 기능을 구현할 때 유용하게 사용할 수 있습니다. 만약, 구현중인 앱이 화면 전체를 스크롤하는 기능이 필요하다면, <code class="language-plaintext highlighter-rouge">PageView</code> 위젯을 사용하여 구현해보세요.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="flutter"/><summary type="html"><![CDATA[Flutter에서 기본적으로 제공하는 PageView 위젯을 사용하여 페이지 전체를 스크롤하는 방법에 대해서 설명합니다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/flutter/background.png"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/flutter/background.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ko"><title type="html">[Flutter] Test Matcher 사용하기</title><link href="https://deku.posstree.com/ko/flutter/test/matcher/" rel="alternate" type="text/html" title="[Flutter] Test Matcher 사용하기"/><published>2024-10-06T00:00:00+09:00</published><updated>2024-10-09T10:15:16+09:00</updated><id>https://deku.posstree.com/flutter/test/test-matcher-ko</id><content type="html" xml:base="https://deku.posstree.com/flutter/test/matcher/"><![CDATA[<div id="contents_list"><h2 id="section">목차</h2><ul><li><a href="#%EB%AA%A9%EC%B0%A8">목차</a></li><li><a href="#%EA%B0%9C%EC%9A%94">개요</a></li><li><a href="#matcher">Matcher</a></li><li><a href="#%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-matcher">자주 사용되는 Matcher</a></li><li><a href="#%EC%99%84%EB%A3%8C">완료</a></li></ul></div><h2 id="개요">개요</h2><p>Flutter에서 테스트 코드를 작성할 때, 여러가지 <code class="language-plaintext highlighter-rouge">Matcher</code>를 사용할 수 있습니다. 이번 블로그 포스트에서는 Flutter의 테스트 코드에서 사용 가능한 <code class="language-plaintext highlighter-rouge">Matcher</code>에 대해서 알아보고 이를 사용하는 방법에 대해서 알아보겠습니다.</p><h2 id="matcher">Matcher</h2><p>테스트 코드에서 Matcher는 특정 값이나 조건을 검증하는 데 사용되는 검증 도구입니다. 테스트가 실제 값과 기대하는 값 또는 상태가 일치하는지 비교할 때, Matcher를 사용하여 더 표현력 있고 읽기 쉬운 테스트 코드를 작성할 수 있습니다.</p><p>Flutter의 테스트 코드에서 Matcher는 <code class="language-plaintext highlighter-rouge">expect</code> 구문을 통해 값이 예상하는 조건에 맞는지 확인할 때 주로 사용됩니다. Matcher는 단순한 값 비교뿐 아니라, 더 복잡한 조건이나 다양한 유형의 검증을 지원합니다.</p><p>예를 들어:</p><ul><li>equals: 값이 특정 값과 동일한지 비교할 수 있습니다.</li><li>isNull: 값이 널인지 확인할 수 있습니다.</li><li>contains: 컬렉션이나 문자열에 특정 항목이 포함되었는지 검사할 수 있습니다.</li><li>throwsException: 함수가 예외를 던지는지 확인할 수 있습니다.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">test</span><span class="p">(</span><span class="s">'Example'</span><span class="p">,</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">contains</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">isNotEmpty</span><span class="p">);</span>
    <span class="n">expect</span><span class="p">(()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">'Error'</span><span class="p">),</span> <span class="n">throwsException</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div><p>Matcher를 사용하면 테스트 코드가 더 직관적이고 읽기 쉽게 변해 가독성이 향상되며, 복잡한 조건이나 상태를 간결하게 처리할 수 있습니다. 또한, 여러 조건을 결합하거나 부정(Negation)할 수 있어 더 유연한 테스트 작성이 가능합니다.</p><h2 id="자주-사용되는-matcher">자주 사용되는 Matcher</h2><p>Flutter의 공식 문서를 확인하면 사용가능한 Matcher들을 확인할 수 있습니다.</p><ul><li>공식 문서: <a href="https://pub.dev/documentation/matcher/latest/matcher/matcher-library.html" rel="nofollow noreferrer" target="_blank">https://pub.dev/documentation/matcher/latest/matcher/matcher-library.html</a></li></ul><p>여기서는 자주 사용하는 Matcher들을 소개하겠습니다.</p><ul><li>equals(expected): 주어진 값이 expected와 같은지 확인합니다.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">actual</span><span class="p">,</span> <span class="n">equals</span><span class="p">(</span><span class="n">expected</span><span class="p">));</span>
</code></pre></div></div><ul><li>isNot(matcher): 값이 주어진 매처와 일치하지 않는지 확인합니다.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">actual</span><span class="p">,</span> <span class="n">isNot</span><span class="p">(</span><span class="n">equals</span><span class="p">(</span><span class="mi">5</span><span class="p">)));</span>
</code></pre></div></div><ul><li>isTrue / isFalse: 값이 true 또는 false인지 확인합니다.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">isTrue</span><span class="p">);</span>
</code></pre></div></div><ul><li>contains(element): 컬렉션이나 문자열에 특정 요소가 포함되어 있는지 확인합니다.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="n">contains</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</code></pre></div></div><ul><li>isNull / isNotNull: 값이 null인지 또는 null이 아닌지 확인합니다.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">isNull</span><span class="p">);</span>
<span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">isNotNull</span><span class="p">);</span>
</code></pre></div></div><ul><li>greaterThan(value) / lessThan(value): 값이 주어진 값보다 큰지 또는 작은지 확인합니다.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">greaterThan</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
</code></pre></div></div><ul><li>startsWith(prefix) / endsWith(suffix): 문자열이 특정 문자열로 시작하거나 끝나는지 확인합니다.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="s">'Flutter'</span><span class="p">,</span> <span class="n">startsWith</span><span class="p">(</span><span class="s">'Fl'</span><span class="p">));</span>
</code></pre></div></div><ul><li>throwsException / throwsA(matcher): 특정 예외가 발생하는지 확인합니다.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">someFunction</span><span class="p">(),</span> <span class="n">throwsException</span><span class="p">);</span>
</code></pre></div></div><ul><li>allOf(matcher1, matcher2, …): 주어진 매처들이 모두 일치하는지 확인합니다.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">allOf</span><span class="p">(</span><span class="n">startsWith</span><span class="p">(</span><span class="s">'Fl'</span><span class="p">),</span> <span class="n">contains</span><span class="p">(</span><span class="s">'utt'</span><span class="p">)));</span>
</code></pre></div></div><ul><li>anyOf(matcher1, matcher2, …): 주어진 매처들 중 하나라도 일치하는지 확인합니다.</li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">anyOf</span><span class="p">(</span><span class="n">equals</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">equals</span><span class="p">(</span><span class="mi">2</span><span class="p">)));</span>
</code></pre></div></div><ul><li>isA<T>(): 값이 특정 타입인지 확인합니다.</T></li></ul><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">isA</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;());</span>
</code></pre></div></div><h2 id="완료">완료</h2><p>이것으로 Flutter의 테스트 코드에서 사용 가능한 Matcher에 대해서 알아보았습니다. Matcher를 사용하면 테스트 코드를 더 직관적이고 읽기 쉽게 작성할 수 있으며, 다양한 조건을 검증할 수 있어 유용합니다.</p><p>Flutter의 위젯 테스트에서 저는 다음과 같은 코드를 종종 사용했었습니다.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">titleContainer</span><span class="o">.</span><span class="na">child</span><span class="o">.</span><span class="na">runtimeType</span><span class="p">,</span> <span class="n">Container</span><span class="p">);</span>
</code></pre></div></div><p>이를 다음과 같이 <code class="language-plaintext highlighter-rouge">isA&lt;T&gt;()</code> Matcher를 사용하면 더 명확하게 표현할 수 있습니다.</p><div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">titleContainer</span><span class="o">.</span><span class="na">child</span><span class="p">,</span> <span class="n">isA</span><span class="p">&lt;</span><span class="n">Container</span><span class="p">&gt;());</span>
</code></pre></div></div><p>여러분도 Matcher를 사용하여 테스트 코드를 작성할 때, 더 효율적이고 읽기 쉽게 작성해보시기 바랍니다.</p>]]></content><author><name>dev.yakuza@gmail.com</name></author><category term="flutter"/><summary type="html"><![CDATA[Flutter에서 테스트 코드에서 사용 가능한 Matcher에 대해서 알아보고 이를 사용하는 방법에 대해서 알아보겠습니다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://deku.posstree.com/assets/images/category/flutter/background.png"/><media:content medium="image" url="https://deku.posstree.com/assets/images/category/flutter/background.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry></feed>